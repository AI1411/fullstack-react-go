/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * 農業災害支援システム API
 * 農業災害の報告と支援申請を管理するためのAPI
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  HandlerListDisastersResponse,
  HandlerListSupportApplicationsResponse,
  HandlerListTimelinesResponse,
  HandlerPrefectureResponse,
  HandlerSupportApplicationResponse
} from './model';


export const getListDisastersResponseMock = (): HandlerListDisastersResponse[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({disasters: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({affected_area_size: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), disaster_code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), disaster_type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), estimated_damage_amount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), impact_level: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), occurred_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), prefecture: faker.helpers.arrayElement([{name: faker.string.alpha(20), region: {name: faker.string.alpha(20)}}, undefined]), status: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), summary: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getCreateDisasterResponseMock = (overrideResponse: Partial< HandlerListDisastersResponse > = {}): HandlerListDisastersResponse => ({disasters: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({affected_area_size: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), disaster_code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), disaster_type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), estimated_damage_amount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), impact_level: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), occurred_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), prefecture: faker.helpers.arrayElement([{name: faker.string.alpha(20), region: {name: faker.string.alpha(20)}}, undefined]), status: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), summary: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getGetDisasterResponseMock = (overrideResponse: Partial< HandlerListDisastersResponse > = {}): HandlerListDisastersResponse => ({disasters: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({affected_area_size: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), disaster_code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), disaster_type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), estimated_damage_amount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), impact_level: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), occurred_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), prefecture: faker.helpers.arrayElement([{name: faker.string.alpha(20), region: {name: faker.string.alpha(20)}}, undefined]), status: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), summary: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getUpdateDisasterResponseMock = (overrideResponse: Partial< HandlerListDisastersResponse > = {}): HandlerListDisastersResponse => ({disasters: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({affected_area_size: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), disaster_code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), disaster_type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), estimated_damage_amount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), impact_level: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), occurred_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), prefecture: faker.helpers.arrayElement([{name: faker.string.alpha(20), region: {name: faker.string.alpha(20)}}, undefined]), status: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), summary: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getGetDisastersIdTimelinesResponseMock = (overrideResponse: Partial< HandlerListTimelinesResponse > = {}): HandlerListTimelinesResponse => ({timelines: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), disaster_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), event_name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), event_time: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), severity: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getListPrefecturesResponseMock = (): HandlerPrefectureResponse[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), region_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetPrefectureResponseMock = (overrideResponse: Partial< HandlerPrefectureResponse > = {}): HandlerPrefectureResponse => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), region_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getListSupportApplicationsResponseMock = (): HandlerListSupportApplicationsResponse[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({support_applications: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({applicant_name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), application_date: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), application_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), approved_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), completed_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), created_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), disaster_name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notes: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), requested_amount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), reviewed_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), status: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updated_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getCreateSupportApplicationResponseMock = (overrideResponse: Partial< HandlerSupportApplicationResponse > = {}): HandlerSupportApplicationResponse => ({applicant_name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), application_date: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), application_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), approved_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), completed_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), created_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), disaster_name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notes: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), requested_amount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), reviewed_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), status: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updated_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getGetSupportApplicationResponseMock = (overrideResponse: Partial< HandlerSupportApplicationResponse > = {}): HandlerSupportApplicationResponse => ({applicant_name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), application_date: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), application_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), approved_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), completed_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), created_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), disaster_name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notes: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), requested_amount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), reviewed_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), status: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updated_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})


export const getListDisastersMockHandler = (overrideResponse?: HandlerListDisastersResponse[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<HandlerListDisastersResponse[]> | HandlerListDisastersResponse[])) => {
  return http.get('*/disasters', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getListDisastersResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCreateDisasterMockHandler = (overrideResponse?: HandlerListDisastersResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<HandlerListDisastersResponse> | HandlerListDisastersResponse)) => {
  return http.post('*/disasters', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreateDisasterResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteDisasterMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/disasters/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getGetDisasterMockHandler = (overrideResponse?: HandlerListDisastersResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<HandlerListDisastersResponse> | HandlerListDisastersResponse)) => {
  return http.get('*/disasters/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetDisasterResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateDisasterMockHandler = (overrideResponse?: HandlerListDisastersResponse | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<HandlerListDisastersResponse> | HandlerListDisastersResponse)) => {
  return http.put('*/disasters/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateDisasterResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetDisastersIdTimelinesMockHandler = (overrideResponse?: HandlerListTimelinesResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<HandlerListTimelinesResponse> | HandlerListTimelinesResponse)) => {
  return http.get('*/disasters/:id/timelines', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetDisastersIdTimelinesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getListPrefecturesMockHandler = (overrideResponse?: HandlerPrefectureResponse[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<HandlerPrefectureResponse[]> | HandlerPrefectureResponse[])) => {
  return http.get('*/prefectures', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getListPrefecturesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetPrefectureMockHandler = (overrideResponse?: HandlerPrefectureResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<HandlerPrefectureResponse> | HandlerPrefectureResponse)) => {
  return http.get('*/prefectures/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetPrefectureResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getListSupportApplicationsMockHandler = (overrideResponse?: HandlerListSupportApplicationsResponse[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<HandlerListSupportApplicationsResponse[]> | HandlerListSupportApplicationsResponse[])) => {
  return http.get('*/support-applications', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getListSupportApplicationsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCreateSupportApplicationMockHandler = (overrideResponse?: HandlerSupportApplicationResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<HandlerSupportApplicationResponse> | HandlerSupportApplicationResponse)) => {
  return http.post('*/support-applications', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreateSupportApplicationResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetSupportApplicationMockHandler = (overrideResponse?: HandlerSupportApplicationResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<HandlerSupportApplicationResponse> | HandlerSupportApplicationResponse)) => {
  return http.get('*/support-applications/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetSupportApplicationResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getApiMock = () => [
  getListDisastersMockHandler(),
  getCreateDisasterMockHandler(),
  getDeleteDisasterMockHandler(),
  getGetDisasterMockHandler(),
  getUpdateDisasterMockHandler(),
  getGetDisastersIdTimelinesMockHandler(),
  getListPrefecturesMockHandler(),
  getGetPrefectureMockHandler(),
  getListSupportApplicationsMockHandler(),
  getCreateSupportApplicationMockHandler(),
  getGetSupportApplicationMockHandler()
]
