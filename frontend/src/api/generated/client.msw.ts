/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * 農業災害支援システム API
 * 農業災害の報告と支援申請を管理するためのAPI
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  Callback200,
  HandlerDamageLevelResponse,
  HandlerFacilityEquipmentResponse,
  HandlerListDisastersResponse,
  HandlerListSupportApplicationsResponse,
  HandlerListTimelinesResponse,
  HandlerNotificationResponse,
  HandlerOrganizationResponse,
  HandlerPrefectureResponse,
  HandlerSupportApplicationResponse,
  HandlerUserResponse,
  Logout200
} from './model';


export const getCallbackResponseMock = (): Callback200 => ({
        [faker.string.alphanumeric(5)]: faker.string.alpha(20)
      })

export const getLogoutResponseMock = (): Logout200 => ({
        [faker.string.alphanumeric(5)]: faker.string.alpha(20)
      })

export const getListDamageLevelsResponseMock = (): HandlerDamageLevelResponse[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})))

export const getCreateDamageLevelResponseMock = (overrideResponse: Partial< HandlerDamageLevelResponse > = {}): HandlerDamageLevelResponse => ({description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getGetDamageLevelResponseMock = (overrideResponse: Partial< HandlerDamageLevelResponse > = {}): HandlerDamageLevelResponse => ({description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getUpdateDamageLevelResponseMock = (overrideResponse: Partial< HandlerDamageLevelResponse > = {}): HandlerDamageLevelResponse => ({description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getListDisastersResponseMock = (): HandlerListDisastersResponse[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({disasters: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), affected_area_size: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), disaster_code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), disaster_type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), estimated_damage_amount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), impact_level: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), occurred_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), place_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), prefecture: faker.helpers.arrayElement([{name: faker.string.alpha(20), region: {name: faker.string.alpha(20)}}, undefined]), status: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), summary: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getCreateDisasterResponseMock = (overrideResponse: Partial< HandlerListDisastersResponse > = {}): HandlerListDisastersResponse => ({disasters: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), affected_area_size: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), disaster_code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), disaster_type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), estimated_damage_amount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), impact_level: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), occurred_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), place_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), prefecture: faker.helpers.arrayElement([{name: faker.string.alpha(20), region: {name: faker.string.alpha(20)}}, undefined]), status: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), summary: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getGetDisasterResponseMock = (overrideResponse: Partial< HandlerListDisastersResponse > = {}): HandlerListDisastersResponse => ({disasters: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), affected_area_size: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), disaster_code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), disaster_type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), estimated_damage_amount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), impact_level: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), occurred_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), place_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), prefecture: faker.helpers.arrayElement([{name: faker.string.alpha(20), region: {name: faker.string.alpha(20)}}, undefined]), status: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), summary: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getUpdateDisasterResponseMock = (overrideResponse: Partial< HandlerListDisastersResponse > = {}): HandlerListDisastersResponse => ({disasters: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), affected_area_size: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), disaster_code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), disaster_type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), estimated_damage_amount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), impact_level: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), occurred_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), place_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), prefecture: faker.helpers.arrayElement([{name: faker.string.alpha(20), region: {name: faker.string.alpha(20)}}, undefined]), status: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), summary: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getGetDisastersIdTimelinesResponseMock = (overrideResponse: Partial< HandlerListTimelinesResponse > = {}): HandlerListTimelinesResponse => ({timelines: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), disaster_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), event_name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), event_time: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), severity: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getListFacilityEquipmentsResponseMock = (): HandlerFacilityEquipmentResponse[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({facility_type_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), facility_type_name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), installation_date: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), location_description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), location_latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), location_longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), model_number: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notes: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), status: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})))

export const getCreateFacilityEquipmentResponseMock = (overrideResponse: Partial< HandlerFacilityEquipmentResponse > = {}): HandlerFacilityEquipmentResponse => ({facility_type_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), facility_type_name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), installation_date: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), location_description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), location_latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), location_longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), model_number: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notes: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), status: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getGetFacilityEquipmentResponseMock = (overrideResponse: Partial< HandlerFacilityEquipmentResponse > = {}): HandlerFacilityEquipmentResponse => ({facility_type_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), facility_type_name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), installation_date: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), location_description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), location_latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), location_longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), model_number: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notes: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), status: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getUpdateFacilityEquipmentResponseMock = (overrideResponse: Partial< HandlerFacilityEquipmentResponse > = {}): HandlerFacilityEquipmentResponse => ({facility_type_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), facility_type_name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), installation_date: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), location_description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), location_latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), location_longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), model_number: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notes: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), status: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getListNotificationsResponseMock = (): HandlerNotificationResponse[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), is_read: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notification_type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), read_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), related_entity_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), related_entity_type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), title: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updated_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), user_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})))

export const getCreateNotificationResponseMock = (overrideResponse: Partial< HandlerNotificationResponse > = {}): HandlerNotificationResponse => ({created_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), is_read: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notification_type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), read_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), related_entity_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), related_entity_type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), title: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updated_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), user_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getGetNotificationResponseMock = (overrideResponse: Partial< HandlerNotificationResponse > = {}): HandlerNotificationResponse => ({created_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), is_read: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notification_type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), read_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), related_entity_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), related_entity_type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), title: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updated_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), user_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getUpdateNotificationResponseMock = (overrideResponse: Partial< HandlerNotificationResponse > = {}): HandlerNotificationResponse => ({created_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), is_read: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notification_type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), read_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), related_entity_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), related_entity_type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), title: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updated_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), user_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getMarkAsReadResponseMock = (overrideResponse: Partial< HandlerNotificationResponse > = {}): HandlerNotificationResponse => ({created_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), is_read: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notification_type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), read_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), related_entity_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), related_entity_type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), title: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updated_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), user_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getGetNotificationsByUserIDResponseMock = (): HandlerNotificationResponse[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), is_read: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notification_type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), read_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), related_entity_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), related_entity_type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), title: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updated_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), user_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})))

export const getListOrganizationsResponseMock = (): HandlerOrganizationResponse[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), parent_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), prefecture_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updated_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), users: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizations: faker.helpers.arrayElement([[], undefined]), updated_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), undefined])})))

export const getCreateOrganizationResponseMock = (overrideResponse: Partial< HandlerOrganizationResponse > = {}): HandlerOrganizationResponse => ({created_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), parent_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), prefecture_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updated_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), users: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), parent_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), prefecture_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updated_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), users: faker.helpers.arrayElement([[], undefined])})), undefined]), updated_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), undefined]), ...overrideResponse})

export const getGetOrganizationResponseMock = (overrideResponse: Partial< HandlerOrganizationResponse > = {}): HandlerOrganizationResponse => ({created_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), parent_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), prefecture_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updated_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), users: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), parent_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), prefecture_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updated_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), users: faker.helpers.arrayElement([[], undefined])})), undefined]), updated_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), undefined]), ...overrideResponse})

export const getUpdateOrganizationResponseMock = (overrideResponse: Partial< HandlerOrganizationResponse > = {}): HandlerOrganizationResponse => ({created_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), parent_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), prefecture_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updated_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), users: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), parent_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), prefecture_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updated_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), users: faker.helpers.arrayElement([[], undefined])})), undefined]), updated_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), undefined]), ...overrideResponse})

export const getListPrefecturesResponseMock = (): HandlerPrefectureResponse[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})))

export const getGetPrefectureResponseMock = (overrideResponse: Partial< HandlerPrefectureResponse > = {}): HandlerPrefectureResponse => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getListSupportApplicationsResponseMock = (): HandlerListSupportApplicationsResponse[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({support_applications: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({applicant_name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), application_date: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), application_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), approved_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), completed_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), created_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), disaster_name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notes: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), requested_amount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), reviewed_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), status: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updated_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), undefined]), total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getCreateSupportApplicationResponseMock = (overrideResponse: Partial< HandlerSupportApplicationResponse > = {}): HandlerSupportApplicationResponse => ({applicant_name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), application_date: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), application_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), approved_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), completed_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), created_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), disaster_name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notes: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), requested_amount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), reviewed_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), status: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updated_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getGetSupportApplicationResponseMock = (overrideResponse: Partial< HandlerSupportApplicationResponse > = {}): HandlerSupportApplicationResponse => ({applicant_name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), application_date: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), application_id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), approved_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), completed_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), created_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), disaster_name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notes: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), requested_amount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), reviewed_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), status: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updated_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getListUsersResponseMock = (): HandlerUserResponse[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), parent_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), prefecture_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updated_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), users: faker.helpers.arrayElement([[], undefined])})), undefined]), updated_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})))

export const getCreateUserResponseMock = (overrideResponse: Partial< HandlerUserResponse > = {}): HandlerUserResponse => ({created_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), parent_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), prefecture_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updated_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), users: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizations: faker.helpers.arrayElement([[], undefined]), updated_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), undefined])})), undefined]), updated_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getGetUserResponseMock = (overrideResponse: Partial< HandlerUserResponse > = {}): HandlerUserResponse => ({created_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), parent_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), prefecture_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updated_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), users: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizations: faker.helpers.arrayElement([[], undefined]), updated_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), undefined])})), undefined]), updated_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getUpdateUserResponseMock = (overrideResponse: Partial< HandlerUserResponse > = {}): HandlerUserResponse => ({created_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), parent_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), prefecture_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updated_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), users: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizations: faker.helpers.arrayElement([[], undefined]), updated_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), undefined])})), undefined]), updated_at: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})


export const getCallbackMockHandler = (overrideResponse?: Callback200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Callback200> | Callback200)) => {
  return http.get('*/auth/callback', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCallbackResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getLoginMockHandler = (overrideResponse?: unknown | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<unknown> | unknown)) => {
  return http.get('*/auth/login', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getLogoutMockHandler = (overrideResponse?: Logout200 | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Logout200> | Logout200)) => {
  return http.post('*/auth/logout', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getLogoutResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getListDamageLevelsMockHandler = (overrideResponse?: HandlerDamageLevelResponse[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<HandlerDamageLevelResponse[]> | HandlerDamageLevelResponse[])) => {
  return http.get('*/damage-levels', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getListDamageLevelsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCreateDamageLevelMockHandler = (overrideResponse?: HandlerDamageLevelResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<HandlerDamageLevelResponse> | HandlerDamageLevelResponse)) => {
  return http.post('*/damage-levels', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreateDamageLevelResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteDamageLevelMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/damage-levels/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getGetDamageLevelMockHandler = (overrideResponse?: HandlerDamageLevelResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<HandlerDamageLevelResponse> | HandlerDamageLevelResponse)) => {
  return http.get('*/damage-levels/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetDamageLevelResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateDamageLevelMockHandler = (overrideResponse?: HandlerDamageLevelResponse | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<HandlerDamageLevelResponse> | HandlerDamageLevelResponse)) => {
  return http.put('*/damage-levels/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateDamageLevelResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getListDisastersMockHandler = (overrideResponse?: HandlerListDisastersResponse[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<HandlerListDisastersResponse[]> | HandlerListDisastersResponse[])) => {
  return http.get('*/disasters', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getListDisastersResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCreateDisasterMockHandler = (overrideResponse?: HandlerListDisastersResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<HandlerListDisastersResponse> | HandlerListDisastersResponse)) => {
  return http.post('*/disasters', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreateDisasterResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteDisasterMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/disasters/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getGetDisasterMockHandler = (overrideResponse?: HandlerListDisastersResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<HandlerListDisastersResponse> | HandlerListDisastersResponse)) => {
  return http.get('*/disasters/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetDisasterResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateDisasterMockHandler = (overrideResponse?: HandlerListDisastersResponse | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<HandlerListDisastersResponse> | HandlerListDisastersResponse)) => {
  return http.put('*/disasters/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateDisasterResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetDisastersIdTimelinesMockHandler = (overrideResponse?: HandlerListTimelinesResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<HandlerListTimelinesResponse> | HandlerListTimelinesResponse)) => {
  return http.get('*/disasters/:id/timelines', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetDisastersIdTimelinesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getListFacilityEquipmentsMockHandler = (overrideResponse?: HandlerFacilityEquipmentResponse[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<HandlerFacilityEquipmentResponse[]> | HandlerFacilityEquipmentResponse[])) => {
  return http.get('*/facility-equipment', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getListFacilityEquipmentsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCreateFacilityEquipmentMockHandler = (overrideResponse?: HandlerFacilityEquipmentResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<HandlerFacilityEquipmentResponse> | HandlerFacilityEquipmentResponse)) => {
  return http.post('*/facility-equipment', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreateFacilityEquipmentResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteFacilityEquipmentMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/facility-equipment/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getGetFacilityEquipmentMockHandler = (overrideResponse?: HandlerFacilityEquipmentResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<HandlerFacilityEquipmentResponse> | HandlerFacilityEquipmentResponse)) => {
  return http.get('*/facility-equipment/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetFacilityEquipmentResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateFacilityEquipmentMockHandler = (overrideResponse?: HandlerFacilityEquipmentResponse | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<HandlerFacilityEquipmentResponse> | HandlerFacilityEquipmentResponse)) => {
  return http.put('*/facility-equipment/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateFacilityEquipmentResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getListNotificationsMockHandler = (overrideResponse?: HandlerNotificationResponse[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<HandlerNotificationResponse[]> | HandlerNotificationResponse[])) => {
  return http.get('*/notifications', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getListNotificationsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCreateNotificationMockHandler = (overrideResponse?: HandlerNotificationResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<HandlerNotificationResponse> | HandlerNotificationResponse)) => {
  return http.post('*/notifications', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreateNotificationResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteNotificationMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/notifications/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getGetNotificationMockHandler = (overrideResponse?: HandlerNotificationResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<HandlerNotificationResponse> | HandlerNotificationResponse)) => {
  return http.get('*/notifications/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetNotificationResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateNotificationMockHandler = (overrideResponse?: HandlerNotificationResponse | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<HandlerNotificationResponse> | HandlerNotificationResponse)) => {
  return http.put('*/notifications/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateNotificationResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getMarkAsReadMockHandler = (overrideResponse?: HandlerNotificationResponse | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<HandlerNotificationResponse> | HandlerNotificationResponse)) => {
  return http.put('*/notifications/:id/read', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getMarkAsReadResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetNotificationsByUserIDMockHandler = (overrideResponse?: HandlerNotificationResponse[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<HandlerNotificationResponse[]> | HandlerNotificationResponse[])) => {
  return http.get('*/notifications/user/:userId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetNotificationsByUserIDResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getListOrganizationsMockHandler = (overrideResponse?: HandlerOrganizationResponse[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<HandlerOrganizationResponse[]> | HandlerOrganizationResponse[])) => {
  return http.get('*/organizations', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getListOrganizationsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCreateOrganizationMockHandler = (overrideResponse?: HandlerOrganizationResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<HandlerOrganizationResponse> | HandlerOrganizationResponse)) => {
  return http.post('*/organizations', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreateOrganizationResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteOrganizationMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/organizations/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getGetOrganizationMockHandler = (overrideResponse?: HandlerOrganizationResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<HandlerOrganizationResponse> | HandlerOrganizationResponse)) => {
  return http.get('*/organizations/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetOrganizationResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateOrganizationMockHandler = (overrideResponse?: HandlerOrganizationResponse | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<HandlerOrganizationResponse> | HandlerOrganizationResponse)) => {
  return http.put('*/organizations/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateOrganizationResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getListPrefecturesMockHandler = (overrideResponse?: HandlerPrefectureResponse[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<HandlerPrefectureResponse[]> | HandlerPrefectureResponse[])) => {
  return http.get('*/prefectures', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getListPrefecturesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetPrefectureMockHandler = (overrideResponse?: HandlerPrefectureResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<HandlerPrefectureResponse> | HandlerPrefectureResponse)) => {
  return http.get('*/prefectures/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetPrefectureResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getListSupportApplicationsMockHandler = (overrideResponse?: HandlerListSupportApplicationsResponse[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<HandlerListSupportApplicationsResponse[]> | HandlerListSupportApplicationsResponse[])) => {
  return http.get('*/support-applications', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getListSupportApplicationsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCreateSupportApplicationMockHandler = (overrideResponse?: HandlerSupportApplicationResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<HandlerSupportApplicationResponse> | HandlerSupportApplicationResponse)) => {
  return http.post('*/support-applications', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreateSupportApplicationResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetSupportApplicationMockHandler = (overrideResponse?: HandlerSupportApplicationResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<HandlerSupportApplicationResponse> | HandlerSupportApplicationResponse)) => {
  return http.get('*/support-applications/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetSupportApplicationResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getListUsersMockHandler = (overrideResponse?: HandlerUserResponse[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<HandlerUserResponse[]> | HandlerUserResponse[])) => {
  return http.get('*/users', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getListUsersResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCreateUserMockHandler = (overrideResponse?: HandlerUserResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<HandlerUserResponse> | HandlerUserResponse)) => {
  return http.post('*/users', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreateUserResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteUserMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/users/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getGetUserMockHandler = (overrideResponse?: HandlerUserResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<HandlerUserResponse> | HandlerUserResponse)) => {
  return http.get('*/users/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetUserResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateUserMockHandler = (overrideResponse?: HandlerUserResponse | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<HandlerUserResponse> | HandlerUserResponse)) => {
  return http.put('*/users/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateUserResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getApiMock = () => [
  getCallbackMockHandler(),
  getLoginMockHandler(),
  getLogoutMockHandler(),
  getListDamageLevelsMockHandler(),
  getCreateDamageLevelMockHandler(),
  getDeleteDamageLevelMockHandler(),
  getGetDamageLevelMockHandler(),
  getUpdateDamageLevelMockHandler(),
  getListDisastersMockHandler(),
  getCreateDisasterMockHandler(),
  getDeleteDisasterMockHandler(),
  getGetDisasterMockHandler(),
  getUpdateDisasterMockHandler(),
  getGetDisastersIdTimelinesMockHandler(),
  getListFacilityEquipmentsMockHandler(),
  getCreateFacilityEquipmentMockHandler(),
  getDeleteFacilityEquipmentMockHandler(),
  getGetFacilityEquipmentMockHandler(),
  getUpdateFacilityEquipmentMockHandler(),
  getListNotificationsMockHandler(),
  getCreateNotificationMockHandler(),
  getDeleteNotificationMockHandler(),
  getGetNotificationMockHandler(),
  getUpdateNotificationMockHandler(),
  getMarkAsReadMockHandler(),
  getGetNotificationsByUserIDMockHandler(),
  getListOrganizationsMockHandler(),
  getCreateOrganizationMockHandler(),
  getDeleteOrganizationMockHandler(),
  getGetOrganizationMockHandler(),
  getUpdateOrganizationMockHandler(),
  getListPrefecturesMockHandler(),
  getGetPrefectureMockHandler(),
  getListSupportApplicationsMockHandler(),
  getCreateSupportApplicationMockHandler(),
  getGetSupportApplicationMockHandler(),
  getListUsersMockHandler(),
  getCreateUserMockHandler(),
  getDeleteUserMockHandler(),
  getGetUserMockHandler(),
  getUpdateUserMockHandler()
]
