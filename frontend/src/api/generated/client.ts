/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Ëæ≤Ê•≠ÁÅΩÂÆ≥ÊîØÊè¥„Ç∑„Çπ„ÉÜ„É† API
 * Ëæ≤Ê•≠ÁÅΩÂÆ≥„ÅÆÂ†±Âëä„Å®ÊîØÊè¥Áî≥Ë´ã„ÇíÁÆ°ÁêÜ„Åô„Çã„Åü„ÇÅ„ÅÆAPI
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query"
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"

import * as axios from "axios"
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios"

import type {
  CreateDisaster400,
  CreateSupportApplication400,
  DeleteDisaster404,
  GetDisaster404,
  GetPrefecture404,
  GetSupportApplication404,
  HandlerCreateDisasterRequest,
  HandlerCreateSupportApplicationRequest,
  HandlerListDisastersResponse,
  HandlerListSupportApplicationsResponse,
  HandlerListTimelinesResponse,
  HandlerPrefectureResponse,
  HandlerSupportApplicationResponse,
  HandlerUpdateDisasterRequest,
  ListDisastersParams,
  UpdateDisaster400,
  UpdateDisaster404,
} from "./model"

/**
 * @summary ÁÅΩÂÆ≥„Éû„Çπ„Çø‰∏ÄË¶ßÂèñÂæó
 */
export const listDisasters = (
  params?: ListDisastersParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<HandlerListDisastersResponse[]>> => {
  return axios.default.get(`/disasters`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

export const getListDisastersQueryKey = (params?: ListDisastersParams) => {
  return [`/disasters`, ...(params ? [params] : [])] as const
}

export const getListDisastersQueryOptions = <
  TData = Awaited<ReturnType<typeof listDisasters>>,
  TError = AxiosError<unknown>,
>(
  params?: ListDisastersParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof listDisasters>>,
      TError,
      TData
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getListDisastersQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listDisasters>>> = ({
    signal,
  }) => listDisasters(params, { signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listDisasters>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type ListDisastersQueryResult = NonNullable<
  Awaited<ReturnType<typeof listDisasters>>
>
export type ListDisastersQueryError = AxiosError<unknown>

/**
 * @summary ÁÅΩÂÆ≥„Éû„Çπ„Çø‰∏ÄË¶ßÂèñÂæó
 */

export function useListDisasters<
  TData = Awaited<ReturnType<typeof listDisasters>>,
  TError = AxiosError<unknown>,
>(
  params?: ListDisastersParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof listDisasters>>,
      TError,
      TData
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getListDisastersQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary ÁÅΩÂÆ≥‰ΩúÊàê
 */
export const createDisaster = (
  handlerCreateDisasterRequest: HandlerCreateDisasterRequest,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<HandlerListDisastersResponse>> => {
  return axios.default.post(`/disasters`, handlerCreateDisasterRequest, options)
}

export const getCreateDisasterMutationOptions = <
  TError = AxiosError<CreateDisaster400>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createDisaster>>,
    TError,
    { data: HandlerCreateDisasterRequest },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof createDisaster>>,
  TError,
  { data: HandlerCreateDisasterRequest },
  TContext
> => {
  const mutationKey = ["createDisaster"]
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createDisaster>>,
    { data: HandlerCreateDisasterRequest }
  > = (props) => {
    const { data } = props ?? {}

    return createDisaster(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateDisasterMutationResult = NonNullable<
  Awaited<ReturnType<typeof createDisaster>>
>
export type CreateDisasterMutationBody = HandlerCreateDisasterRequest
export type CreateDisasterMutationError = AxiosError<CreateDisaster400>

/**
 * @summary ÁÅΩÂÆ≥‰ΩúÊàê
 */
export const useCreateDisaster = <
  TError = AxiosError<CreateDisaster400>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createDisaster>>,
    TError,
    { data: HandlerCreateDisasterRequest },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof createDisaster>>,
  TError,
  { data: HandlerCreateDisasterRequest },
  TContext
> => {
  const mutationOptions = getCreateDisasterMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary ÁÅΩÂÆ≥ÂâäÈô§
 */
export const deleteDisaster = (
  id: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.default.delete(`/disasters/${id}`, options)
}

export const getDeleteDisasterMutationOptions = <
  TError = AxiosError<DeleteDisaster404>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteDisaster>>,
    TError,
    { id: string },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteDisaster>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteDisaster"]
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteDisaster>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {}

    return deleteDisaster(id, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteDisasterMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteDisaster>>
>

export type DeleteDisasterMutationError = AxiosError<DeleteDisaster404>

/**
 * @summary ÁÅΩÂÆ≥ÂâäÈô§
 */
export const useDeleteDisaster = <
  TError = AxiosError<DeleteDisaster404>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteDisaster>>,
    TError,
    { id: string },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteDisaster>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteDisasterMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary ÁÅΩÂÆ≥Ë©≥Á¥∞ÂèñÂæó
 */
export const getDisaster = (
  id: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<HandlerListDisastersResponse>> => {
  return axios.default.get(`/disasters/${id}`, options)
}

export const getGetDisasterQueryKey = (id: string) => {
  return [`/disasters/${id}`] as const
}

export const getGetDisasterQueryOptions = <
  TData = Awaited<ReturnType<typeof getDisaster>>,
  TError = AxiosError<GetDisaster404>,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDisaster>>,
      TError,
      TData
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetDisasterQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDisaster>>> = ({
    signal,
  }) => getDisaster(id, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDisaster>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDisasterQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDisaster>>
>
export type GetDisasterQueryError = AxiosError<GetDisaster404>

/**
 * @summary ÁÅΩÂÆ≥Ë©≥Á¥∞ÂèñÂæó
 */

export function useGetDisaster<
  TData = Awaited<ReturnType<typeof getDisaster>>,
  TError = AxiosError<GetDisaster404>,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDisaster>>,
      TError,
      TData
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetDisasterQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary ÁÅΩÂÆ≥Êõ¥Êñ∞
 */
export const updateDisaster = (
  id: string,
  handlerUpdateDisasterRequest: HandlerUpdateDisasterRequest,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<HandlerListDisastersResponse>> => {
  return axios.default.put(
    `/disasters/${id}`,
    handlerUpdateDisasterRequest,
    options
  )
}

export const getUpdateDisasterMutationOptions = <
  TError = AxiosError<UpdateDisaster400 | UpdateDisaster404>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateDisaster>>,
    TError,
    { id: string; data: HandlerUpdateDisasterRequest },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateDisaster>>,
  TError,
  { id: string; data: HandlerUpdateDisasterRequest },
  TContext
> => {
  const mutationKey = ["updateDisaster"]
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateDisaster>>,
    { id: string; data: HandlerUpdateDisasterRequest }
  > = (props) => {
    const { id, data } = props ?? {}

    return updateDisaster(id, data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateDisasterMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateDisaster>>
>
export type UpdateDisasterMutationBody = HandlerUpdateDisasterRequest
export type UpdateDisasterMutationError = AxiosError<
  UpdateDisaster400 | UpdateDisaster404
>

/**
 * @summary ÁÅΩÂÆ≥Êõ¥Êñ∞
 */
export const useUpdateDisaster = <
  TError = AxiosError<UpdateDisaster400 | UpdateDisaster404>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateDisaster>>,
    TError,
    { id: string; data: HandlerUpdateDisasterRequest },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof updateDisaster>>,
  TError,
  { id: string; data: HandlerUpdateDisasterRequest },
  TContext
> => {
  const mutationOptions = getUpdateDisasterMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * Get timelines by disaster ID
 * @summary Get timelines by disaster ID
 */
export const getDisastersIdTimelines = (
  id: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<HandlerListTimelinesResponse>> => {
  return axios.default.get(`/disasters/${id}/timelines`, options)
}

export const getGetDisastersIdTimelinesQueryKey = (id: string) => {
  return [`/disasters/${id}/timelines`] as const
}

export const getGetDisastersIdTimelinesQueryOptions = <
  TData = Awaited<ReturnType<typeof getDisastersIdTimelines>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDisastersIdTimelines>>,
      TError,
      TData
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetDisastersIdTimelinesQueryKey(id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDisastersIdTimelines>>
  > = ({ signal }) => getDisastersIdTimelines(id, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDisastersIdTimelines>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDisastersIdTimelinesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDisastersIdTimelines>>
>
export type GetDisastersIdTimelinesQueryError = AxiosError<unknown>

/**
 * @summary Get timelines by disaster ID
 */

export function useGetDisastersIdTimelines<
  TData = Awaited<ReturnType<typeof getDisastersIdTimelines>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDisastersIdTimelines>>,
      TError,
      TData
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetDisastersIdTimelinesQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary ÈÉΩÈÅìÂ∫úÁúå‰∏ÄË¶ßÂèñÂæó
 */
export const listPrefectures = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<HandlerPrefectureResponse[]>> => {
  return axios.default.get(`/prefectures`, options)
}

export const getListPrefecturesQueryKey = () => {
  return [`/prefectures`] as const
}

export const getListPrefecturesQueryOptions = <
  TData = Awaited<ReturnType<typeof listPrefectures>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof listPrefectures>>,
    TError,
    TData
  >
  axios?: AxiosRequestConfig
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getListPrefecturesQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listPrefectures>>> = ({
    signal,
  }) => listPrefectures({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listPrefectures>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type ListPrefecturesQueryResult = NonNullable<
  Awaited<ReturnType<typeof listPrefectures>>
>
export type ListPrefecturesQueryError = AxiosError<unknown>

/**
 * @summary ÈÉΩÈÅìÂ∫úÁúå‰∏ÄË¶ßÂèñÂæó
 */

export function useListPrefectures<
  TData = Awaited<ReturnType<typeof listPrefectures>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof listPrefectures>>,
    TError,
    TData
  >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getListPrefecturesQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary ÈÉΩÈÅìÂ∫úÁúåË©≥Á¥∞ÂèñÂæó
 */
export const getPrefecture = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<HandlerPrefectureResponse>> => {
  return axios.default.get(`/prefectures/${id}`, options)
}

export const getGetPrefectureQueryKey = (id: number) => {
  return [`/prefectures/${id}`] as const
}

export const getGetPrefectureQueryOptions = <
  TData = Awaited<ReturnType<typeof getPrefecture>>,
  TError = AxiosError<GetPrefecture404>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getPrefecture>>,
      TError,
      TData
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetPrefectureQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPrefecture>>> = ({
    signal,
  }) => getPrefecture(id, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getPrefecture>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetPrefectureQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPrefecture>>
>
export type GetPrefectureQueryError = AxiosError<GetPrefecture404>

/**
 * @summary ÈÉΩÈÅìÂ∫úÁúåË©≥Á¥∞ÂèñÂæó
 */

export function useGetPrefecture<
  TData = Awaited<ReturnType<typeof getPrefecture>>,
  TError = AxiosError<GetPrefecture404>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getPrefecture>>,
      TError,
      TData
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetPrefectureQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary ÊîØÊè¥Áî≥Ë´ã‰∏ÄË¶ßÂèñÂæó
 */
export const listSupportApplications = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<HandlerListSupportApplicationsResponse[]>> => {
  return axios.default.get(`/support-applications`, options)
}

export const getListSupportApplicationsQueryKey = () => {
  return [`/support-applications`] as const
}

export const getListSupportApplicationsQueryOptions = <
  TData = Awaited<ReturnType<typeof listSupportApplications>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof listSupportApplications>>,
    TError,
    TData
  >
  axios?: AxiosRequestConfig
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getListSupportApplicationsQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listSupportApplications>>
  > = ({ signal }) => listSupportApplications({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listSupportApplications>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type ListSupportApplicationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof listSupportApplications>>
>
export type ListSupportApplicationsQueryError = AxiosError<unknown>

/**
 * @summary ÊîØÊè¥Áî≥Ë´ã‰∏ÄË¶ßÂèñÂæó
 */

export function useListSupportApplications<
  TData = Awaited<ReturnType<typeof listSupportApplications>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof listSupportApplications>>,
    TError,
    TData
  >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getListSupportApplicationsQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary ÊîØÊè¥Áî≥Ë´ã‰ΩúÊàê
 */
export const createSupportApplication = (
  handlerCreateSupportApplicationRequest: HandlerCreateSupportApplicationRequest,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<HandlerSupportApplicationResponse>> => {
  return axios.default.post(
    `/support-applications`,
    handlerCreateSupportApplicationRequest,
    options
  )
}

export const getCreateSupportApplicationMutationOptions = <
  TError = AxiosError<CreateSupportApplication400>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createSupportApplication>>,
    TError,
    { data: HandlerCreateSupportApplicationRequest },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof createSupportApplication>>,
  TError,
  { data: HandlerCreateSupportApplicationRequest },
  TContext
> => {
  const mutationKey = ["createSupportApplication"]
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createSupportApplication>>,
    { data: HandlerCreateSupportApplicationRequest }
  > = (props) => {
    const { data } = props ?? {}

    return createSupportApplication(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateSupportApplicationMutationResult = NonNullable<
  Awaited<ReturnType<typeof createSupportApplication>>
>
export type CreateSupportApplicationMutationBody =
  HandlerCreateSupportApplicationRequest
export type CreateSupportApplicationMutationError =
  AxiosError<CreateSupportApplication400>

/**
 * @summary ÊîØÊè¥Áî≥Ë´ã‰ΩúÊàê
 */
export const useCreateSupportApplication = <
  TError = AxiosError<CreateSupportApplication400>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createSupportApplication>>,
    TError,
    { data: HandlerCreateSupportApplicationRequest },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof createSupportApplication>>,
  TError,
  { data: HandlerCreateSupportApplicationRequest },
  TContext
> => {
  const mutationOptions = getCreateSupportApplicationMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary ÊîØÊè¥Áî≥Ë´ãË©≥Á¥∞ÂèñÂæó
 */
export const getSupportApplication = (
  id: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<HandlerSupportApplicationResponse>> => {
  return axios.default.get(`/support-applications/${id}`, options)
}

export const getGetSupportApplicationQueryKey = (id: string) => {
  return [`/support-applications/${id}`] as const
}

export const getGetSupportApplicationQueryOptions = <
  TData = Awaited<ReturnType<typeof getSupportApplication>>,
  TError = AxiosError<GetSupportApplication404>,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getSupportApplication>>,
      TError,
      TData
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetSupportApplicationQueryKey(id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSupportApplication>>
  > = ({ signal }) => getSupportApplication(id, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getSupportApplication>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetSupportApplicationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSupportApplication>>
>
export type GetSupportApplicationQueryError =
  AxiosError<GetSupportApplication404>

/**
 * @summary ÊîØÊè¥Áî≥Ë´ãË©≥Á¥∞ÂèñÂæó
 */

export function useGetSupportApplication<
  TData = Awaited<ReturnType<typeof getSupportApplication>>,
  TError = AxiosError<GetSupportApplication404>,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getSupportApplication>>,
      TError,
      TData
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetSupportApplicationQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}
