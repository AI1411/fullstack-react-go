/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 */
import { useQuery } from "@tanstack/react-query"
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"

import axios from "axios"
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios"

/**
 * @summary ÁÅΩÂÆ≥„Éû„Çπ„Çø‰∏ÄË¶ßÂèñÂæó
 */
export const listDisasters = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(`/disasters`, options)
}

export const getListDisastersQueryKey = () => {
  return [`/disasters`] as const
}

export const getListDisastersQueryOptions = <
  TData = Awaited<ReturnType<typeof listDisasters>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listDisasters>>, TError, TData>
  >
  axios?: AxiosRequestConfig
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getListDisastersQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listDisasters>>> = ({
    signal,
  }) => listDisasters({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listDisasters>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type ListDisastersQueryResult = NonNullable<
  Awaited<ReturnType<typeof listDisasters>>
>
export type ListDisastersQueryError = AxiosError<unknown>

export function useListDisasters<
  TData = Awaited<ReturnType<typeof listDisasters>>,
  TError = AxiosError<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listDisasters>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listDisasters>>,
          TError,
          Awaited<ReturnType<typeof listDisasters>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>
}
export function useListDisasters<
  TData = Awaited<ReturnType<typeof listDisasters>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listDisasters>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listDisasters>>,
          TError,
          Awaited<ReturnType<typeof listDisasters>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListDisasters<
  TData = Awaited<ReturnType<typeof listDisasters>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listDisasters>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÁÅΩÂÆ≥„Éû„Çπ„Çø‰∏ÄË¶ßÂèñÂæó
 */

export function useListDisasters<
  TData = Awaited<ReturnType<typeof listDisasters>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listDisasters>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getListDisastersQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> }

  query.queryKey = queryOptions.queryKey

  return query
}
