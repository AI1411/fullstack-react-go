/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Ëæ≤Ê•≠ÁÅΩÂÆ≥ÊîØÊè¥„Ç∑„Çπ„ÉÜ„É† API
 * Ëæ≤Ê•≠ÁÅΩÂÆ≥„ÅÆÂ†±Âëä„Å®ÊîØÊè¥Áî≥Ë´ã„ÇíÁÆ°ÁêÜ„Åô„Çã„Åü„ÇÅ„ÅÆAPI
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  CreateDamageLevel400,
  CreateDisaster400,
  CreateSupportApplication400,
  DeleteDamageLevel400,
  DeleteDamageLevel404,
  DeleteDisaster404,
  GetDamageLevel404,
  GetDisaster404,
  GetPrefecture404,
  GetSupportApplication404,
  HandlerCreateDamageLevelRequest,
  HandlerCreateDisasterRequest,
  HandlerCreateSupportApplicationRequest,
  HandlerDamageLevelResponse,
  HandlerListDisastersResponse,
  HandlerListSupportApplicationsResponse,
  HandlerListTimelinesResponse,
  HandlerPrefectureResponse,
  HandlerSupportApplicationResponse,
  HandlerUpdateDamageLevelRequest,
  HandlerUpdateDisasterRequest,
  ListDisastersParams,
  UpdateDamageLevel400,
  UpdateDamageLevel404,
  UpdateDisaster400,
  UpdateDisaster404
} from './model';





/**
 * @summary Ë¢´ÂÆ≥Á®ãÂ∫¶‰∏ÄË¶ßÂèñÂæó
 */
export const listDamageLevels = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<HandlerDamageLevelResponse[]>> => {
    
    
    return axios.get(
      `/damage-levels`,options
    );
  }


export const getListDamageLevelsQueryKey = () => {
    return [`/damage-levels`] as const;
    }

    
export const getListDamageLevelsQueryOptions = <TData = Awaited<ReturnType<typeof listDamageLevels>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listDamageLevels>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListDamageLevelsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listDamageLevels>>> = ({ signal }) => listDamageLevels({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listDamageLevels>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type ListDamageLevelsQueryResult = NonNullable<Awaited<ReturnType<typeof listDamageLevels>>>
export type ListDamageLevelsQueryError = AxiosError<unknown>


export function useListDamageLevels<TData = Awaited<ReturnType<typeof listDamageLevels>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listDamageLevels>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listDamageLevels>>,
          TError,
          Awaited<ReturnType<typeof listDamageLevels>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListDamageLevels<TData = Awaited<ReturnType<typeof listDamageLevels>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listDamageLevels>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listDamageLevels>>,
          TError,
          Awaited<ReturnType<typeof listDamageLevels>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListDamageLevels<TData = Awaited<ReturnType<typeof listDamageLevels>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listDamageLevels>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ë¢´ÂÆ≥Á®ãÂ∫¶‰∏ÄË¶ßÂèñÂæó
 */

export function useListDamageLevels<TData = Awaited<ReturnType<typeof listDamageLevels>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listDamageLevels>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getListDamageLevelsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Ë¢´ÂÆ≥Á®ãÂ∫¶‰ΩúÊàê
 */
export const createDamageLevel = (
    handlerCreateDamageLevelRequest: HandlerCreateDamageLevelRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<HandlerDamageLevelResponse>> => {
    
    
    return axios.post(
      `/damage-levels`,
      handlerCreateDamageLevelRequest,options
    );
  }



export const getCreateDamageLevelMutationOptions = <TError = AxiosError<CreateDamageLevel400>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createDamageLevel>>, TError,{data: HandlerCreateDamageLevelRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createDamageLevel>>, TError,{data: HandlerCreateDamageLevelRequest}, TContext> => {

const mutationKey = ['createDamageLevel'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createDamageLevel>>, {data: HandlerCreateDamageLevelRequest}> = (props) => {
          const {data} = props ?? {};

          return  createDamageLevel(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateDamageLevelMutationResult = NonNullable<Awaited<ReturnType<typeof createDamageLevel>>>
    export type CreateDamageLevelMutationBody = HandlerCreateDamageLevelRequest
    export type CreateDamageLevelMutationError = AxiosError<CreateDamageLevel400>

    /**
 * @summary Ë¢´ÂÆ≥Á®ãÂ∫¶‰ΩúÊàê
 */
export const useCreateDamageLevel = <TError = AxiosError<CreateDamageLevel400>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createDamageLevel>>, TError,{data: HandlerCreateDamageLevelRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createDamageLevel>>,
        TError,
        {data: HandlerCreateDamageLevelRequest},
        TContext
      > => {

      const mutationOptions = getCreateDamageLevelMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Ë¢´ÂÆ≥Á®ãÂ∫¶ÂâäÈô§
 */
export const deleteDamageLevel = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `/damage-levels/${id}`,options
    );
  }



export const getDeleteDamageLevelMutationOptions = <TError = AxiosError<DeleteDamageLevel400 | DeleteDamageLevel404>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDamageLevel>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDamageLevel>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteDamageLevel'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDamageLevel>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteDamageLevel(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDamageLevelMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDamageLevel>>>
    
    export type DeleteDamageLevelMutationError = AxiosError<DeleteDamageLevel400 | DeleteDamageLevel404>

    /**
 * @summary Ë¢´ÂÆ≥Á®ãÂ∫¶ÂâäÈô§
 */
export const useDeleteDamageLevel = <TError = AxiosError<DeleteDamageLevel400 | DeleteDamageLevel404>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDamageLevel>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteDamageLevel>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteDamageLevelMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Ë¢´ÂÆ≥Á®ãÂ∫¶Ë©≥Á¥∞ÂèñÂæó
 */
export const getDamageLevel = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<HandlerDamageLevelResponse>> => {
    
    
    return axios.get(
      `/damage-levels/${id}`,options
    );
  }


export const getGetDamageLevelQueryKey = (id: number,) => {
    return [`/damage-levels/${id}`] as const;
    }

    
export const getGetDamageLevelQueryOptions = <TData = Awaited<ReturnType<typeof getDamageLevel>>, TError = AxiosError<GetDamageLevel404>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDamageLevel>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDamageLevelQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDamageLevel>>> = ({ signal }) => getDamageLevel(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDamageLevel>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDamageLevelQueryResult = NonNullable<Awaited<ReturnType<typeof getDamageLevel>>>
export type GetDamageLevelQueryError = AxiosError<GetDamageLevel404>


export function useGetDamageLevel<TData = Awaited<ReturnType<typeof getDamageLevel>>, TError = AxiosError<GetDamageLevel404>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDamageLevel>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDamageLevel>>,
          TError,
          Awaited<ReturnType<typeof getDamageLevel>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDamageLevel<TData = Awaited<ReturnType<typeof getDamageLevel>>, TError = AxiosError<GetDamageLevel404>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDamageLevel>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDamageLevel>>,
          TError,
          Awaited<ReturnType<typeof getDamageLevel>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDamageLevel<TData = Awaited<ReturnType<typeof getDamageLevel>>, TError = AxiosError<GetDamageLevel404>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDamageLevel>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ë¢´ÂÆ≥Á®ãÂ∫¶Ë©≥Á¥∞ÂèñÂæó
 */

export function useGetDamageLevel<TData = Awaited<ReturnType<typeof getDamageLevel>>, TError = AxiosError<GetDamageLevel404>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDamageLevel>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDamageLevelQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Ë¢´ÂÆ≥Á®ãÂ∫¶Êõ¥Êñ∞
 */
export const updateDamageLevel = (
    id: number,
    handlerUpdateDamageLevelRequest: HandlerUpdateDamageLevelRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<HandlerDamageLevelResponse>> => {
    
    
    return axios.put(
      `/damage-levels/${id}`,
      handlerUpdateDamageLevelRequest,options
    );
  }



export const getUpdateDamageLevelMutationOptions = <TError = AxiosError<UpdateDamageLevel400 | UpdateDamageLevel404>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateDamageLevel>>, TError,{id: number;data: HandlerUpdateDamageLevelRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateDamageLevel>>, TError,{id: number;data: HandlerUpdateDamageLevelRequest}, TContext> => {

const mutationKey = ['updateDamageLevel'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateDamageLevel>>, {id: number;data: HandlerUpdateDamageLevelRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  updateDamageLevel(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateDamageLevelMutationResult = NonNullable<Awaited<ReturnType<typeof updateDamageLevel>>>
    export type UpdateDamageLevelMutationBody = HandlerUpdateDamageLevelRequest
    export type UpdateDamageLevelMutationError = AxiosError<UpdateDamageLevel400 | UpdateDamageLevel404>

    /**
 * @summary Ë¢´ÂÆ≥Á®ãÂ∫¶Êõ¥Êñ∞
 */
export const useUpdateDamageLevel = <TError = AxiosError<UpdateDamageLevel400 | UpdateDamageLevel404>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateDamageLevel>>, TError,{id: number;data: HandlerUpdateDamageLevelRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateDamageLevel>>,
        TError,
        {id: number;data: HandlerUpdateDamageLevelRequest},
        TContext
      > => {

      const mutationOptions = getUpdateDamageLevelMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary ÁÅΩÂÆ≥„Éû„Çπ„Çø‰∏ÄË¶ßÂèñÂæó
 */
export const listDisasters = (
    params?: ListDisastersParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<HandlerListDisastersResponse[]>> => {
    
    
    return axios.get(
      `/disasters`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getListDisastersQueryKey = (params?: ListDisastersParams,) => {
    return [`/disasters`, ...(params ? [params]: [])] as const;
    }

    
export const getListDisastersQueryOptions = <TData = Awaited<ReturnType<typeof listDisasters>>, TError = AxiosError<unknown>>(params?: ListDisastersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listDisasters>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListDisastersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listDisasters>>> = ({ signal }) => listDisasters(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listDisasters>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type ListDisastersQueryResult = NonNullable<Awaited<ReturnType<typeof listDisasters>>>
export type ListDisastersQueryError = AxiosError<unknown>


export function useListDisasters<TData = Awaited<ReturnType<typeof listDisasters>>, TError = AxiosError<unknown>>(
 params: undefined |  ListDisastersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listDisasters>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listDisasters>>,
          TError,
          Awaited<ReturnType<typeof listDisasters>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListDisasters<TData = Awaited<ReturnType<typeof listDisasters>>, TError = AxiosError<unknown>>(
 params?: ListDisastersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listDisasters>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listDisasters>>,
          TError,
          Awaited<ReturnType<typeof listDisasters>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListDisasters<TData = Awaited<ReturnType<typeof listDisasters>>, TError = AxiosError<unknown>>(
 params?: ListDisastersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listDisasters>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÁÅΩÂÆ≥„Éû„Çπ„Çø‰∏ÄË¶ßÂèñÂæó
 */

export function useListDisasters<TData = Awaited<ReturnType<typeof listDisasters>>, TError = AxiosError<unknown>>(
 params?: ListDisastersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listDisasters>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getListDisastersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary ÁÅΩÂÆ≥‰ΩúÊàê
 */
export const createDisaster = (
    handlerCreateDisasterRequest: HandlerCreateDisasterRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<HandlerListDisastersResponse>> => {
    
    
    return axios.post(
      `/disasters`,
      handlerCreateDisasterRequest,options
    );
  }



export const getCreateDisasterMutationOptions = <TError = AxiosError<CreateDisaster400>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createDisaster>>, TError,{data: HandlerCreateDisasterRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createDisaster>>, TError,{data: HandlerCreateDisasterRequest}, TContext> => {

const mutationKey = ['createDisaster'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createDisaster>>, {data: HandlerCreateDisasterRequest}> = (props) => {
          const {data} = props ?? {};

          return  createDisaster(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateDisasterMutationResult = NonNullable<Awaited<ReturnType<typeof createDisaster>>>
    export type CreateDisasterMutationBody = HandlerCreateDisasterRequest
    export type CreateDisasterMutationError = AxiosError<CreateDisaster400>

    /**
 * @summary ÁÅΩÂÆ≥‰ΩúÊàê
 */
export const useCreateDisaster = <TError = AxiosError<CreateDisaster400>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createDisaster>>, TError,{data: HandlerCreateDisasterRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createDisaster>>,
        TError,
        {data: HandlerCreateDisasterRequest},
        TContext
      > => {

      const mutationOptions = getCreateDisasterMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary ÁÅΩÂÆ≥ÂâäÈô§
 */
export const deleteDisaster = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `/disasters/${id}`,options
    );
  }



export const getDeleteDisasterMutationOptions = <TError = AxiosError<DeleteDisaster404>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDisaster>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDisaster>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteDisaster'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDisaster>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteDisaster(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDisasterMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDisaster>>>
    
    export type DeleteDisasterMutationError = AxiosError<DeleteDisaster404>

    /**
 * @summary ÁÅΩÂÆ≥ÂâäÈô§
 */
export const useDeleteDisaster = <TError = AxiosError<DeleteDisaster404>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDisaster>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteDisaster>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteDisasterMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary ÁÅΩÂÆ≥Ë©≥Á¥∞ÂèñÂæó
 */
export const getDisaster = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<HandlerListDisastersResponse>> => {
    
    
    return axios.get(
      `/disasters/${id}`,options
    );
  }


export const getGetDisasterQueryKey = (id: string,) => {
    return [`/disasters/${id}`] as const;
    }

    
export const getGetDisasterQueryOptions = <TData = Awaited<ReturnType<typeof getDisaster>>, TError = AxiosError<GetDisaster404>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDisaster>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDisasterQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDisaster>>> = ({ signal }) => getDisaster(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDisaster>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDisasterQueryResult = NonNullable<Awaited<ReturnType<typeof getDisaster>>>
export type GetDisasterQueryError = AxiosError<GetDisaster404>


export function useGetDisaster<TData = Awaited<ReturnType<typeof getDisaster>>, TError = AxiosError<GetDisaster404>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDisaster>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDisaster>>,
          TError,
          Awaited<ReturnType<typeof getDisaster>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDisaster<TData = Awaited<ReturnType<typeof getDisaster>>, TError = AxiosError<GetDisaster404>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDisaster>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDisaster>>,
          TError,
          Awaited<ReturnType<typeof getDisaster>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDisaster<TData = Awaited<ReturnType<typeof getDisaster>>, TError = AxiosError<GetDisaster404>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDisaster>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÁÅΩÂÆ≥Ë©≥Á¥∞ÂèñÂæó
 */

export function useGetDisaster<TData = Awaited<ReturnType<typeof getDisaster>>, TError = AxiosError<GetDisaster404>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDisaster>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDisasterQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary ÁÅΩÂÆ≥Êõ¥Êñ∞
 */
export const updateDisaster = (
    id: string,
    handlerUpdateDisasterRequest: HandlerUpdateDisasterRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<HandlerListDisastersResponse>> => {
    
    
    return axios.put(
      `/disasters/${id}`,
      handlerUpdateDisasterRequest,options
    );
  }



export const getUpdateDisasterMutationOptions = <TError = AxiosError<UpdateDisaster400 | UpdateDisaster404>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateDisaster>>, TError,{id: string;data: HandlerUpdateDisasterRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateDisaster>>, TError,{id: string;data: HandlerUpdateDisasterRequest}, TContext> => {

const mutationKey = ['updateDisaster'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateDisaster>>, {id: string;data: HandlerUpdateDisasterRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  updateDisaster(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateDisasterMutationResult = NonNullable<Awaited<ReturnType<typeof updateDisaster>>>
    export type UpdateDisasterMutationBody = HandlerUpdateDisasterRequest
    export type UpdateDisasterMutationError = AxiosError<UpdateDisaster400 | UpdateDisaster404>

    /**
 * @summary ÁÅΩÂÆ≥Êõ¥Êñ∞
 */
export const useUpdateDisaster = <TError = AxiosError<UpdateDisaster400 | UpdateDisaster404>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateDisaster>>, TError,{id: string;data: HandlerUpdateDisasterRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateDisaster>>,
        TError,
        {id: string;data: HandlerUpdateDisasterRequest},
        TContext
      > => {

      const mutationOptions = getUpdateDisasterMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Get timelines by disaster ID
 * @summary Get timelines by disaster ID
 */
export const getDisastersIdTimelines = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<HandlerListTimelinesResponse>> => {
    
    
    return axios.get(
      `/disasters/${id}/timelines`,options
    );
  }


export const getGetDisastersIdTimelinesQueryKey = (id: string,) => {
    return [`/disasters/${id}/timelines`] as const;
    }

    
export const getGetDisastersIdTimelinesQueryOptions = <TData = Awaited<ReturnType<typeof getDisastersIdTimelines>>, TError = AxiosError<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDisastersIdTimelines>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDisastersIdTimelinesQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDisastersIdTimelines>>> = ({ signal }) => getDisastersIdTimelines(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDisastersIdTimelines>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDisastersIdTimelinesQueryResult = NonNullable<Awaited<ReturnType<typeof getDisastersIdTimelines>>>
export type GetDisastersIdTimelinesQueryError = AxiosError<unknown>


export function useGetDisastersIdTimelines<TData = Awaited<ReturnType<typeof getDisastersIdTimelines>>, TError = AxiosError<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDisastersIdTimelines>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDisastersIdTimelines>>,
          TError,
          Awaited<ReturnType<typeof getDisastersIdTimelines>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDisastersIdTimelines<TData = Awaited<ReturnType<typeof getDisastersIdTimelines>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDisastersIdTimelines>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDisastersIdTimelines>>,
          TError,
          Awaited<ReturnType<typeof getDisastersIdTimelines>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDisastersIdTimelines<TData = Awaited<ReturnType<typeof getDisastersIdTimelines>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDisastersIdTimelines>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get timelines by disaster ID
 */

export function useGetDisastersIdTimelines<TData = Awaited<ReturnType<typeof getDisastersIdTimelines>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDisastersIdTimelines>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDisastersIdTimelinesQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary ÈÉΩÈÅìÂ∫úÁúå‰∏ÄË¶ßÂèñÂæó
 */
export const listPrefectures = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<HandlerPrefectureResponse[]>> => {
    
    
    return axios.get(
      `/prefectures`,options
    );
  }


export const getListPrefecturesQueryKey = () => {
    return [`/prefectures`] as const;
    }

    
export const getListPrefecturesQueryOptions = <TData = Awaited<ReturnType<typeof listPrefectures>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listPrefectures>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListPrefecturesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listPrefectures>>> = ({ signal }) => listPrefectures({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listPrefectures>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type ListPrefecturesQueryResult = NonNullable<Awaited<ReturnType<typeof listPrefectures>>>
export type ListPrefecturesQueryError = AxiosError<unknown>


export function useListPrefectures<TData = Awaited<ReturnType<typeof listPrefectures>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listPrefectures>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listPrefectures>>,
          TError,
          Awaited<ReturnType<typeof listPrefectures>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListPrefectures<TData = Awaited<ReturnType<typeof listPrefectures>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listPrefectures>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listPrefectures>>,
          TError,
          Awaited<ReturnType<typeof listPrefectures>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListPrefectures<TData = Awaited<ReturnType<typeof listPrefectures>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listPrefectures>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÈÉΩÈÅìÂ∫úÁúå‰∏ÄË¶ßÂèñÂæó
 */

export function useListPrefectures<TData = Awaited<ReturnType<typeof listPrefectures>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listPrefectures>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getListPrefecturesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary ÈÉΩÈÅìÂ∫úÁúåË©≥Á¥∞ÂèñÂæó
 */
export const getPrefecture = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<HandlerPrefectureResponse>> => {
    
    
    return axios.get(
      `/prefectures/${id}`,options
    );
  }


export const getGetPrefectureQueryKey = (id: number,) => {
    return [`/prefectures/${id}`] as const;
    }

    
export const getGetPrefectureQueryOptions = <TData = Awaited<ReturnType<typeof getPrefecture>>, TError = AxiosError<GetPrefecture404>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPrefecture>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPrefectureQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPrefecture>>> = ({ signal }) => getPrefecture(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPrefecture>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPrefectureQueryResult = NonNullable<Awaited<ReturnType<typeof getPrefecture>>>
export type GetPrefectureQueryError = AxiosError<GetPrefecture404>


export function useGetPrefecture<TData = Awaited<ReturnType<typeof getPrefecture>>, TError = AxiosError<GetPrefecture404>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPrefecture>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPrefecture>>,
          TError,
          Awaited<ReturnType<typeof getPrefecture>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPrefecture<TData = Awaited<ReturnType<typeof getPrefecture>>, TError = AxiosError<GetPrefecture404>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPrefecture>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPrefecture>>,
          TError,
          Awaited<ReturnType<typeof getPrefecture>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPrefecture<TData = Awaited<ReturnType<typeof getPrefecture>>, TError = AxiosError<GetPrefecture404>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPrefecture>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÈÉΩÈÅìÂ∫úÁúåË©≥Á¥∞ÂèñÂæó
 */

export function useGetPrefecture<TData = Awaited<ReturnType<typeof getPrefecture>>, TError = AxiosError<GetPrefecture404>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPrefecture>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPrefectureQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary ÊîØÊè¥Áî≥Ë´ã‰∏ÄË¶ßÂèñÂæó
 */
export const listSupportApplications = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<HandlerListSupportApplicationsResponse[]>> => {
    
    
    return axios.get(
      `/support-applications`,options
    );
  }


export const getListSupportApplicationsQueryKey = () => {
    return [`/support-applications`] as const;
    }

    
export const getListSupportApplicationsQueryOptions = <TData = Awaited<ReturnType<typeof listSupportApplications>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listSupportApplications>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListSupportApplicationsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listSupportApplications>>> = ({ signal }) => listSupportApplications({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listSupportApplications>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type ListSupportApplicationsQueryResult = NonNullable<Awaited<ReturnType<typeof listSupportApplications>>>
export type ListSupportApplicationsQueryError = AxiosError<unknown>


export function useListSupportApplications<TData = Awaited<ReturnType<typeof listSupportApplications>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listSupportApplications>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listSupportApplications>>,
          TError,
          Awaited<ReturnType<typeof listSupportApplications>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListSupportApplications<TData = Awaited<ReturnType<typeof listSupportApplications>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listSupportApplications>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listSupportApplications>>,
          TError,
          Awaited<ReturnType<typeof listSupportApplications>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListSupportApplications<TData = Awaited<ReturnType<typeof listSupportApplications>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listSupportApplications>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÊîØÊè¥Áî≥Ë´ã‰∏ÄË¶ßÂèñÂæó
 */

export function useListSupportApplications<TData = Awaited<ReturnType<typeof listSupportApplications>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listSupportApplications>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getListSupportApplicationsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary ÊîØÊè¥Áî≥Ë´ã‰ΩúÊàê
 */
export const createSupportApplication = (
    handlerCreateSupportApplicationRequest: HandlerCreateSupportApplicationRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<HandlerSupportApplicationResponse>> => {
    
    
    return axios.post(
      `/support-applications`,
      handlerCreateSupportApplicationRequest,options
    );
  }



export const getCreateSupportApplicationMutationOptions = <TError = AxiosError<CreateSupportApplication400>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createSupportApplication>>, TError,{data: HandlerCreateSupportApplicationRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createSupportApplication>>, TError,{data: HandlerCreateSupportApplicationRequest}, TContext> => {

const mutationKey = ['createSupportApplication'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createSupportApplication>>, {data: HandlerCreateSupportApplicationRequest}> = (props) => {
          const {data} = props ?? {};

          return  createSupportApplication(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateSupportApplicationMutationResult = NonNullable<Awaited<ReturnType<typeof createSupportApplication>>>
    export type CreateSupportApplicationMutationBody = HandlerCreateSupportApplicationRequest
    export type CreateSupportApplicationMutationError = AxiosError<CreateSupportApplication400>

    /**
 * @summary ÊîØÊè¥Áî≥Ë´ã‰ΩúÊàê
 */
export const useCreateSupportApplication = <TError = AxiosError<CreateSupportApplication400>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createSupportApplication>>, TError,{data: HandlerCreateSupportApplicationRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createSupportApplication>>,
        TError,
        {data: HandlerCreateSupportApplicationRequest},
        TContext
      > => {

      const mutationOptions = getCreateSupportApplicationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary ÊîØÊè¥Áî≥Ë´ãË©≥Á¥∞ÂèñÂæó
 */
export const getSupportApplication = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<HandlerSupportApplicationResponse>> => {
    
    
    return axios.get(
      `/support-applications/${id}`,options
    );
  }


export const getGetSupportApplicationQueryKey = (id: string,) => {
    return [`/support-applications/${id}`] as const;
    }

    
export const getGetSupportApplicationQueryOptions = <TData = Awaited<ReturnType<typeof getSupportApplication>>, TError = AxiosError<GetSupportApplication404>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportApplication>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSupportApplicationQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSupportApplication>>> = ({ signal }) => getSupportApplication(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSupportApplication>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSupportApplicationQueryResult = NonNullable<Awaited<ReturnType<typeof getSupportApplication>>>
export type GetSupportApplicationQueryError = AxiosError<GetSupportApplication404>


export function useGetSupportApplication<TData = Awaited<ReturnType<typeof getSupportApplication>>, TError = AxiosError<GetSupportApplication404>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportApplication>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSupportApplication>>,
          TError,
          Awaited<ReturnType<typeof getSupportApplication>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSupportApplication<TData = Awaited<ReturnType<typeof getSupportApplication>>, TError = AxiosError<GetSupportApplication404>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportApplication>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSupportApplication>>,
          TError,
          Awaited<ReturnType<typeof getSupportApplication>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSupportApplication<TData = Awaited<ReturnType<typeof getSupportApplication>>, TError = AxiosError<GetSupportApplication404>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportApplication>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÊîØÊè¥Áî≥Ë´ãË©≥Á¥∞ÂèñÂæó
 */

export function useGetSupportApplication<TData = Awaited<ReturnType<typeof getSupportApplication>>, TError = AxiosError<GetSupportApplication404>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSupportApplication>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSupportApplicationQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




