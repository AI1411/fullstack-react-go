/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 */
import { useMutation, useQuery } from "@tanstack/react-query"
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"

import axios from "axios"
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios"

/**
 * @summary ÁÅΩÂÆ≥„Éû„Çπ„Çø‰∏ÄË¶ßÂèñÂæó
 */
export const listDisasters = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(`/disasters`, options)
}

export const getListDisastersQueryKey = () => {
  return [`/disasters`] as const
}

export const getListDisastersQueryOptions = <
  TData = Awaited<ReturnType<typeof listDisasters>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listDisasters>>, TError, TData>
  >
  axios?: AxiosRequestConfig
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getListDisastersQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listDisasters>>> = ({
    signal,
  }) => listDisasters({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listDisasters>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type ListDisastersQueryResult = NonNullable<
  Awaited<ReturnType<typeof listDisasters>>
>
export type ListDisastersQueryError = AxiosError<unknown>

export function useListDisasters<
  TData = Awaited<ReturnType<typeof listDisasters>>,
  TError = AxiosError<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listDisasters>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listDisasters>>,
          TError,
          Awaited<ReturnType<typeof listDisasters>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListDisasters<
  TData = Awaited<ReturnType<typeof listDisasters>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listDisasters>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listDisasters>>,
          TError,
          Awaited<ReturnType<typeof listDisasters>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListDisasters<
  TData = Awaited<ReturnType<typeof listDisasters>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listDisasters>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÁÅΩÂÆ≥„Éû„Çπ„Çø‰∏ÄË¶ßÂèñÂæó
 */

export function useListDisasters<
  TData = Awaited<ReturnType<typeof listDisasters>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listDisasters>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getListDisastersQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary ÁÅΩÂÆ≥‰ΩúÊàê
 */
export const createDisaster = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(`/disasters`, undefined, options)
}

export const getCreateDisasterMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createDisaster>>,
    TError,
    void,
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof createDisaster>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["createDisaster"]
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createDisaster>>,
    void
  > = () => {
    return createDisaster(axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateDisasterMutationResult = NonNullable<
  Awaited<ReturnType<typeof createDisaster>>
>

export type CreateDisasterMutationError = AxiosError<void>

/**
 * @summary ÁÅΩÂÆ≥‰ΩúÊàê
 */
export const useCreateDisaster = <
  TError = AxiosError<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createDisaster>>,
      TError,
      void,
      TContext
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof createDisaster>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getCreateDisasterMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * @summary ÁÅΩÂÆ≥ÂâäÈô§
 */
export const deleteDisaster = (
  id: unknown,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.delete(`/disasters/${id}`, options)
}

export const getDeleteDisasterMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteDisaster>>,
    TError,
    { id: unknown },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteDisaster>>,
  TError,
  { id: unknown },
  TContext
> => {
  const mutationKey = ["deleteDisaster"]
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteDisaster>>,
    { id: unknown }
  > = (props) => {
    const { id } = props ?? {}

    return deleteDisaster(id, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteDisasterMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteDisaster>>
>

export type DeleteDisasterMutationError = AxiosError<void>

/**
 * @summary ÁÅΩÂÆ≥ÂâäÈô§
 */
export const useDeleteDisaster = <
  TError = AxiosError<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteDisaster>>,
      TError,
      { id: unknown },
      TContext
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof deleteDisaster>>,
  TError,
  { id: unknown },
  TContext
> => {
  const mutationOptions = getDeleteDisasterMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * @summary ÁÅΩÂÆ≥Ë©≥Á¥∞ÂèñÂæó
 */
export const getDisaster = (
  id: unknown,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(`/disasters/${id}`, options)
}

export const getGetDisasterQueryKey = (id: unknown) => {
  return [`/disasters/${id}`] as const
}

export const getGetDisasterQueryOptions = <
  TData = Awaited<ReturnType<typeof getDisaster>>,
  TError = AxiosError<void>,
>(
  id: unknown,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDisaster>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetDisasterQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDisaster>>> = ({
    signal,
  }) => getDisaster(id, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDisaster>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDisasterQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDisaster>>
>
export type GetDisasterQueryError = AxiosError<void>

export function useGetDisaster<
  TData = Awaited<ReturnType<typeof getDisaster>>,
  TError = AxiosError<void>,
>(
  id: unknown,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDisaster>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDisaster>>,
          TError,
          Awaited<ReturnType<typeof getDisaster>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDisaster<
  TData = Awaited<ReturnType<typeof getDisaster>>,
  TError = AxiosError<void>,
>(
  id: unknown,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDisaster>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDisaster>>,
          TError,
          Awaited<ReturnType<typeof getDisaster>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDisaster<
  TData = Awaited<ReturnType<typeof getDisaster>>,
  TError = AxiosError<void>,
>(
  id: unknown,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDisaster>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÁÅΩÂÆ≥Ë©≥Á¥∞ÂèñÂæó
 */

export function useGetDisaster<
  TData = Awaited<ReturnType<typeof getDisaster>>,
  TError = AxiosError<void>,
>(
  id: unknown,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDisaster>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetDisasterQueryOptions(id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary ÁÅΩÂÆ≥Êõ¥Êñ∞
 */
export const updateDisaster = (
  id: unknown,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.put(`/disasters/${id}`, undefined, options)
}

export const getUpdateDisasterMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateDisaster>>,
    TError,
    { id: unknown },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateDisaster>>,
  TError,
  { id: unknown },
  TContext
> => {
  const mutationKey = ["updateDisaster"]
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateDisaster>>,
    { id: unknown }
  > = (props) => {
    const { id } = props ?? {}

    return updateDisaster(id, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateDisasterMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateDisaster>>
>

export type UpdateDisasterMutationError = AxiosError<void>

/**
 * @summary ÁÅΩÂÆ≥Êõ¥Êñ∞
 */
export const useUpdateDisaster = <
  TError = AxiosError<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateDisaster>>,
      TError,
      { id: unknown },
      TContext
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof updateDisaster>>,
  TError,
  { id: unknown },
  TContext
> => {
  const mutationOptions = getUpdateDisasterMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * Get timelines by disaster ID
 * @summary Get timelines by disaster ID
 */
export const getDisastersIdTimelines = (
  id: unknown,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(`/disasters/${id}/timelines`, options)
}

export const getGetDisastersIdTimelinesQueryKey = (id: unknown) => {
  return [`/disasters/${id}/timelines`] as const
}

export const getGetDisastersIdTimelinesQueryOptions = <
  TData = Awaited<ReturnType<typeof getDisastersIdTimelines>>,
  TError = AxiosError<unknown>,
>(
  id: unknown,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDisastersIdTimelines>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetDisastersIdTimelinesQueryKey(id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDisastersIdTimelines>>
  > = ({ signal }) => getDisastersIdTimelines(id, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDisastersIdTimelines>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDisastersIdTimelinesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDisastersIdTimelines>>
>
export type GetDisastersIdTimelinesQueryError = AxiosError<unknown>

export function useGetDisastersIdTimelines<
  TData = Awaited<ReturnType<typeof getDisastersIdTimelines>>,
  TError = AxiosError<unknown>,
>(
  id: unknown,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDisastersIdTimelines>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDisastersIdTimelines>>,
          TError,
          Awaited<ReturnType<typeof getDisastersIdTimelines>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDisastersIdTimelines<
  TData = Awaited<ReturnType<typeof getDisastersIdTimelines>>,
  TError = AxiosError<unknown>,
>(
  id: unknown,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDisastersIdTimelines>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDisastersIdTimelines>>,
          TError,
          Awaited<ReturnType<typeof getDisastersIdTimelines>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDisastersIdTimelines<
  TData = Awaited<ReturnType<typeof getDisastersIdTimelines>>,
  TError = AxiosError<unknown>,
>(
  id: unknown,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDisastersIdTimelines>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get timelines by disaster ID
 */

export function useGetDisastersIdTimelines<
  TData = Awaited<ReturnType<typeof getDisastersIdTimelines>>,
  TError = AxiosError<unknown>,
>(
  id: unknown,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDisastersIdTimelines>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetDisastersIdTimelinesQueryOptions(id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary ÈÉΩÈÅìÂ∫úÁúå‰∏ÄË¶ßÂèñÂæó
 */
export const listPrefectures = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(`/prefectures`, options)
}

export const getListPrefecturesQueryKey = () => {
  return [`/prefectures`] as const
}

export const getListPrefecturesQueryOptions = <
  TData = Awaited<ReturnType<typeof listPrefectures>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listPrefectures>>, TError, TData>
  >
  axios?: AxiosRequestConfig
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getListPrefecturesQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listPrefectures>>> = ({
    signal,
  }) => listPrefectures({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listPrefectures>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type ListPrefecturesQueryResult = NonNullable<
  Awaited<ReturnType<typeof listPrefectures>>
>
export type ListPrefecturesQueryError = AxiosError<unknown>

export function useListPrefectures<
  TData = Awaited<ReturnType<typeof listPrefectures>>,
  TError = AxiosError<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listPrefectures>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listPrefectures>>,
          TError,
          Awaited<ReturnType<typeof listPrefectures>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListPrefectures<
  TData = Awaited<ReturnType<typeof listPrefectures>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listPrefectures>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listPrefectures>>,
          TError,
          Awaited<ReturnType<typeof listPrefectures>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListPrefectures<
  TData = Awaited<ReturnType<typeof listPrefectures>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listPrefectures>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÈÉΩÈÅìÂ∫úÁúå‰∏ÄË¶ßÂèñÂæó
 */

export function useListPrefectures<
  TData = Awaited<ReturnType<typeof listPrefectures>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listPrefectures>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getListPrefecturesQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary ÈÉΩÈÅìÂ∫úÁúåË©≥Á¥∞ÂèñÂæó
 */
export const getPrefecture = (
  id: unknown,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(`/prefectures/${id}`, options)
}

export const getGetPrefectureQueryKey = (id: unknown) => {
  return [`/prefectures/${id}`] as const
}

export const getGetPrefectureQueryOptions = <
  TData = Awaited<ReturnType<typeof getPrefecture>>,
  TError = AxiosError<void>,
>(
  id: unknown,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPrefecture>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetPrefectureQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPrefecture>>> = ({
    signal,
  }) => getPrefecture(id, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getPrefecture>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPrefectureQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPrefecture>>
>
export type GetPrefectureQueryError = AxiosError<void>

export function useGetPrefecture<
  TData = Awaited<ReturnType<typeof getPrefecture>>,
  TError = AxiosError<void>,
>(
  id: unknown,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPrefecture>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPrefecture>>,
          TError,
          Awaited<ReturnType<typeof getPrefecture>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPrefecture<
  TData = Awaited<ReturnType<typeof getPrefecture>>,
  TError = AxiosError<void>,
>(
  id: unknown,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPrefecture>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPrefecture>>,
          TError,
          Awaited<ReturnType<typeof getPrefecture>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPrefecture<
  TData = Awaited<ReturnType<typeof getPrefecture>>,
  TError = AxiosError<void>,
>(
  id: unknown,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPrefecture>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÈÉΩÈÅìÂ∫úÁúåË©≥Á¥∞ÂèñÂæó
 */

export function useGetPrefecture<
  TData = Awaited<ReturnType<typeof getPrefecture>>,
  TError = AxiosError<void>,
>(
  id: unknown,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPrefecture>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetPrefectureQueryOptions(id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary ÊîØÊè¥Áî≥Ë´ã‰∏ÄË¶ßÂèñÂæó
 */
export const listSupportApplications = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(`/support-applications`, options)
}

export const getListSupportApplicationsQueryKey = () => {
  return [`/support-applications`] as const
}

export const getListSupportApplicationsQueryOptions = <
  TData = Awaited<ReturnType<typeof listSupportApplications>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof listSupportApplications>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getListSupportApplicationsQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listSupportApplications>>
  > = ({ signal }) => listSupportApplications({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listSupportApplications>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type ListSupportApplicationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof listSupportApplications>>
>
export type ListSupportApplicationsQueryError = AxiosError<unknown>

export function useListSupportApplications<
  TData = Awaited<ReturnType<typeof listSupportApplications>>,
  TError = AxiosError<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listSupportApplications>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listSupportApplications>>,
          TError,
          Awaited<ReturnType<typeof listSupportApplications>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListSupportApplications<
  TData = Awaited<ReturnType<typeof listSupportApplications>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listSupportApplications>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listSupportApplications>>,
          TError,
          Awaited<ReturnType<typeof listSupportApplications>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListSupportApplications<
  TData = Awaited<ReturnType<typeof listSupportApplications>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listSupportApplications>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÊîØÊè¥Áî≥Ë´ã‰∏ÄË¶ßÂèñÂæó
 */

export function useListSupportApplications<
  TData = Awaited<ReturnType<typeof listSupportApplications>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listSupportApplications>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getListSupportApplicationsQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary ÊîØÊè¥Áî≥Ë´ã‰ΩúÊàê
 */
export const createSupportApplication = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(`/support-applications`, undefined, options)
}

export const getCreateSupportApplicationMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createSupportApplication>>,
    TError,
    void,
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof createSupportApplication>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["createSupportApplication"]
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createSupportApplication>>,
    void
  > = () => {
    return createSupportApplication(axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateSupportApplicationMutationResult = NonNullable<
  Awaited<ReturnType<typeof createSupportApplication>>
>

export type CreateSupportApplicationMutationError = AxiosError<void>

/**
 * @summary ÊîØÊè¥Áî≥Ë´ã‰ΩúÊàê
 */
export const useCreateSupportApplication = <
  TError = AxiosError<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createSupportApplication>>,
      TError,
      void,
      TContext
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof createSupportApplication>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getCreateSupportApplicationMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * @summary ÊîØÊè¥Áî≥Ë´ãË©≥Á¥∞ÂèñÂæó
 */
export const getSupportApplication = (
  id: unknown,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(`/support-applications/${id}`, options)
}

export const getGetSupportApplicationQueryKey = (id: unknown) => {
  return [`/support-applications/${id}`] as const
}

export const getGetSupportApplicationQueryOptions = <
  TData = Awaited<ReturnType<typeof getSupportApplication>>,
  TError = AxiosError<void>,
>(
  id: unknown,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSupportApplication>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetSupportApplicationQueryKey(id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSupportApplication>>
  > = ({ signal }) => getSupportApplication(id, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getSupportApplication>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSupportApplicationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSupportApplication>>
>
export type GetSupportApplicationQueryError = AxiosError<void>

export function useGetSupportApplication<
  TData = Awaited<ReturnType<typeof getSupportApplication>>,
  TError = AxiosError<void>,
>(
  id: unknown,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSupportApplication>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSupportApplication>>,
          TError,
          Awaited<ReturnType<typeof getSupportApplication>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSupportApplication<
  TData = Awaited<ReturnType<typeof getSupportApplication>>,
  TError = AxiosError<void>,
>(
  id: unknown,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSupportApplication>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSupportApplication>>,
          TError,
          Awaited<ReturnType<typeof getSupportApplication>>
        >,
        "initialData"
      >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSupportApplication<
  TData = Awaited<ReturnType<typeof getSupportApplication>>,
  TError = AxiosError<void>,
>(
  id: unknown,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSupportApplication>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÊîØÊè¥Áî≥Ë´ãË©≥Á¥∞ÂèñÂæó
 */

export function useGetSupportApplication<
  TData = Awaited<ReturnType<typeof getSupportApplication>>,
  TError = AxiosError<void>,
>(
  id: unknown,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSupportApplication>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetSupportApplicationQueryOptions(id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> }

  query.queryKey = queryOptions.queryKey

  return query
}
