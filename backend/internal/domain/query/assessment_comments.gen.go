// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/AI1411/fullstack-react-go/internal/domain/model"
)

func newAssessmentComment(db *gorm.DB, opts ...gen.DOOption) assessmentComment {
	_assessmentComment := assessmentComment{}

	_assessmentComment.assessmentCommentDo.UseDB(db, opts...)
	_assessmentComment.assessmentCommentDo.UseModel(&model.AssessmentComment{})

	tableName := _assessmentComment.assessmentCommentDo.TableName()
	_assessmentComment.ALL = field.NewAsterisk(tableName)
	_assessmentComment.ID = field.NewInt32(tableName, "id")
	_assessmentComment.AssessmentID = field.NewInt32(tableName, "assessment_id")
	_assessmentComment.UserID = field.NewInt32(tableName, "user_id")
	_assessmentComment.CommentText = field.NewString(tableName, "comment_text")
	_assessmentComment.CommentTime = field.NewTime(tableName, "comment_time")
	_assessmentComment.ParentCommentID = field.NewInt32(tableName, "parent_comment_id")
	_assessmentComment.CreatedAt = field.NewTime(tableName, "created_at")
	_assessmentComment.UpdatedAt = field.NewTime(tableName, "updated_at")
	_assessmentComment.DeletedAt = field.NewField(tableName, "deleted_at")

	_assessmentComment.fillFieldMap()

	return _assessmentComment
}

type assessmentComment struct {
	assessmentCommentDo

	ALL             field.Asterisk
	ID              field.Int32  // コメントID - 主キー
	AssessmentID    field.Int32  // 査定ID - 関連する査定のID
	UserID          field.Int32  // ユーザーID - コメントを投稿したユーザーのID
	CommentText     field.String // コメント本文 - コメントの内容
	CommentTime     field.Time   // コメント時間 - コメントが投稿された時間
	ParentCommentID field.Int32  // 親コメントID - 返信先のコメントID（スレッド構造用）
	CreatedAt       field.Time   // 作成日時 - レコード作成日時
	UpdatedAt       field.Time   // 更新日時 - レコード最終更新日時
	DeletedAt       field.Field  // 削除日時 - 論理削除用のタイムスタンプ

	fieldMap map[string]field.Expr
}

func (a assessmentComment) Table(newTableName string) *assessmentComment {
	a.assessmentCommentDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a assessmentComment) As(alias string) *assessmentComment {
	a.assessmentCommentDo.DO = *(a.assessmentCommentDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *assessmentComment) updateTableName(table string) *assessmentComment {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt32(table, "id")
	a.AssessmentID = field.NewInt32(table, "assessment_id")
	a.UserID = field.NewInt32(table, "user_id")
	a.CommentText = field.NewString(table, "comment_text")
	a.CommentTime = field.NewTime(table, "comment_time")
	a.ParentCommentID = field.NewInt32(table, "parent_comment_id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")

	a.fillFieldMap()

	return a
}

func (a *assessmentComment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *assessmentComment) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 9)
	a.fieldMap["id"] = a.ID
	a.fieldMap["assessment_id"] = a.AssessmentID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["comment_text"] = a.CommentText
	a.fieldMap["comment_time"] = a.CommentTime
	a.fieldMap["parent_comment_id"] = a.ParentCommentID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
}

func (a assessmentComment) clone(db *gorm.DB) assessmentComment {
	a.assessmentCommentDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a assessmentComment) replaceDB(db *gorm.DB) assessmentComment {
	a.assessmentCommentDo.ReplaceDB(db)
	return a
}

type assessmentCommentDo struct{ gen.DO }

type IAssessmentCommentDo interface {
	gen.SubQuery
	Debug() IAssessmentCommentDo
	WithContext(ctx context.Context) IAssessmentCommentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAssessmentCommentDo
	WriteDB() IAssessmentCommentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAssessmentCommentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAssessmentCommentDo
	Not(conds ...gen.Condition) IAssessmentCommentDo
	Or(conds ...gen.Condition) IAssessmentCommentDo
	Select(conds ...field.Expr) IAssessmentCommentDo
	Where(conds ...gen.Condition) IAssessmentCommentDo
	Order(conds ...field.Expr) IAssessmentCommentDo
	Distinct(cols ...field.Expr) IAssessmentCommentDo
	Omit(cols ...field.Expr) IAssessmentCommentDo
	Join(table schema.Tabler, on ...field.Expr) IAssessmentCommentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAssessmentCommentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAssessmentCommentDo
	Group(cols ...field.Expr) IAssessmentCommentDo
	Having(conds ...gen.Condition) IAssessmentCommentDo
	Limit(limit int) IAssessmentCommentDo
	Offset(offset int) IAssessmentCommentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAssessmentCommentDo
	Unscoped() IAssessmentCommentDo
	Create(values ...*model.AssessmentComment) error
	CreateInBatches(values []*model.AssessmentComment, batchSize int) error
	Save(values ...*model.AssessmentComment) error
	First() (*model.AssessmentComment, error)
	Take() (*model.AssessmentComment, error)
	Last() (*model.AssessmentComment, error)
	Find() ([]*model.AssessmentComment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AssessmentComment, err error)
	FindInBatches(result *[]*model.AssessmentComment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AssessmentComment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAssessmentCommentDo
	Assign(attrs ...field.AssignExpr) IAssessmentCommentDo
	Joins(fields ...field.RelationField) IAssessmentCommentDo
	Preload(fields ...field.RelationField) IAssessmentCommentDo
	FirstOrInit() (*model.AssessmentComment, error)
	FirstOrCreate() (*model.AssessmentComment, error)
	FindByPage(offset int, limit int) (result []*model.AssessmentComment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAssessmentCommentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a assessmentCommentDo) Debug() IAssessmentCommentDo {
	return a.withDO(a.DO.Debug())
}

func (a assessmentCommentDo) WithContext(ctx context.Context) IAssessmentCommentDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a assessmentCommentDo) ReadDB() IAssessmentCommentDo {
	return a.Clauses(dbresolver.Read)
}

func (a assessmentCommentDo) WriteDB() IAssessmentCommentDo {
	return a.Clauses(dbresolver.Write)
}

func (a assessmentCommentDo) Session(config *gorm.Session) IAssessmentCommentDo {
	return a.withDO(a.DO.Session(config))
}

func (a assessmentCommentDo) Clauses(conds ...clause.Expression) IAssessmentCommentDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a assessmentCommentDo) Returning(value interface{}, columns ...string) IAssessmentCommentDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a assessmentCommentDo) Not(conds ...gen.Condition) IAssessmentCommentDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a assessmentCommentDo) Or(conds ...gen.Condition) IAssessmentCommentDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a assessmentCommentDo) Select(conds ...field.Expr) IAssessmentCommentDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a assessmentCommentDo) Where(conds ...gen.Condition) IAssessmentCommentDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a assessmentCommentDo) Order(conds ...field.Expr) IAssessmentCommentDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a assessmentCommentDo) Distinct(cols ...field.Expr) IAssessmentCommentDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a assessmentCommentDo) Omit(cols ...field.Expr) IAssessmentCommentDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a assessmentCommentDo) Join(table schema.Tabler, on ...field.Expr) IAssessmentCommentDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a assessmentCommentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAssessmentCommentDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a assessmentCommentDo) RightJoin(table schema.Tabler, on ...field.Expr) IAssessmentCommentDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a assessmentCommentDo) Group(cols ...field.Expr) IAssessmentCommentDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a assessmentCommentDo) Having(conds ...gen.Condition) IAssessmentCommentDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a assessmentCommentDo) Limit(limit int) IAssessmentCommentDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a assessmentCommentDo) Offset(offset int) IAssessmentCommentDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a assessmentCommentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAssessmentCommentDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a assessmentCommentDo) Unscoped() IAssessmentCommentDo {
	return a.withDO(a.DO.Unscoped())
}

func (a assessmentCommentDo) Create(values ...*model.AssessmentComment) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a assessmentCommentDo) CreateInBatches(values []*model.AssessmentComment, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a assessmentCommentDo) Save(values ...*model.AssessmentComment) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a assessmentCommentDo) First() (*model.AssessmentComment, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AssessmentComment), nil
	}
}

func (a assessmentCommentDo) Take() (*model.AssessmentComment, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AssessmentComment), nil
	}
}

func (a assessmentCommentDo) Last() (*model.AssessmentComment, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AssessmentComment), nil
	}
}

func (a assessmentCommentDo) Find() ([]*model.AssessmentComment, error) {
	result, err := a.DO.Find()
	return result.([]*model.AssessmentComment), err
}

func (a assessmentCommentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AssessmentComment, err error) {
	buf := make([]*model.AssessmentComment, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a assessmentCommentDo) FindInBatches(result *[]*model.AssessmentComment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a assessmentCommentDo) Attrs(attrs ...field.AssignExpr) IAssessmentCommentDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a assessmentCommentDo) Assign(attrs ...field.AssignExpr) IAssessmentCommentDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a assessmentCommentDo) Joins(fields ...field.RelationField) IAssessmentCommentDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a assessmentCommentDo) Preload(fields ...field.RelationField) IAssessmentCommentDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a assessmentCommentDo) FirstOrInit() (*model.AssessmentComment, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AssessmentComment), nil
	}
}

func (a assessmentCommentDo) FirstOrCreate() (*model.AssessmentComment, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AssessmentComment), nil
	}
}

func (a assessmentCommentDo) FindByPage(offset int, limit int) (result []*model.AssessmentComment, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a assessmentCommentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a assessmentCommentDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a assessmentCommentDo) Delete(models ...*model.AssessmentComment) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *assessmentCommentDo) withDO(do gen.Dao) *assessmentCommentDo {
	a.DO = *do.(*gen.DO)
	return a
}
