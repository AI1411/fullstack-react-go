// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/AI1411/fullstack-react-go/internal/domain/model"
)

func newDisasterType(db *gorm.DB, opts ...gen.DOOption) disasterType {
	_disasterType := disasterType{}

	_disasterType.disasterTypeDo.UseDB(db, opts...)
	_disasterType.disasterTypeDo.UseModel(&model.DisasterType{})

	tableName := _disasterType.disasterTypeDo.TableName()
	_disasterType.ALL = field.NewAsterisk(tableName)
	_disasterType.ID = field.NewInt32(tableName, "id")
	_disasterType.Name = field.NewString(tableName, "name")
	_disasterType.Description = field.NewString(tableName, "description")
	_disasterType.CreatedAt = field.NewTime(tableName, "created_at")
	_disasterType.UpdatedAt = field.NewTime(tableName, "updated_at")

	_disasterType.fillFieldMap()

	return _disasterType
}

type disasterType struct {
	disasterTypeDo

	ALL         field.Asterisk
	ID          field.Int32  // 災害種別ID - 主キー
	Name        field.String // 災害種別名 - 洪水, 地滑り, 雹害, 干ばつ, 風害, 地震, 霜害, 病害虫など
	Description field.String // 説明 - 災害種別の詳細説明
	CreatedAt   field.Time   // 作成日時 - レコード作成日時
	UpdatedAt   field.Time   // 更新日時 - レコード最終更新日時

	fieldMap map[string]field.Expr
}

func (d disasterType) Table(newTableName string) *disasterType {
	d.disasterTypeDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d disasterType) As(alias string) *disasterType {
	d.disasterTypeDo.DO = *(d.disasterTypeDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *disasterType) updateTableName(table string) *disasterType {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt32(table, "id")
	d.Name = field.NewString(table, "name")
	d.Description = field.NewString(table, "description")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")

	d.fillFieldMap()

	return d
}

func (d *disasterType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *disasterType) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 5)
	d.fieldMap["id"] = d.ID
	d.fieldMap["name"] = d.Name
	d.fieldMap["description"] = d.Description
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
}

func (d disasterType) clone(db *gorm.DB) disasterType {
	d.disasterTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d disasterType) replaceDB(db *gorm.DB) disasterType {
	d.disasterTypeDo.ReplaceDB(db)
	return d
}

type disasterTypeDo struct{ gen.DO }

type IDisasterTypeDo interface {
	gen.SubQuery
	Debug() IDisasterTypeDo
	WithContext(ctx context.Context) IDisasterTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDisasterTypeDo
	WriteDB() IDisasterTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDisasterTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDisasterTypeDo
	Not(conds ...gen.Condition) IDisasterTypeDo
	Or(conds ...gen.Condition) IDisasterTypeDo
	Select(conds ...field.Expr) IDisasterTypeDo
	Where(conds ...gen.Condition) IDisasterTypeDo
	Order(conds ...field.Expr) IDisasterTypeDo
	Distinct(cols ...field.Expr) IDisasterTypeDo
	Omit(cols ...field.Expr) IDisasterTypeDo
	Join(table schema.Tabler, on ...field.Expr) IDisasterTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDisasterTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDisasterTypeDo
	Group(cols ...field.Expr) IDisasterTypeDo
	Having(conds ...gen.Condition) IDisasterTypeDo
	Limit(limit int) IDisasterTypeDo
	Offset(offset int) IDisasterTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDisasterTypeDo
	Unscoped() IDisasterTypeDo
	Create(values ...*model.DisasterType) error
	CreateInBatches(values []*model.DisasterType, batchSize int) error
	Save(values ...*model.DisasterType) error
	First() (*model.DisasterType, error)
	Take() (*model.DisasterType, error)
	Last() (*model.DisasterType, error)
	Find() ([]*model.DisasterType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DisasterType, err error)
	FindInBatches(result *[]*model.DisasterType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DisasterType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDisasterTypeDo
	Assign(attrs ...field.AssignExpr) IDisasterTypeDo
	Joins(fields ...field.RelationField) IDisasterTypeDo
	Preload(fields ...field.RelationField) IDisasterTypeDo
	FirstOrInit() (*model.DisasterType, error)
	FirstOrCreate() (*model.DisasterType, error)
	FindByPage(offset int, limit int) (result []*model.DisasterType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDisasterTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d disasterTypeDo) Debug() IDisasterTypeDo {
	return d.withDO(d.DO.Debug())
}

func (d disasterTypeDo) WithContext(ctx context.Context) IDisasterTypeDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d disasterTypeDo) ReadDB() IDisasterTypeDo {
	return d.Clauses(dbresolver.Read)
}

func (d disasterTypeDo) WriteDB() IDisasterTypeDo {
	return d.Clauses(dbresolver.Write)
}

func (d disasterTypeDo) Session(config *gorm.Session) IDisasterTypeDo {
	return d.withDO(d.DO.Session(config))
}

func (d disasterTypeDo) Clauses(conds ...clause.Expression) IDisasterTypeDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d disasterTypeDo) Returning(value interface{}, columns ...string) IDisasterTypeDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d disasterTypeDo) Not(conds ...gen.Condition) IDisasterTypeDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d disasterTypeDo) Or(conds ...gen.Condition) IDisasterTypeDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d disasterTypeDo) Select(conds ...field.Expr) IDisasterTypeDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d disasterTypeDo) Where(conds ...gen.Condition) IDisasterTypeDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d disasterTypeDo) Order(conds ...field.Expr) IDisasterTypeDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d disasterTypeDo) Distinct(cols ...field.Expr) IDisasterTypeDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d disasterTypeDo) Omit(cols ...field.Expr) IDisasterTypeDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d disasterTypeDo) Join(table schema.Tabler, on ...field.Expr) IDisasterTypeDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d disasterTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDisasterTypeDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d disasterTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IDisasterTypeDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d disasterTypeDo) Group(cols ...field.Expr) IDisasterTypeDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d disasterTypeDo) Having(conds ...gen.Condition) IDisasterTypeDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d disasterTypeDo) Limit(limit int) IDisasterTypeDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d disasterTypeDo) Offset(offset int) IDisasterTypeDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d disasterTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDisasterTypeDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d disasterTypeDo) Unscoped() IDisasterTypeDo {
	return d.withDO(d.DO.Unscoped())
}

func (d disasterTypeDo) Create(values ...*model.DisasterType) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d disasterTypeDo) CreateInBatches(values []*model.DisasterType, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d disasterTypeDo) Save(values ...*model.DisasterType) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d disasterTypeDo) First() (*model.DisasterType, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DisasterType), nil
	}
}

func (d disasterTypeDo) Take() (*model.DisasterType, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DisasterType), nil
	}
}

func (d disasterTypeDo) Last() (*model.DisasterType, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DisasterType), nil
	}
}

func (d disasterTypeDo) Find() ([]*model.DisasterType, error) {
	result, err := d.DO.Find()
	return result.([]*model.DisasterType), err
}

func (d disasterTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DisasterType, err error) {
	buf := make([]*model.DisasterType, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d disasterTypeDo) FindInBatches(result *[]*model.DisasterType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d disasterTypeDo) Attrs(attrs ...field.AssignExpr) IDisasterTypeDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d disasterTypeDo) Assign(attrs ...field.AssignExpr) IDisasterTypeDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d disasterTypeDo) Joins(fields ...field.RelationField) IDisasterTypeDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d disasterTypeDo) Preload(fields ...field.RelationField) IDisasterTypeDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d disasterTypeDo) FirstOrInit() (*model.DisasterType, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DisasterType), nil
	}
}

func (d disasterTypeDo) FirstOrCreate() (*model.DisasterType, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DisasterType), nil
	}
}

func (d disasterTypeDo) FindByPage(offset int, limit int) (result []*model.DisasterType, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d disasterTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d disasterTypeDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d disasterTypeDo) Delete(models ...*model.DisasterType) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *disasterTypeDo) withDO(do gen.Dao) *disasterTypeDo {
	d.DO = *do.(*gen.DO)
	return d
}
