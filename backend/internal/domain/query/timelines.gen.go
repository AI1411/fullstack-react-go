// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/AI1411/fullstack-react-go/internal/domain/model"
)

func newTimeline(db *gorm.DB, opts ...gen.DOOption) timeline {
	_timeline := timeline{}

	_timeline.timelineDo.UseDB(db, opts...)
	_timeline.timelineDo.UseModel(&model.Timeline{})

	tableName := _timeline.timelineDo.TableName()
	_timeline.ALL = field.NewAsterisk(tableName)
	_timeline.ID = field.NewInt32(tableName, "id")
	_timeline.DisasterID = field.NewString(tableName, "disaster_id")
	_timeline.EventName = field.NewString(tableName, "event_name")
	_timeline.EventTime = field.NewTime(tableName, "event_time")
	_timeline.Description = field.NewString(tableName, "description")
	_timeline.Severity = field.NewString(tableName, "severity")
	_timeline.CreatedAt = field.NewTime(tableName, "created_at")
	_timeline.UpdatedAt = field.NewTime(tableName, "updated_at")
	_timeline.DeletedAt = field.NewField(tableName, "deleted_at")

	_timeline.fillFieldMap()

	return _timeline
}

type timeline struct {
	timelineDo

	ALL         field.Asterisk
	ID          field.Int32  // タイムラインID - 主キー
	DisasterID  field.String // 災害ID - 関連する災害のID
	EventName   field.String // イベント名 - 発生したイベントの名称
	EventTime   field.Time   // イベント発生日時 - イベントが発生した日時
	Description field.String // イベント説明 - イベントの詳細な説明
	Severity    field.String // イベントの深刻度 - 低, 中, 高などの深刻度
	CreatedAt   field.Time   // 作成日時 - レコード作成日時
	UpdatedAt   field.Time   // 更新日時 - レコード最終更新日時
	DeletedAt   field.Field  // 削除日時 - 論理削除用のタイムスタンプ

	fieldMap map[string]field.Expr
}

func (t timeline) Table(newTableName string) *timeline {
	t.timelineDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t timeline) As(alias string) *timeline {
	t.timelineDo.DO = *(t.timelineDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *timeline) updateTableName(table string) *timeline {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.DisasterID = field.NewString(table, "disaster_id")
	t.EventName = field.NewString(table, "event_name")
	t.EventTime = field.NewTime(table, "event_time")
	t.Description = field.NewString(table, "description")
	t.Severity = field.NewString(table, "severity")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *timeline) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *timeline) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 9)
	t.fieldMap["id"] = t.ID
	t.fieldMap["disaster_id"] = t.DisasterID
	t.fieldMap["event_name"] = t.EventName
	t.fieldMap["event_time"] = t.EventTime
	t.fieldMap["description"] = t.Description
	t.fieldMap["severity"] = t.Severity
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t timeline) clone(db *gorm.DB) timeline {
	t.timelineDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t timeline) replaceDB(db *gorm.DB) timeline {
	t.timelineDo.ReplaceDB(db)
	return t
}

type timelineDo struct{ gen.DO }

type ITimelineDo interface {
	gen.SubQuery
	Debug() ITimelineDo
	WithContext(ctx context.Context) ITimelineDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITimelineDo
	WriteDB() ITimelineDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITimelineDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITimelineDo
	Not(conds ...gen.Condition) ITimelineDo
	Or(conds ...gen.Condition) ITimelineDo
	Select(conds ...field.Expr) ITimelineDo
	Where(conds ...gen.Condition) ITimelineDo
	Order(conds ...field.Expr) ITimelineDo
	Distinct(cols ...field.Expr) ITimelineDo
	Omit(cols ...field.Expr) ITimelineDo
	Join(table schema.Tabler, on ...field.Expr) ITimelineDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITimelineDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITimelineDo
	Group(cols ...field.Expr) ITimelineDo
	Having(conds ...gen.Condition) ITimelineDo
	Limit(limit int) ITimelineDo
	Offset(offset int) ITimelineDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITimelineDo
	Unscoped() ITimelineDo
	Create(values ...*model.Timeline) error
	CreateInBatches(values []*model.Timeline, batchSize int) error
	Save(values ...*model.Timeline) error
	First() (*model.Timeline, error)
	Take() (*model.Timeline, error)
	Last() (*model.Timeline, error)
	Find() ([]*model.Timeline, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Timeline, err error)
	FindInBatches(result *[]*model.Timeline, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Timeline) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITimelineDo
	Assign(attrs ...field.AssignExpr) ITimelineDo
	Joins(fields ...field.RelationField) ITimelineDo
	Preload(fields ...field.RelationField) ITimelineDo
	FirstOrInit() (*model.Timeline, error)
	FirstOrCreate() (*model.Timeline, error)
	FindByPage(offset int, limit int) (result []*model.Timeline, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITimelineDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t timelineDo) Debug() ITimelineDo {
	return t.withDO(t.DO.Debug())
}

func (t timelineDo) WithContext(ctx context.Context) ITimelineDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t timelineDo) ReadDB() ITimelineDo {
	return t.Clauses(dbresolver.Read)
}

func (t timelineDo) WriteDB() ITimelineDo {
	return t.Clauses(dbresolver.Write)
}

func (t timelineDo) Session(config *gorm.Session) ITimelineDo {
	return t.withDO(t.DO.Session(config))
}

func (t timelineDo) Clauses(conds ...clause.Expression) ITimelineDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t timelineDo) Returning(value interface{}, columns ...string) ITimelineDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t timelineDo) Not(conds ...gen.Condition) ITimelineDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t timelineDo) Or(conds ...gen.Condition) ITimelineDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t timelineDo) Select(conds ...field.Expr) ITimelineDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t timelineDo) Where(conds ...gen.Condition) ITimelineDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t timelineDo) Order(conds ...field.Expr) ITimelineDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t timelineDo) Distinct(cols ...field.Expr) ITimelineDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t timelineDo) Omit(cols ...field.Expr) ITimelineDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t timelineDo) Join(table schema.Tabler, on ...field.Expr) ITimelineDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t timelineDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITimelineDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t timelineDo) RightJoin(table schema.Tabler, on ...field.Expr) ITimelineDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t timelineDo) Group(cols ...field.Expr) ITimelineDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t timelineDo) Having(conds ...gen.Condition) ITimelineDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t timelineDo) Limit(limit int) ITimelineDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t timelineDo) Offset(offset int) ITimelineDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t timelineDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITimelineDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t timelineDo) Unscoped() ITimelineDo {
	return t.withDO(t.DO.Unscoped())
}

func (t timelineDo) Create(values ...*model.Timeline) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t timelineDo) CreateInBatches(values []*model.Timeline, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t timelineDo) Save(values ...*model.Timeline) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t timelineDo) First() (*model.Timeline, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Timeline), nil
	}
}

func (t timelineDo) Take() (*model.Timeline, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Timeline), nil
	}
}

func (t timelineDo) Last() (*model.Timeline, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Timeline), nil
	}
}

func (t timelineDo) Find() ([]*model.Timeline, error) {
	result, err := t.DO.Find()
	return result.([]*model.Timeline), err
}

func (t timelineDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Timeline, err error) {
	buf := make([]*model.Timeline, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t timelineDo) FindInBatches(result *[]*model.Timeline, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t timelineDo) Attrs(attrs ...field.AssignExpr) ITimelineDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t timelineDo) Assign(attrs ...field.AssignExpr) ITimelineDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t timelineDo) Joins(fields ...field.RelationField) ITimelineDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t timelineDo) Preload(fields ...field.RelationField) ITimelineDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t timelineDo) FirstOrInit() (*model.Timeline, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Timeline), nil
	}
}

func (t timelineDo) FirstOrCreate() (*model.Timeline, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Timeline), nil
	}
}

func (t timelineDo) FindByPage(offset int, limit int) (result []*model.Timeline, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t timelineDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t timelineDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t timelineDo) Delete(models ...*model.Timeline) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *timelineDo) withDO(do gen.Dao) *timelineDo {
	t.DO = *do.(*gen.DO)
	return t
}
