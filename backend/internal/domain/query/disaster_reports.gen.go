// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/AI1411/fullstack-react-go/internal/domain/model"
)

func newDisasterReport(db *gorm.DB, opts ...gen.DOOption) disasterReport {
	_disasterReport := disasterReport{}

	_disasterReport.disasterReportDo.UseDB(db, opts...)
	_disasterReport.disasterReportDo.UseModel(&model.DisasterReport{})

	tableName := _disasterReport.disasterReportDo.TableName()
	_disasterReport.ALL = field.NewAsterisk(tableName)
	_disasterReport.ID = field.NewInt32(tableName, "id")
	_disasterReport.Title = field.NewString(tableName, "title")
	_disasterReport.Description = field.NewString(tableName, "description")
	_disasterReport.Location = field.NewString(tableName, "location")
	_disasterReport.CreatedAt = field.NewTime(tableName, "created_at")

	_disasterReport.fillFieldMap()

	return _disasterReport
}

type disasterReport struct {
	disasterReportDo

	ALL         field.Asterisk
	ID          field.Int32
	Title       field.String
	Description field.String
	Location    field.String
	CreatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (d disasterReport) Table(newTableName string) *disasterReport {
	d.disasterReportDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d disasterReport) As(alias string) *disasterReport {
	d.disasterReportDo.DO = *(d.disasterReportDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *disasterReport) updateTableName(table string) *disasterReport {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt32(table, "id")
	d.Title = field.NewString(table, "title")
	d.Description = field.NewString(table, "description")
	d.Location = field.NewString(table, "location")
	d.CreatedAt = field.NewTime(table, "created_at")

	d.fillFieldMap()

	return d
}

func (d *disasterReport) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *disasterReport) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 5)
	d.fieldMap["id"] = d.ID
	d.fieldMap["title"] = d.Title
	d.fieldMap["description"] = d.Description
	d.fieldMap["location"] = d.Location
	d.fieldMap["created_at"] = d.CreatedAt
}

func (d disasterReport) clone(db *gorm.DB) disasterReport {
	d.disasterReportDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d disasterReport) replaceDB(db *gorm.DB) disasterReport {
	d.disasterReportDo.ReplaceDB(db)
	return d
}

type disasterReportDo struct{ gen.DO }

type IDisasterReportDo interface {
	gen.SubQuery
	Debug() IDisasterReportDo
	WithContext(ctx context.Context) IDisasterReportDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDisasterReportDo
	WriteDB() IDisasterReportDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDisasterReportDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDisasterReportDo
	Not(conds ...gen.Condition) IDisasterReportDo
	Or(conds ...gen.Condition) IDisasterReportDo
	Select(conds ...field.Expr) IDisasterReportDo
	Where(conds ...gen.Condition) IDisasterReportDo
	Order(conds ...field.Expr) IDisasterReportDo
	Distinct(cols ...field.Expr) IDisasterReportDo
	Omit(cols ...field.Expr) IDisasterReportDo
	Join(table schema.Tabler, on ...field.Expr) IDisasterReportDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDisasterReportDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDisasterReportDo
	Group(cols ...field.Expr) IDisasterReportDo
	Having(conds ...gen.Condition) IDisasterReportDo
	Limit(limit int) IDisasterReportDo
	Offset(offset int) IDisasterReportDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDisasterReportDo
	Unscoped() IDisasterReportDo
	Create(values ...*model.DisasterReport) error
	CreateInBatches(values []*model.DisasterReport, batchSize int) error
	Save(values ...*model.DisasterReport) error
	First() (*model.DisasterReport, error)
	Take() (*model.DisasterReport, error)
	Last() (*model.DisasterReport, error)
	Find() ([]*model.DisasterReport, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DisasterReport, err error)
	FindInBatches(result *[]*model.DisasterReport, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DisasterReport) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDisasterReportDo
	Assign(attrs ...field.AssignExpr) IDisasterReportDo
	Joins(fields ...field.RelationField) IDisasterReportDo
	Preload(fields ...field.RelationField) IDisasterReportDo
	FirstOrInit() (*model.DisasterReport, error)
	FirstOrCreate() (*model.DisasterReport, error)
	FindByPage(offset int, limit int) (result []*model.DisasterReport, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDisasterReportDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d disasterReportDo) Debug() IDisasterReportDo {
	return d.withDO(d.DO.Debug())
}

func (d disasterReportDo) WithContext(ctx context.Context) IDisasterReportDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d disasterReportDo) ReadDB() IDisasterReportDo {
	return d.Clauses(dbresolver.Read)
}

func (d disasterReportDo) WriteDB() IDisasterReportDo {
	return d.Clauses(dbresolver.Write)
}

func (d disasterReportDo) Session(config *gorm.Session) IDisasterReportDo {
	return d.withDO(d.DO.Session(config))
}

func (d disasterReportDo) Clauses(conds ...clause.Expression) IDisasterReportDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d disasterReportDo) Returning(value interface{}, columns ...string) IDisasterReportDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d disasterReportDo) Not(conds ...gen.Condition) IDisasterReportDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d disasterReportDo) Or(conds ...gen.Condition) IDisasterReportDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d disasterReportDo) Select(conds ...field.Expr) IDisasterReportDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d disasterReportDo) Where(conds ...gen.Condition) IDisasterReportDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d disasterReportDo) Order(conds ...field.Expr) IDisasterReportDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d disasterReportDo) Distinct(cols ...field.Expr) IDisasterReportDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d disasterReportDo) Omit(cols ...field.Expr) IDisasterReportDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d disasterReportDo) Join(table schema.Tabler, on ...field.Expr) IDisasterReportDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d disasterReportDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDisasterReportDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d disasterReportDo) RightJoin(table schema.Tabler, on ...field.Expr) IDisasterReportDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d disasterReportDo) Group(cols ...field.Expr) IDisasterReportDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d disasterReportDo) Having(conds ...gen.Condition) IDisasterReportDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d disasterReportDo) Limit(limit int) IDisasterReportDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d disasterReportDo) Offset(offset int) IDisasterReportDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d disasterReportDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDisasterReportDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d disasterReportDo) Unscoped() IDisasterReportDo {
	return d.withDO(d.DO.Unscoped())
}

func (d disasterReportDo) Create(values ...*model.DisasterReport) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d disasterReportDo) CreateInBatches(values []*model.DisasterReport, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d disasterReportDo) Save(values ...*model.DisasterReport) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d disasterReportDo) First() (*model.DisasterReport, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DisasterReport), nil
	}
}

func (d disasterReportDo) Take() (*model.DisasterReport, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DisasterReport), nil
	}
}

func (d disasterReportDo) Last() (*model.DisasterReport, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DisasterReport), nil
	}
}

func (d disasterReportDo) Find() ([]*model.DisasterReport, error) {
	result, err := d.DO.Find()
	return result.([]*model.DisasterReport), err
}

func (d disasterReportDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DisasterReport, err error) {
	buf := make([]*model.DisasterReport, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d disasterReportDo) FindInBatches(result *[]*model.DisasterReport, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d disasterReportDo) Attrs(attrs ...field.AssignExpr) IDisasterReportDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d disasterReportDo) Assign(attrs ...field.AssignExpr) IDisasterReportDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d disasterReportDo) Joins(fields ...field.RelationField) IDisasterReportDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d disasterReportDo) Preload(fields ...field.RelationField) IDisasterReportDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d disasterReportDo) FirstOrInit() (*model.DisasterReport, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DisasterReport), nil
	}
}

func (d disasterReportDo) FirstOrCreate() (*model.DisasterReport, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DisasterReport), nil
	}
}

func (d disasterReportDo) FindByPage(offset int, limit int) (result []*model.DisasterReport, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d disasterReportDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d disasterReportDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d disasterReportDo) Delete(models ...*model.DisasterReport) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *disasterReportDo) withDO(do gen.Dao) *disasterReportDo {
	d.DO = *do.(*gen.DO)
	return d
}
