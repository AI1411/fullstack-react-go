// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/AI1411/fullstack-react-go/internal/domain/model"
)

func newUserSession(db *gorm.DB, opts ...gen.DOOption) userSession {
	_userSession := userSession{}

	_userSession.userSessionDo.UseDB(db, opts...)
	_userSession.userSessionDo.UseModel(&model.UserSession{})

	tableName := _userSession.userSessionDo.TableName()
	_userSession.ALL = field.NewAsterisk(tableName)
	_userSession.ID = field.NewInt64(tableName, "id")
	_userSession.SessionID = field.NewString(tableName, "session_id")
	_userSession.UserID = field.NewString(tableName, "user_id")
	_userSession.IPAddress = field.NewString(tableName, "ip_address")
	_userSession.UserAgent = field.NewString(tableName, "user_agent")
	_userSession.IsActive = field.NewBool(tableName, "is_active")
	_userSession.ExpiresAt = field.NewTime(tableName, "expires_at")
	_userSession.LastActivity = field.NewTime(tableName, "last_activity")
	_userSession.CreatedAt = field.NewTime(tableName, "created_at")

	_userSession.fillFieldMap()

	return _userSession
}

type userSession struct {
	userSessionDo

	ALL          field.Asterisk
	ID           field.Int64  // セッションID（主キー、自動掲番）
	SessionID    field.String // セッション識別子（ユニーク制約あり）
	UserID       field.String // ユーザーID（外部キー、ユーザーテーブルのID）
	IPAddress    field.String // ユーザーのIPアドレス
	UserAgent    field.String // ユーザーエージェント情報（ブラウザやデバイス情報）
	IsActive     field.Bool   // セッションの有効フラグ（TRUE: 有効、FALSE: 無効）
	ExpiresAt    field.Time   // セッションの有効期限
	LastActivity field.Time   // 最後のアクティビティ日時（セッションの最終アクティビティ）
	CreatedAt    field.Time   // セッション作成日時

	fieldMap map[string]field.Expr
}

func (u userSession) Table(newTableName string) *userSession {
	u.userSessionDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userSession) As(alias string) *userSession {
	u.userSessionDo.DO = *(u.userSessionDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userSession) updateTableName(table string) *userSession {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.SessionID = field.NewString(table, "session_id")
	u.UserID = field.NewString(table, "user_id")
	u.IPAddress = field.NewString(table, "ip_address")
	u.UserAgent = field.NewString(table, "user_agent")
	u.IsActive = field.NewBool(table, "is_active")
	u.ExpiresAt = field.NewTime(table, "expires_at")
	u.LastActivity = field.NewTime(table, "last_activity")
	u.CreatedAt = field.NewTime(table, "created_at")

	u.fillFieldMap()

	return u
}

func (u *userSession) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userSession) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 9)
	u.fieldMap["id"] = u.ID
	u.fieldMap["session_id"] = u.SessionID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["ip_address"] = u.IPAddress
	u.fieldMap["user_agent"] = u.UserAgent
	u.fieldMap["is_active"] = u.IsActive
	u.fieldMap["expires_at"] = u.ExpiresAt
	u.fieldMap["last_activity"] = u.LastActivity
	u.fieldMap["created_at"] = u.CreatedAt
}

func (u userSession) clone(db *gorm.DB) userSession {
	u.userSessionDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userSession) replaceDB(db *gorm.DB) userSession {
	u.userSessionDo.ReplaceDB(db)
	return u
}

type userSessionDo struct{ gen.DO }

type IUserSessionDo interface {
	gen.SubQuery
	Debug() IUserSessionDo
	WithContext(ctx context.Context) IUserSessionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserSessionDo
	WriteDB() IUserSessionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserSessionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserSessionDo
	Not(conds ...gen.Condition) IUserSessionDo
	Or(conds ...gen.Condition) IUserSessionDo
	Select(conds ...field.Expr) IUserSessionDo
	Where(conds ...gen.Condition) IUserSessionDo
	Order(conds ...field.Expr) IUserSessionDo
	Distinct(cols ...field.Expr) IUserSessionDo
	Omit(cols ...field.Expr) IUserSessionDo
	Join(table schema.Tabler, on ...field.Expr) IUserSessionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserSessionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserSessionDo
	Group(cols ...field.Expr) IUserSessionDo
	Having(conds ...gen.Condition) IUserSessionDo
	Limit(limit int) IUserSessionDo
	Offset(offset int) IUserSessionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserSessionDo
	Unscoped() IUserSessionDo
	Create(values ...*model.UserSession) error
	CreateInBatches(values []*model.UserSession, batchSize int) error
	Save(values ...*model.UserSession) error
	First() (*model.UserSession, error)
	Take() (*model.UserSession, error)
	Last() (*model.UserSession, error)
	Find() ([]*model.UserSession, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserSession, err error)
	FindInBatches(result *[]*model.UserSession, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserSession) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserSessionDo
	Assign(attrs ...field.AssignExpr) IUserSessionDo
	Joins(fields ...field.RelationField) IUserSessionDo
	Preload(fields ...field.RelationField) IUserSessionDo
	FirstOrInit() (*model.UserSession, error)
	FirstOrCreate() (*model.UserSession, error)
	FindByPage(offset int, limit int) (result []*model.UserSession, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserSessionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userSessionDo) Debug() IUserSessionDo {
	return u.withDO(u.DO.Debug())
}

func (u userSessionDo) WithContext(ctx context.Context) IUserSessionDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userSessionDo) ReadDB() IUserSessionDo {
	return u.Clauses(dbresolver.Read)
}

func (u userSessionDo) WriteDB() IUserSessionDo {
	return u.Clauses(dbresolver.Write)
}

func (u userSessionDo) Session(config *gorm.Session) IUserSessionDo {
	return u.withDO(u.DO.Session(config))
}

func (u userSessionDo) Clauses(conds ...clause.Expression) IUserSessionDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userSessionDo) Returning(value interface{}, columns ...string) IUserSessionDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userSessionDo) Not(conds ...gen.Condition) IUserSessionDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userSessionDo) Or(conds ...gen.Condition) IUserSessionDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userSessionDo) Select(conds ...field.Expr) IUserSessionDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userSessionDo) Where(conds ...gen.Condition) IUserSessionDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userSessionDo) Order(conds ...field.Expr) IUserSessionDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userSessionDo) Distinct(cols ...field.Expr) IUserSessionDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userSessionDo) Omit(cols ...field.Expr) IUserSessionDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userSessionDo) Join(table schema.Tabler, on ...field.Expr) IUserSessionDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userSessionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserSessionDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userSessionDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserSessionDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userSessionDo) Group(cols ...field.Expr) IUserSessionDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userSessionDo) Having(conds ...gen.Condition) IUserSessionDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userSessionDo) Limit(limit int) IUserSessionDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userSessionDo) Offset(offset int) IUserSessionDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userSessionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserSessionDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userSessionDo) Unscoped() IUserSessionDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userSessionDo) Create(values ...*model.UserSession) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userSessionDo) CreateInBatches(values []*model.UserSession, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userSessionDo) Save(values ...*model.UserSession) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userSessionDo) First() (*model.UserSession, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSession), nil
	}
}

func (u userSessionDo) Take() (*model.UserSession, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSession), nil
	}
}

func (u userSessionDo) Last() (*model.UserSession, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSession), nil
	}
}

func (u userSessionDo) Find() ([]*model.UserSession, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserSession), err
}

func (u userSessionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserSession, err error) {
	buf := make([]*model.UserSession, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userSessionDo) FindInBatches(result *[]*model.UserSession, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userSessionDo) Attrs(attrs ...field.AssignExpr) IUserSessionDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userSessionDo) Assign(attrs ...field.AssignExpr) IUserSessionDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userSessionDo) Joins(fields ...field.RelationField) IUserSessionDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userSessionDo) Preload(fields ...field.RelationField) IUserSessionDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userSessionDo) FirstOrInit() (*model.UserSession, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSession), nil
	}
}

func (u userSessionDo) FirstOrCreate() (*model.UserSession, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSession), nil
	}
}

func (u userSessionDo) FindByPage(offset int, limit int) (result []*model.UserSession, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userSessionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userSessionDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userSessionDo) Delete(models ...*model.UserSession) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userSessionDo) withDO(do gen.Dao) *userSessionDo {
	u.DO = *do.(*gen.DO)
	return u
}
