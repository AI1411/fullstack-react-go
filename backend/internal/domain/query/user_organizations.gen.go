// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/AI1411/fullstack-react-go/internal/domain/model"
)

func newUserOrganization(db *gorm.DB, opts ...gen.DOOption) userOrganization {
	_userOrganization := userOrganization{}

	_userOrganization.userOrganizationDo.UseDB(db, opts...)
	_userOrganization.userOrganizationDo.UseModel(&model.UserOrganization{})

	tableName := _userOrganization.userOrganizationDo.TableName()
	_userOrganization.ALL = field.NewAsterisk(tableName)
	_userOrganization.UserID = field.NewInt32(tableName, "user_id")
	_userOrganization.OrganizationID = field.NewInt32(tableName, "organization_id")
	_userOrganization.IsPrimary = field.NewBool(tableName, "is_primary")
	_userOrganization.CreatedAt = field.NewTime(tableName, "created_at")
	_userOrganization.UpdatedAt = field.NewTime(tableName, "updated_at")

	_userOrganization.fillFieldMap()

	return _userOrganization
}

type userOrganization struct {
	userOrganizationDo

	ALL            field.Asterisk
	UserID         field.Int32 // ユーザーID - ユーザーテーブルの外部キー
	OrganizationID field.Int32 // 組織ID - 組織テーブルの外部キー
	IsPrimary      field.Bool  // 主所属フラグ - ユーザーの主所属組織かどうか
	CreatedAt      field.Time  // 作成日時 - レコード作成日時
	UpdatedAt      field.Time  // 更新日時 - レコード最終更新日時

	fieldMap map[string]field.Expr
}

func (u userOrganization) Table(newTableName string) *userOrganization {
	u.userOrganizationDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userOrganization) As(alias string) *userOrganization {
	u.userOrganizationDo.DO = *(u.userOrganizationDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userOrganization) updateTableName(table string) *userOrganization {
	u.ALL = field.NewAsterisk(table)
	u.UserID = field.NewInt32(table, "user_id")
	u.OrganizationID = field.NewInt32(table, "organization_id")
	u.IsPrimary = field.NewBool(table, "is_primary")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userOrganization) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userOrganization) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 5)
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["organization_id"] = u.OrganizationID
	u.fieldMap["is_primary"] = u.IsPrimary
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userOrganization) clone(db *gorm.DB) userOrganization {
	u.userOrganizationDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userOrganization) replaceDB(db *gorm.DB) userOrganization {
	u.userOrganizationDo.ReplaceDB(db)
	return u
}

type userOrganizationDo struct{ gen.DO }

type IUserOrganizationDo interface {
	gen.SubQuery
	Debug() IUserOrganizationDo
	WithContext(ctx context.Context) IUserOrganizationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserOrganizationDo
	WriteDB() IUserOrganizationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserOrganizationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserOrganizationDo
	Not(conds ...gen.Condition) IUserOrganizationDo
	Or(conds ...gen.Condition) IUserOrganizationDo
	Select(conds ...field.Expr) IUserOrganizationDo
	Where(conds ...gen.Condition) IUserOrganizationDo
	Order(conds ...field.Expr) IUserOrganizationDo
	Distinct(cols ...field.Expr) IUserOrganizationDo
	Omit(cols ...field.Expr) IUserOrganizationDo
	Join(table schema.Tabler, on ...field.Expr) IUserOrganizationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserOrganizationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserOrganizationDo
	Group(cols ...field.Expr) IUserOrganizationDo
	Having(conds ...gen.Condition) IUserOrganizationDo
	Limit(limit int) IUserOrganizationDo
	Offset(offset int) IUserOrganizationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserOrganizationDo
	Unscoped() IUserOrganizationDo
	Create(values ...*model.UserOrganization) error
	CreateInBatches(values []*model.UserOrganization, batchSize int) error
	Save(values ...*model.UserOrganization) error
	First() (*model.UserOrganization, error)
	Take() (*model.UserOrganization, error)
	Last() (*model.UserOrganization, error)
	Find() ([]*model.UserOrganization, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserOrganization, err error)
	FindInBatches(result *[]*model.UserOrganization, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserOrganization) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserOrganizationDo
	Assign(attrs ...field.AssignExpr) IUserOrganizationDo
	Joins(fields ...field.RelationField) IUserOrganizationDo
	Preload(fields ...field.RelationField) IUserOrganizationDo
	FirstOrInit() (*model.UserOrganization, error)
	FirstOrCreate() (*model.UserOrganization, error)
	FindByPage(offset int, limit int) (result []*model.UserOrganization, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserOrganizationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userOrganizationDo) Debug() IUserOrganizationDo {
	return u.withDO(u.DO.Debug())
}

func (u userOrganizationDo) WithContext(ctx context.Context) IUserOrganizationDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userOrganizationDo) ReadDB() IUserOrganizationDo {
	return u.Clauses(dbresolver.Read)
}

func (u userOrganizationDo) WriteDB() IUserOrganizationDo {
	return u.Clauses(dbresolver.Write)
}

func (u userOrganizationDo) Session(config *gorm.Session) IUserOrganizationDo {
	return u.withDO(u.DO.Session(config))
}

func (u userOrganizationDo) Clauses(conds ...clause.Expression) IUserOrganizationDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userOrganizationDo) Returning(value interface{}, columns ...string) IUserOrganizationDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userOrganizationDo) Not(conds ...gen.Condition) IUserOrganizationDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userOrganizationDo) Or(conds ...gen.Condition) IUserOrganizationDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userOrganizationDo) Select(conds ...field.Expr) IUserOrganizationDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userOrganizationDo) Where(conds ...gen.Condition) IUserOrganizationDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userOrganizationDo) Order(conds ...field.Expr) IUserOrganizationDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userOrganizationDo) Distinct(cols ...field.Expr) IUserOrganizationDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userOrganizationDo) Omit(cols ...field.Expr) IUserOrganizationDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userOrganizationDo) Join(table schema.Tabler, on ...field.Expr) IUserOrganizationDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userOrganizationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserOrganizationDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userOrganizationDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserOrganizationDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userOrganizationDo) Group(cols ...field.Expr) IUserOrganizationDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userOrganizationDo) Having(conds ...gen.Condition) IUserOrganizationDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userOrganizationDo) Limit(limit int) IUserOrganizationDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userOrganizationDo) Offset(offset int) IUserOrganizationDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userOrganizationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserOrganizationDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userOrganizationDo) Unscoped() IUserOrganizationDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userOrganizationDo) Create(values ...*model.UserOrganization) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userOrganizationDo) CreateInBatches(values []*model.UserOrganization, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userOrganizationDo) Save(values ...*model.UserOrganization) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userOrganizationDo) First() (*model.UserOrganization, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserOrganization), nil
	}
}

func (u userOrganizationDo) Take() (*model.UserOrganization, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserOrganization), nil
	}
}

func (u userOrganizationDo) Last() (*model.UserOrganization, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserOrganization), nil
	}
}

func (u userOrganizationDo) Find() ([]*model.UserOrganization, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserOrganization), err
}

func (u userOrganizationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserOrganization, err error) {
	buf := make([]*model.UserOrganization, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userOrganizationDo) FindInBatches(result *[]*model.UserOrganization, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userOrganizationDo) Attrs(attrs ...field.AssignExpr) IUserOrganizationDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userOrganizationDo) Assign(attrs ...field.AssignExpr) IUserOrganizationDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userOrganizationDo) Joins(fields ...field.RelationField) IUserOrganizationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userOrganizationDo) Preload(fields ...field.RelationField) IUserOrganizationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userOrganizationDo) FirstOrInit() (*model.UserOrganization, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserOrganization), nil
	}
}

func (u userOrganizationDo) FirstOrCreate() (*model.UserOrganization, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserOrganization), nil
	}
}

func (u userOrganizationDo) FindByPage(offset int, limit int) (result []*model.UserOrganization, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userOrganizationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userOrganizationDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userOrganizationDo) Delete(models ...*model.UserOrganization) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userOrganizationDo) withDO(do gen.Dao) *userOrganizationDo {
	u.DO = *do.(*gen.DO)
	return u
}
