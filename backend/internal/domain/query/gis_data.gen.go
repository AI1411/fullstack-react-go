// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/AI1411/fullstack-react-go/internal/domain/model"
)

func newGisDatum(db *gorm.DB, opts ...gen.DOOption) gisDatum {
	_gisDatum := gisDatum{}

	_gisDatum.gisDatumDo.UseDB(db, opts...)
	_gisDatum.gisDatumDo.UseModel(&model.GisDatum{})

	tableName := _gisDatum.gisDatumDo.TableName()
	_gisDatum.ALL = field.NewAsterisk(tableName)
	_gisDatum.ID = field.NewInt32(tableName, "id")
	_gisDatum.DisasterID = field.NewString(tableName, "disaster_id")
	_gisDatum.DataType = field.NewString(tableName, "data_type")
	_gisDatum.Name = field.NewString(tableName, "name")
	_gisDatum.Description = field.NewString(tableName, "description")
	_gisDatum.GeometryType = field.NewString(tableName, "geometry_type")
	_gisDatum.GeometryData = field.NewString(tableName, "geometry_data")
	_gisDatum.Properties = field.NewString(tableName, "properties")
	_gisDatum.CreatedBy = field.NewInt32(tableName, "created_by")
	_gisDatum.CreatedAt = field.NewTime(tableName, "created_at")
	_gisDatum.UpdatedAt = field.NewTime(tableName, "updated_at")
	_gisDatum.DeletedAt = field.NewField(tableName, "deleted_at")

	_gisDatum.fillFieldMap()

	return _gisDatum
}

type gisDatum struct {
	gisDatumDo

	ALL          field.Asterisk
	ID           field.Int32  // GISデータID - 主キー
	DisasterID   field.String // 災害ID - 関連する災害のID
	DataType     field.String // データ種別 - GISデータの種類
	Name         field.String // 名称 - GISデータの名称
	Description  field.String // 説明 - GISデータの説明
	GeometryType field.String // ジオメトリ種別 - 地理データの形状タイプ
	GeometryData field.String // ジオメトリデータ - GeoJSON形式の地理データ
	Properties   field.String // プロパティ - 追加のプロパティ情報（JSON形式）
	CreatedBy    field.Int32  // 作成者ID - データを作成したユーザーのID
	CreatedAt    field.Time   // 作成日時 - レコード作成日時
	UpdatedAt    field.Time   // 更新日時 - レコード最終更新日時
	DeletedAt    field.Field  // 削除日時 - 論理削除用のタイムスタンプ

	fieldMap map[string]field.Expr
}

func (g gisDatum) Table(newTableName string) *gisDatum {
	g.gisDatumDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gisDatum) As(alias string) *gisDatum {
	g.gisDatumDo.DO = *(g.gisDatumDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gisDatum) updateTableName(table string) *gisDatum {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt32(table, "id")
	g.DisasterID = field.NewString(table, "disaster_id")
	g.DataType = field.NewString(table, "data_type")
	g.Name = field.NewString(table, "name")
	g.Description = field.NewString(table, "description")
	g.GeometryType = field.NewString(table, "geometry_type")
	g.GeometryData = field.NewString(table, "geometry_data")
	g.Properties = field.NewString(table, "properties")
	g.CreatedBy = field.NewInt32(table, "created_by")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.DeletedAt = field.NewField(table, "deleted_at")

	g.fillFieldMap()

	return g
}

func (g *gisDatum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gisDatum) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 12)
	g.fieldMap["id"] = g.ID
	g.fieldMap["disaster_id"] = g.DisasterID
	g.fieldMap["data_type"] = g.DataType
	g.fieldMap["name"] = g.Name
	g.fieldMap["description"] = g.Description
	g.fieldMap["geometry_type"] = g.GeometryType
	g.fieldMap["geometry_data"] = g.GeometryData
	g.fieldMap["properties"] = g.Properties
	g.fieldMap["created_by"] = g.CreatedBy
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["deleted_at"] = g.DeletedAt
}

func (g gisDatum) clone(db *gorm.DB) gisDatum {
	g.gisDatumDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gisDatum) replaceDB(db *gorm.DB) gisDatum {
	g.gisDatumDo.ReplaceDB(db)
	return g
}

type gisDatumDo struct{ gen.DO }

type IGisDatumDo interface {
	gen.SubQuery
	Debug() IGisDatumDo
	WithContext(ctx context.Context) IGisDatumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGisDatumDo
	WriteDB() IGisDatumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGisDatumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGisDatumDo
	Not(conds ...gen.Condition) IGisDatumDo
	Or(conds ...gen.Condition) IGisDatumDo
	Select(conds ...field.Expr) IGisDatumDo
	Where(conds ...gen.Condition) IGisDatumDo
	Order(conds ...field.Expr) IGisDatumDo
	Distinct(cols ...field.Expr) IGisDatumDo
	Omit(cols ...field.Expr) IGisDatumDo
	Join(table schema.Tabler, on ...field.Expr) IGisDatumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGisDatumDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGisDatumDo
	Group(cols ...field.Expr) IGisDatumDo
	Having(conds ...gen.Condition) IGisDatumDo
	Limit(limit int) IGisDatumDo
	Offset(offset int) IGisDatumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGisDatumDo
	Unscoped() IGisDatumDo
	Create(values ...*model.GisDatum) error
	CreateInBatches(values []*model.GisDatum, batchSize int) error
	Save(values ...*model.GisDatum) error
	First() (*model.GisDatum, error)
	Take() (*model.GisDatum, error)
	Last() (*model.GisDatum, error)
	Find() ([]*model.GisDatum, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GisDatum, err error)
	FindInBatches(result *[]*model.GisDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GisDatum) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGisDatumDo
	Assign(attrs ...field.AssignExpr) IGisDatumDo
	Joins(fields ...field.RelationField) IGisDatumDo
	Preload(fields ...field.RelationField) IGisDatumDo
	FirstOrInit() (*model.GisDatum, error)
	FirstOrCreate() (*model.GisDatum, error)
	FindByPage(offset int, limit int) (result []*model.GisDatum, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGisDatumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gisDatumDo) Debug() IGisDatumDo {
	return g.withDO(g.DO.Debug())
}

func (g gisDatumDo) WithContext(ctx context.Context) IGisDatumDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gisDatumDo) ReadDB() IGisDatumDo {
	return g.Clauses(dbresolver.Read)
}

func (g gisDatumDo) WriteDB() IGisDatumDo {
	return g.Clauses(dbresolver.Write)
}

func (g gisDatumDo) Session(config *gorm.Session) IGisDatumDo {
	return g.withDO(g.DO.Session(config))
}

func (g gisDatumDo) Clauses(conds ...clause.Expression) IGisDatumDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gisDatumDo) Returning(value interface{}, columns ...string) IGisDatumDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gisDatumDo) Not(conds ...gen.Condition) IGisDatumDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gisDatumDo) Or(conds ...gen.Condition) IGisDatumDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gisDatumDo) Select(conds ...field.Expr) IGisDatumDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gisDatumDo) Where(conds ...gen.Condition) IGisDatumDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gisDatumDo) Order(conds ...field.Expr) IGisDatumDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gisDatumDo) Distinct(cols ...field.Expr) IGisDatumDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gisDatumDo) Omit(cols ...field.Expr) IGisDatumDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gisDatumDo) Join(table schema.Tabler, on ...field.Expr) IGisDatumDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gisDatumDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGisDatumDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gisDatumDo) RightJoin(table schema.Tabler, on ...field.Expr) IGisDatumDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gisDatumDo) Group(cols ...field.Expr) IGisDatumDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gisDatumDo) Having(conds ...gen.Condition) IGisDatumDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gisDatumDo) Limit(limit int) IGisDatumDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gisDatumDo) Offset(offset int) IGisDatumDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gisDatumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGisDatumDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gisDatumDo) Unscoped() IGisDatumDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gisDatumDo) Create(values ...*model.GisDatum) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gisDatumDo) CreateInBatches(values []*model.GisDatum, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gisDatumDo) Save(values ...*model.GisDatum) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gisDatumDo) First() (*model.GisDatum, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GisDatum), nil
	}
}

func (g gisDatumDo) Take() (*model.GisDatum, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GisDatum), nil
	}
}

func (g gisDatumDo) Last() (*model.GisDatum, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GisDatum), nil
	}
}

func (g gisDatumDo) Find() ([]*model.GisDatum, error) {
	result, err := g.DO.Find()
	return result.([]*model.GisDatum), err
}

func (g gisDatumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GisDatum, err error) {
	buf := make([]*model.GisDatum, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gisDatumDo) FindInBatches(result *[]*model.GisDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gisDatumDo) Attrs(attrs ...field.AssignExpr) IGisDatumDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gisDatumDo) Assign(attrs ...field.AssignExpr) IGisDatumDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gisDatumDo) Joins(fields ...field.RelationField) IGisDatumDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gisDatumDo) Preload(fields ...field.RelationField) IGisDatumDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gisDatumDo) FirstOrInit() (*model.GisDatum, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GisDatum), nil
	}
}

func (g gisDatumDo) FirstOrCreate() (*model.GisDatum, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GisDatum), nil
	}
}

func (g gisDatumDo) FindByPage(offset int, limit int) (result []*model.GisDatum, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gisDatumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gisDatumDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gisDatumDo) Delete(models ...*model.GisDatum) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gisDatumDo) withDO(do gen.Dao) *gisDatumDo {
	g.DO = *do.(*gen.DO)
	return g
}
