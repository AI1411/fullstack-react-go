// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/AI1411/fullstack-react-go/internal/domain/model"
)

func newSupportApplication(db *gorm.DB, opts ...gen.DOOption) supportApplication {
	_supportApplication := supportApplication{}

	_supportApplication.supportApplicationDo.UseDB(db, opts...)
	_supportApplication.supportApplicationDo.UseModel(&model.SupportApplication{})

	tableName := _supportApplication.supportApplicationDo.TableName()
	_supportApplication.ALL = field.NewAsterisk(tableName)
	_supportApplication.ApplicationID = field.NewString(tableName, "application_id")
	_supportApplication.ApplicationDate = field.NewTime(tableName, "application_date")
	_supportApplication.ApplicantName = field.NewString(tableName, "applicant_name")
	_supportApplication.DisasterName = field.NewString(tableName, "disaster_name")
	_supportApplication.RequestedAmount = field.NewInt64(tableName, "requested_amount")
	_supportApplication.Status = field.NewString(tableName, "status")
	_supportApplication.ReviewedAt = field.NewTime(tableName, "reviewed_at")
	_supportApplication.ApprovedAt = field.NewTime(tableName, "approved_at")
	_supportApplication.CompletedAt = field.NewTime(tableName, "completed_at")
	_supportApplication.Notes = field.NewString(tableName, "notes")
	_supportApplication.CreatedAt = field.NewTime(tableName, "created_at")
	_supportApplication.UpdatedAt = field.NewTime(tableName, "updated_at")

	_supportApplication.fillFieldMap()

	return _supportApplication
}

type supportApplication struct {
	supportApplicationDo

	ALL             field.Asterisk
	ApplicationID   field.String // 申請ID - 主キー（例：A001, A002...）
	ApplicationDate field.Time   // 申請日 - 申請が提出された日付
	ApplicantName   field.String // 申請者名 - 個人名または法人名
	DisasterName    field.String // 災害名 - 対象となる災害の名称
	RequestedAmount field.Int64  // 申請金額 - 申請する支援金額（円）
	Status          field.String // ステータス - 申請の処理状況（審査中、書類確認中、承認済、完了、支払処理中、却下）
	ReviewedAt      field.Time   // 審査完了日時 - 申請の審査が完了した日時
	ApprovedAt      field.Time   // 承認日時 - 申請が承認された日時
	CompletedAt     field.Time   // 処理完了日時 - 支援金の支払いなど全ての処理が完了した日時
	Notes           field.String // 備考 - 申請に関する備考やメモ
	CreatedAt       field.Time   // 作成日時 - レコード作成日時
	UpdatedAt       field.Time   // 更新日時 - レコード最終更新日時

	fieldMap map[string]field.Expr
}

func (s supportApplication) Table(newTableName string) *supportApplication {
	s.supportApplicationDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s supportApplication) As(alias string) *supportApplication {
	s.supportApplicationDo.DO = *(s.supportApplicationDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *supportApplication) updateTableName(table string) *supportApplication {
	s.ALL = field.NewAsterisk(table)
	s.ApplicationID = field.NewString(table, "application_id")
	s.ApplicationDate = field.NewTime(table, "application_date")
	s.ApplicantName = field.NewString(table, "applicant_name")
	s.DisasterName = field.NewString(table, "disaster_name")
	s.RequestedAmount = field.NewInt64(table, "requested_amount")
	s.Status = field.NewString(table, "status")
	s.ReviewedAt = field.NewTime(table, "reviewed_at")
	s.ApprovedAt = field.NewTime(table, "approved_at")
	s.CompletedAt = field.NewTime(table, "completed_at")
	s.Notes = field.NewString(table, "notes")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *supportApplication) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *supportApplication) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 12)
	s.fieldMap["application_id"] = s.ApplicationID
	s.fieldMap["application_date"] = s.ApplicationDate
	s.fieldMap["applicant_name"] = s.ApplicantName
	s.fieldMap["disaster_name"] = s.DisasterName
	s.fieldMap["requested_amount"] = s.RequestedAmount
	s.fieldMap["status"] = s.Status
	s.fieldMap["reviewed_at"] = s.ReviewedAt
	s.fieldMap["approved_at"] = s.ApprovedAt
	s.fieldMap["completed_at"] = s.CompletedAt
	s.fieldMap["notes"] = s.Notes
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s supportApplication) clone(db *gorm.DB) supportApplication {
	s.supportApplicationDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s supportApplication) replaceDB(db *gorm.DB) supportApplication {
	s.supportApplicationDo.ReplaceDB(db)
	return s
}

type supportApplicationDo struct{ gen.DO }

type ISupportApplicationDo interface {
	gen.SubQuery
	Debug() ISupportApplicationDo
	WithContext(ctx context.Context) ISupportApplicationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISupportApplicationDo
	WriteDB() ISupportApplicationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISupportApplicationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISupportApplicationDo
	Not(conds ...gen.Condition) ISupportApplicationDo
	Or(conds ...gen.Condition) ISupportApplicationDo
	Select(conds ...field.Expr) ISupportApplicationDo
	Where(conds ...gen.Condition) ISupportApplicationDo
	Order(conds ...field.Expr) ISupportApplicationDo
	Distinct(cols ...field.Expr) ISupportApplicationDo
	Omit(cols ...field.Expr) ISupportApplicationDo
	Join(table schema.Tabler, on ...field.Expr) ISupportApplicationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISupportApplicationDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISupportApplicationDo
	Group(cols ...field.Expr) ISupportApplicationDo
	Having(conds ...gen.Condition) ISupportApplicationDo
	Limit(limit int) ISupportApplicationDo
	Offset(offset int) ISupportApplicationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISupportApplicationDo
	Unscoped() ISupportApplicationDo
	Create(values ...*model.SupportApplication) error
	CreateInBatches(values []*model.SupportApplication, batchSize int) error
	Save(values ...*model.SupportApplication) error
	First() (*model.SupportApplication, error)
	Take() (*model.SupportApplication, error)
	Last() (*model.SupportApplication, error)
	Find() ([]*model.SupportApplication, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SupportApplication, err error)
	FindInBatches(result *[]*model.SupportApplication, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SupportApplication) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISupportApplicationDo
	Assign(attrs ...field.AssignExpr) ISupportApplicationDo
	Joins(fields ...field.RelationField) ISupportApplicationDo
	Preload(fields ...field.RelationField) ISupportApplicationDo
	FirstOrInit() (*model.SupportApplication, error)
	FirstOrCreate() (*model.SupportApplication, error)
	FindByPage(offset int, limit int) (result []*model.SupportApplication, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISupportApplicationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s supportApplicationDo) Debug() ISupportApplicationDo {
	return s.withDO(s.DO.Debug())
}

func (s supportApplicationDo) WithContext(ctx context.Context) ISupportApplicationDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s supportApplicationDo) ReadDB() ISupportApplicationDo {
	return s.Clauses(dbresolver.Read)
}

func (s supportApplicationDo) WriteDB() ISupportApplicationDo {
	return s.Clauses(dbresolver.Write)
}

func (s supportApplicationDo) Session(config *gorm.Session) ISupportApplicationDo {
	return s.withDO(s.DO.Session(config))
}

func (s supportApplicationDo) Clauses(conds ...clause.Expression) ISupportApplicationDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s supportApplicationDo) Returning(value interface{}, columns ...string) ISupportApplicationDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s supportApplicationDo) Not(conds ...gen.Condition) ISupportApplicationDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s supportApplicationDo) Or(conds ...gen.Condition) ISupportApplicationDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s supportApplicationDo) Select(conds ...field.Expr) ISupportApplicationDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s supportApplicationDo) Where(conds ...gen.Condition) ISupportApplicationDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s supportApplicationDo) Order(conds ...field.Expr) ISupportApplicationDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s supportApplicationDo) Distinct(cols ...field.Expr) ISupportApplicationDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s supportApplicationDo) Omit(cols ...field.Expr) ISupportApplicationDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s supportApplicationDo) Join(table schema.Tabler, on ...field.Expr) ISupportApplicationDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s supportApplicationDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISupportApplicationDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s supportApplicationDo) RightJoin(table schema.Tabler, on ...field.Expr) ISupportApplicationDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s supportApplicationDo) Group(cols ...field.Expr) ISupportApplicationDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s supportApplicationDo) Having(conds ...gen.Condition) ISupportApplicationDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s supportApplicationDo) Limit(limit int) ISupportApplicationDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s supportApplicationDo) Offset(offset int) ISupportApplicationDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s supportApplicationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISupportApplicationDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s supportApplicationDo) Unscoped() ISupportApplicationDo {
	return s.withDO(s.DO.Unscoped())
}

func (s supportApplicationDo) Create(values ...*model.SupportApplication) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s supportApplicationDo) CreateInBatches(values []*model.SupportApplication, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s supportApplicationDo) Save(values ...*model.SupportApplication) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s supportApplicationDo) First() (*model.SupportApplication, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SupportApplication), nil
	}
}

func (s supportApplicationDo) Take() (*model.SupportApplication, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SupportApplication), nil
	}
}

func (s supportApplicationDo) Last() (*model.SupportApplication, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SupportApplication), nil
	}
}

func (s supportApplicationDo) Find() ([]*model.SupportApplication, error) {
	result, err := s.DO.Find()
	return result.([]*model.SupportApplication), err
}

func (s supportApplicationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SupportApplication, err error) {
	buf := make([]*model.SupportApplication, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s supportApplicationDo) FindInBatches(result *[]*model.SupportApplication, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s supportApplicationDo) Attrs(attrs ...field.AssignExpr) ISupportApplicationDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s supportApplicationDo) Assign(attrs ...field.AssignExpr) ISupportApplicationDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s supportApplicationDo) Joins(fields ...field.RelationField) ISupportApplicationDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s supportApplicationDo) Preload(fields ...field.RelationField) ISupportApplicationDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s supportApplicationDo) FirstOrInit() (*model.SupportApplication, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SupportApplication), nil
	}
}

func (s supportApplicationDo) FirstOrCreate() (*model.SupportApplication, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SupportApplication), nil
	}
}

func (s supportApplicationDo) FindByPage(offset int, limit int) (result []*model.SupportApplication, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s supportApplicationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s supportApplicationDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s supportApplicationDo) Delete(models ...*model.SupportApplication) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *supportApplicationDo) withDO(do gen.Dao) *supportApplicationDo {
	s.DO = *do.(*gen.DO)
	return s
}
