// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/AI1411/fullstack-react-go/internal/domain/model"
)

func newFacilityEquipment(db *gorm.DB, opts ...gen.DOOption) facilityEquipment {
	_facilityEquipment := facilityEquipment{}

	_facilityEquipment.facilityEquipmentDo.UseDB(db, opts...)
	_facilityEquipment.facilityEquipmentDo.UseModel(&model.FacilityEquipment{})

	tableName := _facilityEquipment.facilityEquipmentDo.TableName()
	_facilityEquipment.ALL = field.NewAsterisk(tableName)
	_facilityEquipment.ID = field.NewInt32(tableName, "id")
	_facilityEquipment.Name = field.NewString(tableName, "name")
	_facilityEquipment.FacilityTypeID = field.NewInt32(tableName, "facility_type_id")
	_facilityEquipment.ModelNumber = field.NewString(tableName, "model_number")
	_facilityEquipment.Manufacturer = field.NewString(tableName, "manufacturer")
	_facilityEquipment.InstallationDate = field.NewTime(tableName, "installation_date")
	_facilityEquipment.Status = field.NewString(tableName, "status")
	_facilityEquipment.LocationDescription = field.NewString(tableName, "location_description")
	_facilityEquipment.LocationLatitude = field.NewFloat64(tableName, "location_latitude")
	_facilityEquipment.LocationLongitude = field.NewFloat64(tableName, "location_longitude")
	_facilityEquipment.Notes = field.NewString(tableName, "notes")
	_facilityEquipment.CreatedAt = field.NewTime(tableName, "created_at")
	_facilityEquipment.UpdatedAt = field.NewTime(tableName, "updated_at")
	_facilityEquipment.DeletedAt = field.NewField(tableName, "deleted_at")
	_facilityEquipment.FacilityType = facilityEquipmentBelongsToFacilityType{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("FacilityType", "model.FacilityType"),
	}

	_facilityEquipment.fillFieldMap()

	return _facilityEquipment
}

type facilityEquipment struct {
	facilityEquipmentDo

	ALL                 field.Asterisk
	ID                  field.Int32   // 施設設備ID - 主キー
	Name                field.String  // 施設設備名 - 施設設備の名称
	FacilityTypeID      field.Int32   // 施設種別ID - 施設設備の種別
	ModelNumber         field.String  // 型番 - 施設設備の型番
	Manufacturer        field.String  // メーカー - 施設設備のメーカー
	InstallationDate    field.Time    // 設置日 - 施設設備の設置日
	Status              field.String  // 状態 - 施設設備の稼働状態
	LocationDescription field.String  // 設置場所説明 - 施設設備の設置場所の説明
	LocationLatitude    field.Float64 // 位置（緯度） - 施設設備の緯度
	LocationLongitude   field.Float64 // 位置（経度） - 施設設備の経度
	Notes               field.String  // 備考 - 施設設備に関する備考やメモ
	CreatedAt           field.Time    // 作成日時 - レコード作成日時
	UpdatedAt           field.Time    // 更新日時 - レコード最終更新日時
	DeletedAt           field.Field   // 削除日時 - 論理削除用のタイムスタンプ
	FacilityType        facilityEquipmentBelongsToFacilityType

	fieldMap map[string]field.Expr
}

func (f facilityEquipment) Table(newTableName string) *facilityEquipment {
	f.facilityEquipmentDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f facilityEquipment) As(alias string) *facilityEquipment {
	f.facilityEquipmentDo.DO = *(f.facilityEquipmentDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *facilityEquipment) updateTableName(table string) *facilityEquipment {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt32(table, "id")
	f.Name = field.NewString(table, "name")
	f.FacilityTypeID = field.NewInt32(table, "facility_type_id")
	f.ModelNumber = field.NewString(table, "model_number")
	f.Manufacturer = field.NewString(table, "manufacturer")
	f.InstallationDate = field.NewTime(table, "installation_date")
	f.Status = field.NewString(table, "status")
	f.LocationDescription = field.NewString(table, "location_description")
	f.LocationLatitude = field.NewFloat64(table, "location_latitude")
	f.LocationLongitude = field.NewFloat64(table, "location_longitude")
	f.Notes = field.NewString(table, "notes")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")
	f.DeletedAt = field.NewField(table, "deleted_at")

	f.fillFieldMap()

	return f
}

func (f *facilityEquipment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *facilityEquipment) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 15)
	f.fieldMap["id"] = f.ID
	f.fieldMap["name"] = f.Name
	f.fieldMap["facility_type_id"] = f.FacilityTypeID
	f.fieldMap["model_number"] = f.ModelNumber
	f.fieldMap["manufacturer"] = f.Manufacturer
	f.fieldMap["installation_date"] = f.InstallationDate
	f.fieldMap["status"] = f.Status
	f.fieldMap["location_description"] = f.LocationDescription
	f.fieldMap["location_latitude"] = f.LocationLatitude
	f.fieldMap["location_longitude"] = f.LocationLongitude
	f.fieldMap["notes"] = f.Notes
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["deleted_at"] = f.DeletedAt

}

func (f facilityEquipment) clone(db *gorm.DB) facilityEquipment {
	f.facilityEquipmentDo.ReplaceConnPool(db.Statement.ConnPool)
	f.FacilityType.db = db.Session(&gorm.Session{Initialized: true})
	f.FacilityType.db.Statement.ConnPool = db.Statement.ConnPool
	return f
}

func (f facilityEquipment) replaceDB(db *gorm.DB) facilityEquipment {
	f.facilityEquipmentDo.ReplaceDB(db)
	f.FacilityType.db = db.Session(&gorm.Session{})
	return f
}

type facilityEquipmentBelongsToFacilityType struct {
	db *gorm.DB

	field.RelationField
}

func (a facilityEquipmentBelongsToFacilityType) Where(conds ...field.Expr) *facilityEquipmentBelongsToFacilityType {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a facilityEquipmentBelongsToFacilityType) WithContext(ctx context.Context) *facilityEquipmentBelongsToFacilityType {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a facilityEquipmentBelongsToFacilityType) Session(session *gorm.Session) *facilityEquipmentBelongsToFacilityType {
	a.db = a.db.Session(session)
	return &a
}

func (a facilityEquipmentBelongsToFacilityType) Model(m *model.FacilityEquipment) *facilityEquipmentBelongsToFacilityTypeTx {
	return &facilityEquipmentBelongsToFacilityTypeTx{a.db.Model(m).Association(a.Name())}
}

func (a facilityEquipmentBelongsToFacilityType) Unscoped() *facilityEquipmentBelongsToFacilityType {
	a.db = a.db.Unscoped()
	return &a
}

type facilityEquipmentBelongsToFacilityTypeTx struct{ tx *gorm.Association }

func (a facilityEquipmentBelongsToFacilityTypeTx) Find() (result *model.FacilityType, err error) {
	return result, a.tx.Find(&result)
}

func (a facilityEquipmentBelongsToFacilityTypeTx) Append(values ...*model.FacilityType) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a facilityEquipmentBelongsToFacilityTypeTx) Replace(values ...*model.FacilityType) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a facilityEquipmentBelongsToFacilityTypeTx) Delete(values ...*model.FacilityType) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a facilityEquipmentBelongsToFacilityTypeTx) Clear() error {
	return a.tx.Clear()
}

func (a facilityEquipmentBelongsToFacilityTypeTx) Count() int64 {
	return a.tx.Count()
}

func (a facilityEquipmentBelongsToFacilityTypeTx) Unscoped() *facilityEquipmentBelongsToFacilityTypeTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type facilityEquipmentDo struct{ gen.DO }

type IFacilityEquipmentDo interface {
	gen.SubQuery
	Debug() IFacilityEquipmentDo
	WithContext(ctx context.Context) IFacilityEquipmentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFacilityEquipmentDo
	WriteDB() IFacilityEquipmentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFacilityEquipmentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFacilityEquipmentDo
	Not(conds ...gen.Condition) IFacilityEquipmentDo
	Or(conds ...gen.Condition) IFacilityEquipmentDo
	Select(conds ...field.Expr) IFacilityEquipmentDo
	Where(conds ...gen.Condition) IFacilityEquipmentDo
	Order(conds ...field.Expr) IFacilityEquipmentDo
	Distinct(cols ...field.Expr) IFacilityEquipmentDo
	Omit(cols ...field.Expr) IFacilityEquipmentDo
	Join(table schema.Tabler, on ...field.Expr) IFacilityEquipmentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFacilityEquipmentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFacilityEquipmentDo
	Group(cols ...field.Expr) IFacilityEquipmentDo
	Having(conds ...gen.Condition) IFacilityEquipmentDo
	Limit(limit int) IFacilityEquipmentDo
	Offset(offset int) IFacilityEquipmentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFacilityEquipmentDo
	Unscoped() IFacilityEquipmentDo
	Create(values ...*model.FacilityEquipment) error
	CreateInBatches(values []*model.FacilityEquipment, batchSize int) error
	Save(values ...*model.FacilityEquipment) error
	First() (*model.FacilityEquipment, error)
	Take() (*model.FacilityEquipment, error)
	Last() (*model.FacilityEquipment, error)
	Find() ([]*model.FacilityEquipment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FacilityEquipment, err error)
	FindInBatches(result *[]*model.FacilityEquipment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FacilityEquipment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFacilityEquipmentDo
	Assign(attrs ...field.AssignExpr) IFacilityEquipmentDo
	Joins(fields ...field.RelationField) IFacilityEquipmentDo
	Preload(fields ...field.RelationField) IFacilityEquipmentDo
	FirstOrInit() (*model.FacilityEquipment, error)
	FirstOrCreate() (*model.FacilityEquipment, error)
	FindByPage(offset int, limit int) (result []*model.FacilityEquipment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFacilityEquipmentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f facilityEquipmentDo) Debug() IFacilityEquipmentDo {
	return f.withDO(f.DO.Debug())
}

func (f facilityEquipmentDo) WithContext(ctx context.Context) IFacilityEquipmentDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f facilityEquipmentDo) ReadDB() IFacilityEquipmentDo {
	return f.Clauses(dbresolver.Read)
}

func (f facilityEquipmentDo) WriteDB() IFacilityEquipmentDo {
	return f.Clauses(dbresolver.Write)
}

func (f facilityEquipmentDo) Session(config *gorm.Session) IFacilityEquipmentDo {
	return f.withDO(f.DO.Session(config))
}

func (f facilityEquipmentDo) Clauses(conds ...clause.Expression) IFacilityEquipmentDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f facilityEquipmentDo) Returning(value interface{}, columns ...string) IFacilityEquipmentDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f facilityEquipmentDo) Not(conds ...gen.Condition) IFacilityEquipmentDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f facilityEquipmentDo) Or(conds ...gen.Condition) IFacilityEquipmentDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f facilityEquipmentDo) Select(conds ...field.Expr) IFacilityEquipmentDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f facilityEquipmentDo) Where(conds ...gen.Condition) IFacilityEquipmentDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f facilityEquipmentDo) Order(conds ...field.Expr) IFacilityEquipmentDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f facilityEquipmentDo) Distinct(cols ...field.Expr) IFacilityEquipmentDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f facilityEquipmentDo) Omit(cols ...field.Expr) IFacilityEquipmentDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f facilityEquipmentDo) Join(table schema.Tabler, on ...field.Expr) IFacilityEquipmentDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f facilityEquipmentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFacilityEquipmentDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f facilityEquipmentDo) RightJoin(table schema.Tabler, on ...field.Expr) IFacilityEquipmentDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f facilityEquipmentDo) Group(cols ...field.Expr) IFacilityEquipmentDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f facilityEquipmentDo) Having(conds ...gen.Condition) IFacilityEquipmentDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f facilityEquipmentDo) Limit(limit int) IFacilityEquipmentDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f facilityEquipmentDo) Offset(offset int) IFacilityEquipmentDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f facilityEquipmentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFacilityEquipmentDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f facilityEquipmentDo) Unscoped() IFacilityEquipmentDo {
	return f.withDO(f.DO.Unscoped())
}

func (f facilityEquipmentDo) Create(values ...*model.FacilityEquipment) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f facilityEquipmentDo) CreateInBatches(values []*model.FacilityEquipment, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f facilityEquipmentDo) Save(values ...*model.FacilityEquipment) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f facilityEquipmentDo) First() (*model.FacilityEquipment, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FacilityEquipment), nil
	}
}

func (f facilityEquipmentDo) Take() (*model.FacilityEquipment, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FacilityEquipment), nil
	}
}

func (f facilityEquipmentDo) Last() (*model.FacilityEquipment, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FacilityEquipment), nil
	}
}

func (f facilityEquipmentDo) Find() ([]*model.FacilityEquipment, error) {
	result, err := f.DO.Find()
	return result.([]*model.FacilityEquipment), err
}

func (f facilityEquipmentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FacilityEquipment, err error) {
	buf := make([]*model.FacilityEquipment, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f facilityEquipmentDo) FindInBatches(result *[]*model.FacilityEquipment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f facilityEquipmentDo) Attrs(attrs ...field.AssignExpr) IFacilityEquipmentDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f facilityEquipmentDo) Assign(attrs ...field.AssignExpr) IFacilityEquipmentDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f facilityEquipmentDo) Joins(fields ...field.RelationField) IFacilityEquipmentDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f facilityEquipmentDo) Preload(fields ...field.RelationField) IFacilityEquipmentDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f facilityEquipmentDo) FirstOrInit() (*model.FacilityEquipment, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FacilityEquipment), nil
	}
}

func (f facilityEquipmentDo) FirstOrCreate() (*model.FacilityEquipment, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FacilityEquipment), nil
	}
}

func (f facilityEquipmentDo) FindByPage(offset int, limit int) (result []*model.FacilityEquipment, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f facilityEquipmentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f facilityEquipmentDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f facilityEquipmentDo) Delete(models ...*model.FacilityEquipment) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *facilityEquipmentDo) withDO(do gen.Dao) *facilityEquipmentDo {
	f.DO = *do.(*gen.DO)
	return f
}
