// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/AI1411/fullstack-react-go/internal/domain/model"
)

func newEmailHistory(db *gorm.DB, opts ...gen.DOOption) emailHistory {
	_emailHistory := emailHistory{}

	_emailHistory.emailHistoryDo.UseDB(db, opts...)
	_emailHistory.emailHistoryDo.UseModel(&model.EmailHistory{})

	tableName := _emailHistory.emailHistoryDo.TableName()
	_emailHistory.ALL = field.NewAsterisk(tableName)
	_emailHistory.ID = field.NewInt64(tableName, "id")
	_emailHistory.UserID = field.NewString(tableName, "user_id")
	_emailHistory.Email = field.NewString(tableName, "email")
	_emailHistory.Subject = field.NewString(tableName, "subject")
	_emailHistory.EmailType = field.NewString(tableName, "email_type")
	_emailHistory.Provider = field.NewString(tableName, "provider")
	_emailHistory.ErrorMessage = field.NewString(tableName, "error_message")
	_emailHistory.SentAt = field.NewTime(tableName, "sent_at")
	_emailHistory.Status = field.NewString(tableName, "status")
	_emailHistory.CreatedAt = field.NewTime(tableName, "created_at")
	_emailHistory.UpdatedAt = field.NewTime(tableName, "updated_at")
	_emailHistory.User = emailHistoryBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.User"),
	}

	_emailHistory.fillFieldMap()

	return _emailHistory
}

type emailHistory struct {
	emailHistoryDo

	ALL          field.Asterisk
	ID           field.Int64  // メール履歴ID
	UserID       field.String // ユーザーID
	Email        field.String // 送信先メールアドレス
	Subject      field.String // メール件名
	EmailType    field.String // メール種別（welcome, verification, password_reset等）
	Provider     field.String // メール送信プロバイダー（smtp, sendgrid等）
	ErrorMessage field.String // エラーメッセージ（送信失敗時）
	SentAt       field.Time   // メール送信日時
	Status       field.String // メール送信ステータス（sent, failed, pending等）
	CreatedAt    field.Time   // 作成日時
	UpdatedAt    field.Time   // 更新日時
	User         emailHistoryBelongsToUser

	fieldMap map[string]field.Expr
}

func (e emailHistory) Table(newTableName string) *emailHistory {
	e.emailHistoryDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e emailHistory) As(alias string) *emailHistory {
	e.emailHistoryDo.DO = *(e.emailHistoryDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *emailHistory) updateTableName(table string) *emailHistory {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.UserID = field.NewString(table, "user_id")
	e.Email = field.NewString(table, "email")
	e.Subject = field.NewString(table, "subject")
	e.EmailType = field.NewString(table, "email_type")
	e.Provider = field.NewString(table, "provider")
	e.ErrorMessage = field.NewString(table, "error_message")
	e.SentAt = field.NewTime(table, "sent_at")
	e.Status = field.NewString(table, "status")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")

	e.fillFieldMap()

	return e
}

func (e *emailHistory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *emailHistory) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 12)
	e.fieldMap["id"] = e.ID
	e.fieldMap["user_id"] = e.UserID
	e.fieldMap["email"] = e.Email
	e.fieldMap["subject"] = e.Subject
	e.fieldMap["email_type"] = e.EmailType
	e.fieldMap["provider"] = e.Provider
	e.fieldMap["error_message"] = e.ErrorMessage
	e.fieldMap["sent_at"] = e.SentAt
	e.fieldMap["status"] = e.Status
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt

}

func (e emailHistory) clone(db *gorm.DB) emailHistory {
	e.emailHistoryDo.ReplaceConnPool(db.Statement.ConnPool)
	e.User.db = db.Session(&gorm.Session{Initialized: true})
	e.User.db.Statement.ConnPool = db.Statement.ConnPool
	return e
}

func (e emailHistory) replaceDB(db *gorm.DB) emailHistory {
	e.emailHistoryDo.ReplaceDB(db)
	e.User.db = db.Session(&gorm.Session{})
	return e
}

type emailHistoryBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a emailHistoryBelongsToUser) Where(conds ...field.Expr) *emailHistoryBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a emailHistoryBelongsToUser) WithContext(ctx context.Context) *emailHistoryBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a emailHistoryBelongsToUser) Session(session *gorm.Session) *emailHistoryBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a emailHistoryBelongsToUser) Model(m *model.EmailHistory) *emailHistoryBelongsToUserTx {
	return &emailHistoryBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

func (a emailHistoryBelongsToUser) Unscoped() *emailHistoryBelongsToUser {
	a.db = a.db.Unscoped()
	return &a
}

type emailHistoryBelongsToUserTx struct{ tx *gorm.Association }

func (a emailHistoryBelongsToUserTx) Find() (result *model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a emailHistoryBelongsToUserTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a emailHistoryBelongsToUserTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a emailHistoryBelongsToUserTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a emailHistoryBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a emailHistoryBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

func (a emailHistoryBelongsToUserTx) Unscoped() *emailHistoryBelongsToUserTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type emailHistoryDo struct{ gen.DO }

type IEmailHistoryDo interface {
	gen.SubQuery
	Debug() IEmailHistoryDo
	WithContext(ctx context.Context) IEmailHistoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEmailHistoryDo
	WriteDB() IEmailHistoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEmailHistoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEmailHistoryDo
	Not(conds ...gen.Condition) IEmailHistoryDo
	Or(conds ...gen.Condition) IEmailHistoryDo
	Select(conds ...field.Expr) IEmailHistoryDo
	Where(conds ...gen.Condition) IEmailHistoryDo
	Order(conds ...field.Expr) IEmailHistoryDo
	Distinct(cols ...field.Expr) IEmailHistoryDo
	Omit(cols ...field.Expr) IEmailHistoryDo
	Join(table schema.Tabler, on ...field.Expr) IEmailHistoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEmailHistoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEmailHistoryDo
	Group(cols ...field.Expr) IEmailHistoryDo
	Having(conds ...gen.Condition) IEmailHistoryDo
	Limit(limit int) IEmailHistoryDo
	Offset(offset int) IEmailHistoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEmailHistoryDo
	Unscoped() IEmailHistoryDo
	Create(values ...*model.EmailHistory) error
	CreateInBatches(values []*model.EmailHistory, batchSize int) error
	Save(values ...*model.EmailHistory) error
	First() (*model.EmailHistory, error)
	Take() (*model.EmailHistory, error)
	Last() (*model.EmailHistory, error)
	Find() ([]*model.EmailHistory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EmailHistory, err error)
	FindInBatches(result *[]*model.EmailHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EmailHistory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEmailHistoryDo
	Assign(attrs ...field.AssignExpr) IEmailHistoryDo
	Joins(fields ...field.RelationField) IEmailHistoryDo
	Preload(fields ...field.RelationField) IEmailHistoryDo
	FirstOrInit() (*model.EmailHistory, error)
	FirstOrCreate() (*model.EmailHistory, error)
	FindByPage(offset int, limit int) (result []*model.EmailHistory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEmailHistoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e emailHistoryDo) Debug() IEmailHistoryDo {
	return e.withDO(e.DO.Debug())
}

func (e emailHistoryDo) WithContext(ctx context.Context) IEmailHistoryDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e emailHistoryDo) ReadDB() IEmailHistoryDo {
	return e.Clauses(dbresolver.Read)
}

func (e emailHistoryDo) WriteDB() IEmailHistoryDo {
	return e.Clauses(dbresolver.Write)
}

func (e emailHistoryDo) Session(config *gorm.Session) IEmailHistoryDo {
	return e.withDO(e.DO.Session(config))
}

func (e emailHistoryDo) Clauses(conds ...clause.Expression) IEmailHistoryDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e emailHistoryDo) Returning(value interface{}, columns ...string) IEmailHistoryDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e emailHistoryDo) Not(conds ...gen.Condition) IEmailHistoryDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e emailHistoryDo) Or(conds ...gen.Condition) IEmailHistoryDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e emailHistoryDo) Select(conds ...field.Expr) IEmailHistoryDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e emailHistoryDo) Where(conds ...gen.Condition) IEmailHistoryDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e emailHistoryDo) Order(conds ...field.Expr) IEmailHistoryDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e emailHistoryDo) Distinct(cols ...field.Expr) IEmailHistoryDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e emailHistoryDo) Omit(cols ...field.Expr) IEmailHistoryDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e emailHistoryDo) Join(table schema.Tabler, on ...field.Expr) IEmailHistoryDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e emailHistoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEmailHistoryDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e emailHistoryDo) RightJoin(table schema.Tabler, on ...field.Expr) IEmailHistoryDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e emailHistoryDo) Group(cols ...field.Expr) IEmailHistoryDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e emailHistoryDo) Having(conds ...gen.Condition) IEmailHistoryDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e emailHistoryDo) Limit(limit int) IEmailHistoryDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e emailHistoryDo) Offset(offset int) IEmailHistoryDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e emailHistoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEmailHistoryDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e emailHistoryDo) Unscoped() IEmailHistoryDo {
	return e.withDO(e.DO.Unscoped())
}

func (e emailHistoryDo) Create(values ...*model.EmailHistory) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e emailHistoryDo) CreateInBatches(values []*model.EmailHistory, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e emailHistoryDo) Save(values ...*model.EmailHistory) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e emailHistoryDo) First() (*model.EmailHistory, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmailHistory), nil
	}
}

func (e emailHistoryDo) Take() (*model.EmailHistory, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmailHistory), nil
	}
}

func (e emailHistoryDo) Last() (*model.EmailHistory, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmailHistory), nil
	}
}

func (e emailHistoryDo) Find() ([]*model.EmailHistory, error) {
	result, err := e.DO.Find()
	return result.([]*model.EmailHistory), err
}

func (e emailHistoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EmailHistory, err error) {
	buf := make([]*model.EmailHistory, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e emailHistoryDo) FindInBatches(result *[]*model.EmailHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e emailHistoryDo) Attrs(attrs ...field.AssignExpr) IEmailHistoryDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e emailHistoryDo) Assign(attrs ...field.AssignExpr) IEmailHistoryDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e emailHistoryDo) Joins(fields ...field.RelationField) IEmailHistoryDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e emailHistoryDo) Preload(fields ...field.RelationField) IEmailHistoryDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e emailHistoryDo) FirstOrInit() (*model.EmailHistory, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmailHistory), nil
	}
}

func (e emailHistoryDo) FirstOrCreate() (*model.EmailHistory, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmailHistory), nil
	}
}

func (e emailHistoryDo) FindByPage(offset int, limit int) (result []*model.EmailHistory, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e emailHistoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e emailHistoryDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e emailHistoryDo) Delete(models ...*model.EmailHistory) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *emailHistoryDo) withDO(do gen.Dao) *emailHistoryDo {
	e.DO = *do.(*gen.DO)
	return e
}
