// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                = new(Query)
	Disaster         *disaster
	DisasterDocument *disasterDocument
	Prefecture       *prefecture
	Region           *region
	Timeline         *timeline
	User             *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Disaster = &Q.Disaster
	DisasterDocument = &Q.DisasterDocument
	Prefecture = &Q.Prefecture
	Region = &Q.Region
	Timeline = &Q.Timeline
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:               db,
		Disaster:         newDisaster(db, opts...),
		DisasterDocument: newDisasterDocument(db, opts...),
		Prefecture:       newPrefecture(db, opts...),
		Region:           newRegion(db, opts...),
		Timeline:         newTimeline(db, opts...),
		User:             newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Disaster         disaster
	DisasterDocument disasterDocument
	Prefecture       prefecture
	Region           region
	Timeline         timeline
	User             user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		Disaster:         q.Disaster.clone(db),
		DisasterDocument: q.DisasterDocument.clone(db),
		Prefecture:       q.Prefecture.clone(db),
		Region:           q.Region.clone(db),
		Timeline:         q.Timeline.clone(db),
		User:             q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		Disaster:         q.Disaster.replaceDB(db),
		DisasterDocument: q.DisasterDocument.replaceDB(db),
		Prefecture:       q.Prefecture.replaceDB(db),
		Region:           q.Region.replaceDB(db),
		Timeline:         q.Timeline.replaceDB(db),
		User:             q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Disaster         IDisasterDo
	DisasterDocument IDisasterDocumentDo
	Prefecture       IPrefectureDo
	Region           IRegionDo
	Timeline         ITimelineDo
	User             IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Disaster:         q.Disaster.WithContext(ctx),
		DisasterDocument: q.DisasterDocument.WithContext(ctx),
		Prefecture:       q.Prefecture.WithContext(ctx),
		Region:           q.Region.WithContext(ctx),
		Timeline:         q.Timeline.WithContext(ctx),
		User:             q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
