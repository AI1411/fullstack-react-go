// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/AI1411/fullstack-react-go/internal/domain/model"
)

func newFacilityType(db *gorm.DB, opts ...gen.DOOption) facilityType {
	_facilityType := facilityType{}

	_facilityType.facilityTypeDo.UseDB(db, opts...)
	_facilityType.facilityTypeDo.UseModel(&model.FacilityType{})

	tableName := _facilityType.facilityTypeDo.TableName()
	_facilityType.ALL = field.NewAsterisk(tableName)
	_facilityType.ID = field.NewInt32(tableName, "id")
	_facilityType.Name = field.NewString(tableName, "name")
	_facilityType.Description = field.NewString(tableName, "description")
	_facilityType.CreatedAt = field.NewTime(tableName, "created_at")
	_facilityType.UpdatedAt = field.NewTime(tableName, "updated_at")

	_facilityType.fillFieldMap()

	return _facilityType
}

type facilityType struct {
	facilityTypeDo

	ALL         field.Asterisk
	ID          field.Int32  // 施設種別ID - 主キー
	Name        field.String // 施設種別名 - 水路, ため池, 農道, ビニールハウスなど
	Description field.String // 説明 - 施設種別の詳細説明
	CreatedAt   field.Time   // 作成日時 - レコード作成日時
	UpdatedAt   field.Time   // 更新日時 - レコード最終更新日時

	fieldMap map[string]field.Expr
}

func (f facilityType) Table(newTableName string) *facilityType {
	f.facilityTypeDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f facilityType) As(alias string) *facilityType {
	f.facilityTypeDo.DO = *(f.facilityTypeDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *facilityType) updateTableName(table string) *facilityType {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt32(table, "id")
	f.Name = field.NewString(table, "name")
	f.Description = field.NewString(table, "description")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")

	f.fillFieldMap()

	return f
}

func (f *facilityType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *facilityType) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 5)
	f.fieldMap["id"] = f.ID
	f.fieldMap["name"] = f.Name
	f.fieldMap["description"] = f.Description
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
}

func (f facilityType) clone(db *gorm.DB) facilityType {
	f.facilityTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f facilityType) replaceDB(db *gorm.DB) facilityType {
	f.facilityTypeDo.ReplaceDB(db)
	return f
}

type facilityTypeDo struct{ gen.DO }

type IFacilityTypeDo interface {
	gen.SubQuery
	Debug() IFacilityTypeDo
	WithContext(ctx context.Context) IFacilityTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFacilityTypeDo
	WriteDB() IFacilityTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFacilityTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFacilityTypeDo
	Not(conds ...gen.Condition) IFacilityTypeDo
	Or(conds ...gen.Condition) IFacilityTypeDo
	Select(conds ...field.Expr) IFacilityTypeDo
	Where(conds ...gen.Condition) IFacilityTypeDo
	Order(conds ...field.Expr) IFacilityTypeDo
	Distinct(cols ...field.Expr) IFacilityTypeDo
	Omit(cols ...field.Expr) IFacilityTypeDo
	Join(table schema.Tabler, on ...field.Expr) IFacilityTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFacilityTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFacilityTypeDo
	Group(cols ...field.Expr) IFacilityTypeDo
	Having(conds ...gen.Condition) IFacilityTypeDo
	Limit(limit int) IFacilityTypeDo
	Offset(offset int) IFacilityTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFacilityTypeDo
	Unscoped() IFacilityTypeDo
	Create(values ...*model.FacilityType) error
	CreateInBatches(values []*model.FacilityType, batchSize int) error
	Save(values ...*model.FacilityType) error
	First() (*model.FacilityType, error)
	Take() (*model.FacilityType, error)
	Last() (*model.FacilityType, error)
	Find() ([]*model.FacilityType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FacilityType, err error)
	FindInBatches(result *[]*model.FacilityType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FacilityType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFacilityTypeDo
	Assign(attrs ...field.AssignExpr) IFacilityTypeDo
	Joins(fields ...field.RelationField) IFacilityTypeDo
	Preload(fields ...field.RelationField) IFacilityTypeDo
	FirstOrInit() (*model.FacilityType, error)
	FirstOrCreate() (*model.FacilityType, error)
	FindByPage(offset int, limit int) (result []*model.FacilityType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFacilityTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f facilityTypeDo) Debug() IFacilityTypeDo {
	return f.withDO(f.DO.Debug())
}

func (f facilityTypeDo) WithContext(ctx context.Context) IFacilityTypeDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f facilityTypeDo) ReadDB() IFacilityTypeDo {
	return f.Clauses(dbresolver.Read)
}

func (f facilityTypeDo) WriteDB() IFacilityTypeDo {
	return f.Clauses(dbresolver.Write)
}

func (f facilityTypeDo) Session(config *gorm.Session) IFacilityTypeDo {
	return f.withDO(f.DO.Session(config))
}

func (f facilityTypeDo) Clauses(conds ...clause.Expression) IFacilityTypeDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f facilityTypeDo) Returning(value interface{}, columns ...string) IFacilityTypeDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f facilityTypeDo) Not(conds ...gen.Condition) IFacilityTypeDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f facilityTypeDo) Or(conds ...gen.Condition) IFacilityTypeDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f facilityTypeDo) Select(conds ...field.Expr) IFacilityTypeDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f facilityTypeDo) Where(conds ...gen.Condition) IFacilityTypeDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f facilityTypeDo) Order(conds ...field.Expr) IFacilityTypeDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f facilityTypeDo) Distinct(cols ...field.Expr) IFacilityTypeDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f facilityTypeDo) Omit(cols ...field.Expr) IFacilityTypeDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f facilityTypeDo) Join(table schema.Tabler, on ...field.Expr) IFacilityTypeDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f facilityTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFacilityTypeDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f facilityTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IFacilityTypeDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f facilityTypeDo) Group(cols ...field.Expr) IFacilityTypeDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f facilityTypeDo) Having(conds ...gen.Condition) IFacilityTypeDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f facilityTypeDo) Limit(limit int) IFacilityTypeDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f facilityTypeDo) Offset(offset int) IFacilityTypeDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f facilityTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFacilityTypeDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f facilityTypeDo) Unscoped() IFacilityTypeDo {
	return f.withDO(f.DO.Unscoped())
}

func (f facilityTypeDo) Create(values ...*model.FacilityType) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f facilityTypeDo) CreateInBatches(values []*model.FacilityType, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f facilityTypeDo) Save(values ...*model.FacilityType) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f facilityTypeDo) First() (*model.FacilityType, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FacilityType), nil
	}
}

func (f facilityTypeDo) Take() (*model.FacilityType, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FacilityType), nil
	}
}

func (f facilityTypeDo) Last() (*model.FacilityType, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FacilityType), nil
	}
}

func (f facilityTypeDo) Find() ([]*model.FacilityType, error) {
	result, err := f.DO.Find()
	return result.([]*model.FacilityType), err
}

func (f facilityTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FacilityType, err error) {
	buf := make([]*model.FacilityType, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f facilityTypeDo) FindInBatches(result *[]*model.FacilityType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f facilityTypeDo) Attrs(attrs ...field.AssignExpr) IFacilityTypeDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f facilityTypeDo) Assign(attrs ...field.AssignExpr) IFacilityTypeDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f facilityTypeDo) Joins(fields ...field.RelationField) IFacilityTypeDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f facilityTypeDo) Preload(fields ...field.RelationField) IFacilityTypeDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f facilityTypeDo) FirstOrInit() (*model.FacilityType, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FacilityType), nil
	}
}

func (f facilityTypeDo) FirstOrCreate() (*model.FacilityType, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FacilityType), nil
	}
}

func (f facilityTypeDo) FindByPage(offset int, limit int) (result []*model.FacilityType, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f facilityTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f facilityTypeDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f facilityTypeDo) Delete(models ...*model.FacilityType) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *facilityTypeDo) withDO(do gen.Dao) *facilityTypeDo {
	f.DO = *do.(*gen.DO)
	return f
}
