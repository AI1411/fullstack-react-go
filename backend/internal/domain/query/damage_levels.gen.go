// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/AI1411/fullstack-react-go/internal/domain/model"
)

func newDamageLevel(db *gorm.DB, opts ...gen.DOOption) damageLevel {
	_damageLevel := damageLevel{}

	_damageLevel.damageLevelDo.UseDB(db, opts...)
	_damageLevel.damageLevelDo.UseModel(&model.DamageLevel{})

	tableName := _damageLevel.damageLevelDo.TableName()
	_damageLevel.ALL = field.NewAsterisk(tableName)
	_damageLevel.ID = field.NewInt32(tableName, "id")
	_damageLevel.Name = field.NewString(tableName, "name")
	_damageLevel.Description = field.NewString(tableName, "description")
	_damageLevel.CreatedAt = field.NewTime(tableName, "created_at")
	_damageLevel.UpdatedAt = field.NewTime(tableName, "updated_at")

	_damageLevel.fillFieldMap()

	return _damageLevel
}

type damageLevel struct {
	damageLevelDo

	ALL         field.Asterisk
	ID          field.Int32  // 被害程度ID - 主キー
	Name        field.String // 被害程度名 - 軽微, 中程度, 深刻, 甚大など
	Description field.String // 説明 - 被害程度の詳細説明
	CreatedAt   field.Time   // 作成日時 - レコード作成日時
	UpdatedAt   field.Time   // 更新日時 - レコード最終更新日時

	fieldMap map[string]field.Expr
}

func (d damageLevel) Table(newTableName string) *damageLevel {
	d.damageLevelDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d damageLevel) As(alias string) *damageLevel {
	d.damageLevelDo.DO = *(d.damageLevelDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *damageLevel) updateTableName(table string) *damageLevel {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt32(table, "id")
	d.Name = field.NewString(table, "name")
	d.Description = field.NewString(table, "description")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")

	d.fillFieldMap()

	return d
}

func (d *damageLevel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *damageLevel) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 5)
	d.fieldMap["id"] = d.ID
	d.fieldMap["name"] = d.Name
	d.fieldMap["description"] = d.Description
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
}

func (d damageLevel) clone(db *gorm.DB) damageLevel {
	d.damageLevelDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d damageLevel) replaceDB(db *gorm.DB) damageLevel {
	d.damageLevelDo.ReplaceDB(db)
	return d
}

type damageLevelDo struct{ gen.DO }

type IDamageLevelDo interface {
	gen.SubQuery
	Debug() IDamageLevelDo
	WithContext(ctx context.Context) IDamageLevelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDamageLevelDo
	WriteDB() IDamageLevelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDamageLevelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDamageLevelDo
	Not(conds ...gen.Condition) IDamageLevelDo
	Or(conds ...gen.Condition) IDamageLevelDo
	Select(conds ...field.Expr) IDamageLevelDo
	Where(conds ...gen.Condition) IDamageLevelDo
	Order(conds ...field.Expr) IDamageLevelDo
	Distinct(cols ...field.Expr) IDamageLevelDo
	Omit(cols ...field.Expr) IDamageLevelDo
	Join(table schema.Tabler, on ...field.Expr) IDamageLevelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDamageLevelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDamageLevelDo
	Group(cols ...field.Expr) IDamageLevelDo
	Having(conds ...gen.Condition) IDamageLevelDo
	Limit(limit int) IDamageLevelDo
	Offset(offset int) IDamageLevelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDamageLevelDo
	Unscoped() IDamageLevelDo
	Create(values ...*model.DamageLevel) error
	CreateInBatches(values []*model.DamageLevel, batchSize int) error
	Save(values ...*model.DamageLevel) error
	First() (*model.DamageLevel, error)
	Take() (*model.DamageLevel, error)
	Last() (*model.DamageLevel, error)
	Find() ([]*model.DamageLevel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DamageLevel, err error)
	FindInBatches(result *[]*model.DamageLevel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DamageLevel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDamageLevelDo
	Assign(attrs ...field.AssignExpr) IDamageLevelDo
	Joins(fields ...field.RelationField) IDamageLevelDo
	Preload(fields ...field.RelationField) IDamageLevelDo
	FirstOrInit() (*model.DamageLevel, error)
	FirstOrCreate() (*model.DamageLevel, error)
	FindByPage(offset int, limit int) (result []*model.DamageLevel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDamageLevelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d damageLevelDo) Debug() IDamageLevelDo {
	return d.withDO(d.DO.Debug())
}

func (d damageLevelDo) WithContext(ctx context.Context) IDamageLevelDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d damageLevelDo) ReadDB() IDamageLevelDo {
	return d.Clauses(dbresolver.Read)
}

func (d damageLevelDo) WriteDB() IDamageLevelDo {
	return d.Clauses(dbresolver.Write)
}

func (d damageLevelDo) Session(config *gorm.Session) IDamageLevelDo {
	return d.withDO(d.DO.Session(config))
}

func (d damageLevelDo) Clauses(conds ...clause.Expression) IDamageLevelDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d damageLevelDo) Returning(value interface{}, columns ...string) IDamageLevelDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d damageLevelDo) Not(conds ...gen.Condition) IDamageLevelDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d damageLevelDo) Or(conds ...gen.Condition) IDamageLevelDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d damageLevelDo) Select(conds ...field.Expr) IDamageLevelDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d damageLevelDo) Where(conds ...gen.Condition) IDamageLevelDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d damageLevelDo) Order(conds ...field.Expr) IDamageLevelDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d damageLevelDo) Distinct(cols ...field.Expr) IDamageLevelDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d damageLevelDo) Omit(cols ...field.Expr) IDamageLevelDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d damageLevelDo) Join(table schema.Tabler, on ...field.Expr) IDamageLevelDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d damageLevelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDamageLevelDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d damageLevelDo) RightJoin(table schema.Tabler, on ...field.Expr) IDamageLevelDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d damageLevelDo) Group(cols ...field.Expr) IDamageLevelDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d damageLevelDo) Having(conds ...gen.Condition) IDamageLevelDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d damageLevelDo) Limit(limit int) IDamageLevelDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d damageLevelDo) Offset(offset int) IDamageLevelDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d damageLevelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDamageLevelDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d damageLevelDo) Unscoped() IDamageLevelDo {
	return d.withDO(d.DO.Unscoped())
}

func (d damageLevelDo) Create(values ...*model.DamageLevel) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d damageLevelDo) CreateInBatches(values []*model.DamageLevel, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d damageLevelDo) Save(values ...*model.DamageLevel) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d damageLevelDo) First() (*model.DamageLevel, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DamageLevel), nil
	}
}

func (d damageLevelDo) Take() (*model.DamageLevel, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DamageLevel), nil
	}
}

func (d damageLevelDo) Last() (*model.DamageLevel, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DamageLevel), nil
	}
}

func (d damageLevelDo) Find() ([]*model.DamageLevel, error) {
	result, err := d.DO.Find()
	return result.([]*model.DamageLevel), err
}

func (d damageLevelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DamageLevel, err error) {
	buf := make([]*model.DamageLevel, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d damageLevelDo) FindInBatches(result *[]*model.DamageLevel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d damageLevelDo) Attrs(attrs ...field.AssignExpr) IDamageLevelDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d damageLevelDo) Assign(attrs ...field.AssignExpr) IDamageLevelDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d damageLevelDo) Joins(fields ...field.RelationField) IDamageLevelDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d damageLevelDo) Preload(fields ...field.RelationField) IDamageLevelDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d damageLevelDo) FirstOrInit() (*model.DamageLevel, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DamageLevel), nil
	}
}

func (d damageLevelDo) FirstOrCreate() (*model.DamageLevel, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DamageLevel), nil
	}
}

func (d damageLevelDo) FindByPage(offset int, limit int) (result []*model.DamageLevel, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d damageLevelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d damageLevelDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d damageLevelDo) Delete(models ...*model.DamageLevel) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *damageLevelDo) withDO(do gen.Dao) *damageLevelDo {
	d.DO = *do.(*gen.DO)
	return d
}
