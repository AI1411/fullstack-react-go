// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/AI1411/fullstack-react-go/internal/domain/model"
)

func newDisasterDocument(db *gorm.DB, opts ...gen.DOOption) disasterDocument {
	_disasterDocument := disasterDocument{}

	_disasterDocument.disasterDocumentDo.UseDB(db, opts...)
	_disasterDocument.disasterDocumentDo.UseModel(&model.DisasterDocument{})

	tableName := _disasterDocument.disasterDocumentDo.TableName()
	_disasterDocument.ALL = field.NewAsterisk(tableName)
	_disasterDocument.ID = field.NewInt32(tableName, "id")
	_disasterDocument.DisasterID = field.NewString(tableName, "disaster_id")
	_disasterDocument.Title = field.NewString(tableName, "title")
	_disasterDocument.DocumentType = field.NewString(tableName, "document_type")
	_disasterDocument.FilePath = field.NewString(tableName, "file_path")
	_disasterDocument.MimeType = field.NewString(tableName, "mime_type")
	_disasterDocument.Description = field.NewString(tableName, "description")
	_disasterDocument.UploadedBy = field.NewString(tableName, "uploaded_by")
	_disasterDocument.IsPublic = field.NewBool(tableName, "is_public")
	_disasterDocument.UploadDate = field.NewTime(tableName, "upload_date")
	_disasterDocument.CreatedAt = field.NewTime(tableName, "created_at")
	_disasterDocument.UpdatedAt = field.NewTime(tableName, "updated_at")
	_disasterDocument.DeletedAt = field.NewField(tableName, "deleted_at")
	_disasterDocument.Disaster = disasterDocumentBelongsToDisaster{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Disaster", "model.Disaster"),
	}

	_disasterDocument.fillFieldMap()

	return _disasterDocument
}

type disasterDocument struct {
	disasterDocumentDo

	ALL          field.Asterisk
	ID           field.Int32  // 書類ID - 主キー
	DisasterID   field.String // 災害ID - 関連する災害のID
	Title        field.String // 書類タイトル - 文書の名称
	DocumentType field.String // 書類種別 - 報告書, 写真, 申請書, 証明書など
	FilePath     field.String // ファイルパス - ファイルの保存場所
	MimeType     field.String // MIMEタイプ - ファイルの形式を示すMIMEタイプ
	Description  field.String // 説明 - ファイルの説明や備考
	UploadedBy   field.String // アップロード者 - ファイルをアップロードしたユーザー名
	IsPublic     field.Bool   // 公開フラグ - 一般公開するかどうか
	UploadDate   field.Time   // アップロード日時 - ファイルがアップロードされた日時
	CreatedAt    field.Time   // 作成日時 - レコード作成日時
	UpdatedAt    field.Time   // 更新日時 - レコード最終更新日時
	DeletedAt    field.Field  // 削除日時 - 論理削除用のタイムスタンプ
	Disaster     disasterDocumentBelongsToDisaster

	fieldMap map[string]field.Expr
}

func (d disasterDocument) Table(newTableName string) *disasterDocument {
	d.disasterDocumentDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d disasterDocument) As(alias string) *disasterDocument {
	d.disasterDocumentDo.DO = *(d.disasterDocumentDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *disasterDocument) updateTableName(table string) *disasterDocument {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt32(table, "id")
	d.DisasterID = field.NewString(table, "disaster_id")
	d.Title = field.NewString(table, "title")
	d.DocumentType = field.NewString(table, "document_type")
	d.FilePath = field.NewString(table, "file_path")
	d.MimeType = field.NewString(table, "mime_type")
	d.Description = field.NewString(table, "description")
	d.UploadedBy = field.NewString(table, "uploaded_by")
	d.IsPublic = field.NewBool(table, "is_public")
	d.UploadDate = field.NewTime(table, "upload_date")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.DeletedAt = field.NewField(table, "deleted_at")

	d.fillFieldMap()

	return d
}

func (d *disasterDocument) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *disasterDocument) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 14)
	d.fieldMap["id"] = d.ID
	d.fieldMap["disaster_id"] = d.DisasterID
	d.fieldMap["title"] = d.Title
	d.fieldMap["document_type"] = d.DocumentType
	d.fieldMap["file_path"] = d.FilePath
	d.fieldMap["mime_type"] = d.MimeType
	d.fieldMap["description"] = d.Description
	d.fieldMap["uploaded_by"] = d.UploadedBy
	d.fieldMap["is_public"] = d.IsPublic
	d.fieldMap["upload_date"] = d.UploadDate
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt

}

func (d disasterDocument) clone(db *gorm.DB) disasterDocument {
	d.disasterDocumentDo.ReplaceConnPool(db.Statement.ConnPool)
	d.Disaster.db = db.Session(&gorm.Session{Initialized: true})
	d.Disaster.db.Statement.ConnPool = db.Statement.ConnPool
	return d
}

func (d disasterDocument) replaceDB(db *gorm.DB) disasterDocument {
	d.disasterDocumentDo.ReplaceDB(db)
	d.Disaster.db = db.Session(&gorm.Session{})
	return d
}

type disasterDocumentBelongsToDisaster struct {
	db *gorm.DB

	field.RelationField
}

func (a disasterDocumentBelongsToDisaster) Where(conds ...field.Expr) *disasterDocumentBelongsToDisaster {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a disasterDocumentBelongsToDisaster) WithContext(ctx context.Context) *disasterDocumentBelongsToDisaster {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a disasterDocumentBelongsToDisaster) Session(session *gorm.Session) *disasterDocumentBelongsToDisaster {
	a.db = a.db.Session(session)
	return &a
}

func (a disasterDocumentBelongsToDisaster) Model(m *model.DisasterDocument) *disasterDocumentBelongsToDisasterTx {
	return &disasterDocumentBelongsToDisasterTx{a.db.Model(m).Association(a.Name())}
}

func (a disasterDocumentBelongsToDisaster) Unscoped() *disasterDocumentBelongsToDisaster {
	a.db = a.db.Unscoped()
	return &a
}

type disasterDocumentBelongsToDisasterTx struct{ tx *gorm.Association }

func (a disasterDocumentBelongsToDisasterTx) Find() (result *model.Disaster, err error) {
	return result, a.tx.Find(&result)
}

func (a disasterDocumentBelongsToDisasterTx) Append(values ...*model.Disaster) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a disasterDocumentBelongsToDisasterTx) Replace(values ...*model.Disaster) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a disasterDocumentBelongsToDisasterTx) Delete(values ...*model.Disaster) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a disasterDocumentBelongsToDisasterTx) Clear() error {
	return a.tx.Clear()
}

func (a disasterDocumentBelongsToDisasterTx) Count() int64 {
	return a.tx.Count()
}

func (a disasterDocumentBelongsToDisasterTx) Unscoped() *disasterDocumentBelongsToDisasterTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type disasterDocumentDo struct{ gen.DO }

type IDisasterDocumentDo interface {
	gen.SubQuery
	Debug() IDisasterDocumentDo
	WithContext(ctx context.Context) IDisasterDocumentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDisasterDocumentDo
	WriteDB() IDisasterDocumentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDisasterDocumentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDisasterDocumentDo
	Not(conds ...gen.Condition) IDisasterDocumentDo
	Or(conds ...gen.Condition) IDisasterDocumentDo
	Select(conds ...field.Expr) IDisasterDocumentDo
	Where(conds ...gen.Condition) IDisasterDocumentDo
	Order(conds ...field.Expr) IDisasterDocumentDo
	Distinct(cols ...field.Expr) IDisasterDocumentDo
	Omit(cols ...field.Expr) IDisasterDocumentDo
	Join(table schema.Tabler, on ...field.Expr) IDisasterDocumentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDisasterDocumentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDisasterDocumentDo
	Group(cols ...field.Expr) IDisasterDocumentDo
	Having(conds ...gen.Condition) IDisasterDocumentDo
	Limit(limit int) IDisasterDocumentDo
	Offset(offset int) IDisasterDocumentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDisasterDocumentDo
	Unscoped() IDisasterDocumentDo
	Create(values ...*model.DisasterDocument) error
	CreateInBatches(values []*model.DisasterDocument, batchSize int) error
	Save(values ...*model.DisasterDocument) error
	First() (*model.DisasterDocument, error)
	Take() (*model.DisasterDocument, error)
	Last() (*model.DisasterDocument, error)
	Find() ([]*model.DisasterDocument, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DisasterDocument, err error)
	FindInBatches(result *[]*model.DisasterDocument, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DisasterDocument) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDisasterDocumentDo
	Assign(attrs ...field.AssignExpr) IDisasterDocumentDo
	Joins(fields ...field.RelationField) IDisasterDocumentDo
	Preload(fields ...field.RelationField) IDisasterDocumentDo
	FirstOrInit() (*model.DisasterDocument, error)
	FirstOrCreate() (*model.DisasterDocument, error)
	FindByPage(offset int, limit int) (result []*model.DisasterDocument, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDisasterDocumentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d disasterDocumentDo) Debug() IDisasterDocumentDo {
	return d.withDO(d.DO.Debug())
}

func (d disasterDocumentDo) WithContext(ctx context.Context) IDisasterDocumentDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d disasterDocumentDo) ReadDB() IDisasterDocumentDo {
	return d.Clauses(dbresolver.Read)
}

func (d disasterDocumentDo) WriteDB() IDisasterDocumentDo {
	return d.Clauses(dbresolver.Write)
}

func (d disasterDocumentDo) Session(config *gorm.Session) IDisasterDocumentDo {
	return d.withDO(d.DO.Session(config))
}

func (d disasterDocumentDo) Clauses(conds ...clause.Expression) IDisasterDocumentDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d disasterDocumentDo) Returning(value interface{}, columns ...string) IDisasterDocumentDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d disasterDocumentDo) Not(conds ...gen.Condition) IDisasterDocumentDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d disasterDocumentDo) Or(conds ...gen.Condition) IDisasterDocumentDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d disasterDocumentDo) Select(conds ...field.Expr) IDisasterDocumentDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d disasterDocumentDo) Where(conds ...gen.Condition) IDisasterDocumentDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d disasterDocumentDo) Order(conds ...field.Expr) IDisasterDocumentDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d disasterDocumentDo) Distinct(cols ...field.Expr) IDisasterDocumentDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d disasterDocumentDo) Omit(cols ...field.Expr) IDisasterDocumentDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d disasterDocumentDo) Join(table schema.Tabler, on ...field.Expr) IDisasterDocumentDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d disasterDocumentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDisasterDocumentDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d disasterDocumentDo) RightJoin(table schema.Tabler, on ...field.Expr) IDisasterDocumentDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d disasterDocumentDo) Group(cols ...field.Expr) IDisasterDocumentDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d disasterDocumentDo) Having(conds ...gen.Condition) IDisasterDocumentDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d disasterDocumentDo) Limit(limit int) IDisasterDocumentDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d disasterDocumentDo) Offset(offset int) IDisasterDocumentDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d disasterDocumentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDisasterDocumentDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d disasterDocumentDo) Unscoped() IDisasterDocumentDo {
	return d.withDO(d.DO.Unscoped())
}

func (d disasterDocumentDo) Create(values ...*model.DisasterDocument) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d disasterDocumentDo) CreateInBatches(values []*model.DisasterDocument, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d disasterDocumentDo) Save(values ...*model.DisasterDocument) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d disasterDocumentDo) First() (*model.DisasterDocument, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DisasterDocument), nil
	}
}

func (d disasterDocumentDo) Take() (*model.DisasterDocument, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DisasterDocument), nil
	}
}

func (d disasterDocumentDo) Last() (*model.DisasterDocument, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DisasterDocument), nil
	}
}

func (d disasterDocumentDo) Find() ([]*model.DisasterDocument, error) {
	result, err := d.DO.Find()
	return result.([]*model.DisasterDocument), err
}

func (d disasterDocumentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DisasterDocument, err error) {
	buf := make([]*model.DisasterDocument, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d disasterDocumentDo) FindInBatches(result *[]*model.DisasterDocument, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d disasterDocumentDo) Attrs(attrs ...field.AssignExpr) IDisasterDocumentDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d disasterDocumentDo) Assign(attrs ...field.AssignExpr) IDisasterDocumentDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d disasterDocumentDo) Joins(fields ...field.RelationField) IDisasterDocumentDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d disasterDocumentDo) Preload(fields ...field.RelationField) IDisasterDocumentDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d disasterDocumentDo) FirstOrInit() (*model.DisasterDocument, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DisasterDocument), nil
	}
}

func (d disasterDocumentDo) FirstOrCreate() (*model.DisasterDocument, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DisasterDocument), nil
	}
}

func (d disasterDocumentDo) FindByPage(offset int, limit int) (result []*model.DisasterDocument, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d disasterDocumentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d disasterDocumentDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d disasterDocumentDo) Delete(models ...*model.DisasterDocument) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *disasterDocumentDo) withDO(do gen.Dao) *disasterDocumentDo {
	d.DO = *do.(*gen.DO)
	return d
}
