// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import (
	"time"

	"gorm.io/gorm"
)

const TableNameNotification = "notifications"

// Notification mapped from table <notifications>
type Notification struct {
	ID                int32          `gorm:"column:id;type:integer;primaryKey;autoIncrement:true;comment:通知ID - 主キー" json:"id"`                                                                                          // 通知ID - 主キー
	UserID            string         `gorm:"column:user_id;type:uuid;not null;index:idx_notifications_user_id,priority:1;comment:ユーザーID - 通知の宛先ユーザーID" json:"user_id"`                                                   // ユーザーID - 通知の宛先ユーザーID
	Title             string         `gorm:"column:title;type:character varying(200);not null;comment:タイトル - 通知のタイトル" json:"title"`                                                                                      // タイトル - 通知のタイトル
	Message           string         `gorm:"column:message;type:text;not null;comment:メッセージ - 通知の本文" json:"message"`                                                                                                     // メッセージ - 通知の本文
	NotificationType  string         `gorm:"column:notification_type;type:character varying(50);not null;index:idx_notifications_notification_type,priority:1;comment:通知種別 - 通知の種類" json:"notification_type"`            // 通知種別 - 通知の種類
	RelatedEntityType *string        `gorm:"column:related_entity_type;type:character varying(50);comment:関連エンティティ種別 - 通知に関連するエンティティの種類" json:"related_entity_type"`                                                     // 関連エンティティ種別 - 通知に関連するエンティティの種類
	RelatedEntityID   *string        `gorm:"column:related_entity_id;type:character varying(100);comment:関連エンティティID - 通知に関連するエンティティのID" json:"related_entity_id"`                                                        // 関連エンティティID - 通知に関連するエンティティのID
	IsRead            bool           `gorm:"column:is_read;type:boolean;not null;index:idx_notifications_is_read,priority:1;comment:既読フラグ - 通知が既読かどうか" json:"is_read"`                                                   // 既読フラグ - 通知が既読かどうか
	ReadAt            *time.Time     `gorm:"column:read_at;type:timestamp with time zone;comment:既読日時 - 通知が既読になった日時" json:"read_at"`                                                                                     // 既読日時 - 通知が既読になった日時
	CreatedAt         time.Time      `gorm:"column:created_at;type:timestamp with time zone;not null;index:idx_notifications_created_at,priority:1;default:CURRENT_TIMESTAMP;comment:作成日時 - レコード作成日時" json:"created_at"` // 作成日時 - レコード作成日時
	UpdatedAt         time.Time      `gorm:"column:updated_at;type:timestamp with time zone;not null;default:CURRENT_TIMESTAMP;comment:更新日時 - レコード最終更新日時" json:"updated_at"`                                             // 更新日時 - レコード最終更新日時
	DeletedAt         gorm.DeletedAt `gorm:"column:deleted_at;type:timestamp with time zone;comment:削除日時 - 論理削除用のタイムスタンプ" json:"deleted_at"`                                                                             // 削除日時 - 論理削除用のタイムスタンプ
}

// TableName Notification's table name
func (*Notification) TableName() string {
	return TableNameNotification
}
