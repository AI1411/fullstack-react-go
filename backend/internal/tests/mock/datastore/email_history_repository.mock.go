// Code generated by MockGen. DO NOT EDIT.
// Source: email_history_repository.go
//
// Generated by this command:
//
//	mockgen -source=email_history_repository.go -destination=../../tests/mock/datastore/email_history_repository.mock.go
//

// Package mock_datastore is a generated GoMock package.
package mock_datastore

import (
	context "context"
	reflect "reflect"

	model "github.com/AI1411/fullstack-react-go/internal/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockEmailRepository is a mock of EmailRepository interface.
type MockEmailRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEmailRepositoryMockRecorder
	isgomock struct{}
}

// MockEmailRepositoryMockRecorder is the mock recorder for MockEmailRepository.
type MockEmailRepositoryMockRecorder struct {
	mock *MockEmailRepository
}

// NewMockEmailRepository creates a new mock instance.
func NewMockEmailRepository(ctrl *gomock.Controller) *MockEmailRepository {
	mock := &MockEmailRepository{ctrl: ctrl}
	mock.recorder = &MockEmailRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailRepository) EXPECT() *MockEmailRepositoryMockRecorder {
	return m.recorder
}

// ListEmailHistoriesByUserID mocks base method.
func (m *MockEmailRepository) ListEmailHistoriesByUserID(ctx context.Context, userID string) ([]*model.EmailHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmailHistoriesByUserID", ctx, userID)
	ret0, _ := ret[0].([]*model.EmailHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmailHistoriesByUserID indicates an expected call of ListEmailHistoriesByUserID.
func (mr *MockEmailRepositoryMockRecorder) ListEmailHistoriesByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmailHistoriesByUserID", reflect.TypeOf((*MockEmailRepository)(nil).ListEmailHistoriesByUserID), ctx, userID)
}

// SaveEmailHistory mocks base method.
func (m *MockEmailRepository) SaveEmailHistory(ctx context.Context, email *model.EmailHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEmailHistory", ctx, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveEmailHistory indicates an expected call of SaveEmailHistory.
func (mr *MockEmailRepositoryMockRecorder) SaveEmailHistory(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEmailHistory", reflect.TypeOf((*MockEmailRepository)(nil).SaveEmailHistory), ctx, email)
}
