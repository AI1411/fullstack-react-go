// Code generated by MockGen. DO NOT EDIT.
// Source: organization_repository.go
//
// Generated by this command:
//
//	mockgen -source=organization_repository.go -destination=../../../tests/mock/datastore/organization_repository.mock.go
//

// Package mock_datastore is a generated GoMock package.
package mock_datastore

import (
	context "context"
	reflect "reflect"

	model "github.com/AI1411/fullstack-react-go/internal/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockOrganizationRepository is a mock of OrganizationRepository interface.
type MockOrganizationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationRepositoryMockRecorder
	isgomock struct{}
}

// MockOrganizationRepositoryMockRecorder is the mock recorder for MockOrganizationRepository.
type MockOrganizationRepositoryMockRecorder struct {
	mock *MockOrganizationRepository
}

// NewMockOrganizationRepository creates a new mock instance.
func NewMockOrganizationRepository(ctrl *gomock.Controller) *MockOrganizationRepository {
	mock := &MockOrganizationRepository{ctrl: ctrl}
	mock.recorder = &MockOrganizationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationRepository) EXPECT() *MockOrganizationRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrganizationRepository) Create(ctx context.Context, organization *model.Organization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, organization)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockOrganizationRepositoryMockRecorder) Create(ctx, organization any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrganizationRepository)(nil).Create), ctx, organization)
}

// Delete mocks base method.
func (m *MockOrganizationRepository) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockOrganizationRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOrganizationRepository)(nil).Delete), ctx, id)
}

// Find mocks base method.
func (m *MockOrganizationRepository) Find(ctx context.Context) ([]*model.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx)
	ret0, _ := ret[0].([]*model.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockOrganizationRepositoryMockRecorder) Find(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockOrganizationRepository)(nil).Find), ctx)
}

// FindByID mocks base method.
func (m *MockOrganizationRepository) FindByID(ctx context.Context, id int64) (*model.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*model.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockOrganizationRepositoryMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockOrganizationRepository)(nil).FindByID), ctx, id)
}

// Update mocks base method.
func (m *MockOrganizationRepository) Update(ctx context.Context, organization *model.Organization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, organization)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockOrganizationRepositoryMockRecorder) Update(ctx, organization any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOrganizationRepository)(nil).Update), ctx, organization)
}
