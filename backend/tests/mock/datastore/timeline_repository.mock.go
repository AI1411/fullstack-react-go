// Code generated by MockGen. DO NOT EDIT.
// Source: timeline_repository.go
//
// Generated by this command:
//
//	mockgen -source=timeline_repository.go -destination=../../../tests/mock/datastore/timeline_repository.mock.go
//

// Package mock_datastore is a generated GoMock package.
package mock_datastore

import (
	context "context"
	reflect "reflect"

	model "github.com/AI1411/fullstack-react-go/internal/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockTimelineRepository is a mock of TimelineRepository interface.
type MockTimelineRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTimelineRepositoryMockRecorder
	isgomock struct{}
}

// MockTimelineRepositoryMockRecorder is the mock recorder for MockTimelineRepository.
type MockTimelineRepositoryMockRecorder struct {
	mock *MockTimelineRepository
}

// NewMockTimelineRepository creates a new mock instance.
func NewMockTimelineRepository(ctrl *gomock.Controller) *MockTimelineRepository {
	mock := &MockTimelineRepository{ctrl: ctrl}
	mock.recorder = &MockTimelineRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimelineRepository) EXPECT() *MockTimelineRepositoryMockRecorder {
	return m.recorder
}

// FindByDisasterID mocks base method.
func (m *MockTimelineRepository) FindByDisasterID(ctx context.Context, disasterID string) ([]*model.Timeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByDisasterID", ctx, disasterID)
	ret0, _ := ret[0].([]*model.Timeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByDisasterID indicates an expected call of FindByDisasterID.
func (mr *MockTimelineRepositoryMockRecorder) FindByDisasterID(ctx, disasterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByDisasterID", reflect.TypeOf((*MockTimelineRepository)(nil).FindByDisasterID), ctx, disasterID)
}
