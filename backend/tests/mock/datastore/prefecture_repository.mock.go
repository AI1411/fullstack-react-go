// Code generated by MockGen. DO NOT EDIT.
// Source: prefecture_repository.go
//
// Generated by this command:
//
//	mockgen -source=prefecture_repository.go -destination=../../../tests/mock/datastore/prefecture_repository.mock.go
//

// Package mock_datastore is a generated GoMock package.
package mock_datastore

import (
	context "context"
	reflect "reflect"

	model "github.com/AI1411/fullstack-react-go/internal/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockPrefectureRepository is a mock of PrefectureRepository interface.
type MockPrefectureRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPrefectureRepositoryMockRecorder
	isgomock struct{}
}

// MockPrefectureRepositoryMockRecorder is the mock recorder for MockPrefectureRepository.
type MockPrefectureRepositoryMockRecorder struct {
	mock *MockPrefectureRepository
}

// NewMockPrefectureRepository creates a new mock instance.
func NewMockPrefectureRepository(ctrl *gomock.Controller) *MockPrefectureRepository {
	mock := &MockPrefectureRepository{ctrl: ctrl}
	mock.recorder = &MockPrefectureRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrefectureRepository) EXPECT() *MockPrefectureRepositoryMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockPrefectureRepository) Find(ctx context.Context) ([]*model.Prefecture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx)
	ret0, _ := ret[0].([]*model.Prefecture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockPrefectureRepositoryMockRecorder) Find(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockPrefectureRepository)(nil).Find), ctx)
}

// FindByID mocks base method.
func (m *MockPrefectureRepository) FindByID(ctx context.Context, code string) (*model.Prefecture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, code)
	ret0, _ := ret[0].(*model.Prefecture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockPrefectureRepositoryMockRecorder) FindByID(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockPrefectureRepository)(nil).FindByID), ctx, code)
}
