// Code generated by MockGen. DO NOT EDIT.
// Source: damage_level_repository.go
//
// Generated by this command:
//
//	mockgen -source=damage_level_repository.go -destination=../../../tests/mock/datastore/damage_level_repository.mock.go
//

// Package mock_datastore is a generated GoMock package.
package mock_datastore

import (
	context "context"
	reflect "reflect"

	model "github.com/AI1411/fullstack-react-go/internal/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockDamageLevelRepository is a mock of DamageLevelRepository interface.
type MockDamageLevelRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDamageLevelRepositoryMockRecorder
	isgomock struct{}
}

// MockDamageLevelRepositoryMockRecorder is the mock recorder for MockDamageLevelRepository.
type MockDamageLevelRepositoryMockRecorder struct {
	mock *MockDamageLevelRepository
}

// NewMockDamageLevelRepository creates a new mock instance.
func NewMockDamageLevelRepository(ctrl *gomock.Controller) *MockDamageLevelRepository {
	mock := &MockDamageLevelRepository{ctrl: ctrl}
	mock.recorder = &MockDamageLevelRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDamageLevelRepository) EXPECT() *MockDamageLevelRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDamageLevelRepository) Create(ctx context.Context, damageLevel *model.DamageLevel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, damageLevel)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDamageLevelRepositoryMockRecorder) Create(ctx, damageLevel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDamageLevelRepository)(nil).Create), ctx, damageLevel)
}

// Delete mocks base method.
func (m *MockDamageLevelRepository) Delete(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDamageLevelRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDamageLevelRepository)(nil).Delete), ctx, id)
}

// Find mocks base method.
func (m *MockDamageLevelRepository) Find(ctx context.Context) ([]*model.DamageLevel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx)
	ret0, _ := ret[0].([]*model.DamageLevel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockDamageLevelRepositoryMockRecorder) Find(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockDamageLevelRepository)(nil).Find), ctx)
}

// FindByID mocks base method.
func (m *MockDamageLevelRepository) FindByID(ctx context.Context, id int32) (*model.DamageLevel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*model.DamageLevel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockDamageLevelRepositoryMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockDamageLevelRepository)(nil).FindByID), ctx, id)
}

// Update mocks base method.
func (m *MockDamageLevelRepository) Update(ctx context.Context, damageLevel *model.DamageLevel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, damageLevel)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDamageLevelRepositoryMockRecorder) Update(ctx, damageLevel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDamageLevelRepository)(nil).Update), ctx, damageLevel)
}
