// Code generated by MockGen. DO NOT EDIT.
// Source: support_application_repository.go
//
// Generated by this command:
//
//	mockgen -source=support_application_repository.go -destination=../../../tests/mock/datastore/support_application_repository.mock.go
//

// Package mock_datastore is a generated GoMock package.
package mock_datastore

import (
	context "context"
	reflect "reflect"

	model "github.com/AI1411/fullstack-react-go/internal/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockSupportApplicationRepository is a mock of SupportApplicationRepository interface.
type MockSupportApplicationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSupportApplicationRepositoryMockRecorder
	isgomock struct{}
}

// MockSupportApplicationRepositoryMockRecorder is the mock recorder for MockSupportApplicationRepository.
type MockSupportApplicationRepositoryMockRecorder struct {
	mock *MockSupportApplicationRepository
}

// NewMockSupportApplicationRepository creates a new mock instance.
func NewMockSupportApplicationRepository(ctrl *gomock.Controller) *MockSupportApplicationRepository {
	mock := &MockSupportApplicationRepository{ctrl: ctrl}
	mock.recorder = &MockSupportApplicationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSupportApplicationRepository) EXPECT() *MockSupportApplicationRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSupportApplicationRepository) Create(ctx context.Context, supportApplication *model.SupportApplication) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, supportApplication)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSupportApplicationRepositoryMockRecorder) Create(ctx, supportApplication any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSupportApplicationRepository)(nil).Create), ctx, supportApplication)
}

// Find mocks base method.
func (m *MockSupportApplicationRepository) Find(ctx context.Context) ([]*model.SupportApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx)
	ret0, _ := ret[0].([]*model.SupportApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockSupportApplicationRepositoryMockRecorder) Find(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockSupportApplicationRepository)(nil).Find), ctx)
}

// FindByID mocks base method.
func (m *MockSupportApplicationRepository) FindByID(ctx context.Context, id string) (*model.SupportApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*model.SupportApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockSupportApplicationRepositoryMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockSupportApplicationRepository)(nil).FindByID), ctx, id)
}
