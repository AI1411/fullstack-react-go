// Code generated by MockGen. DO NOT EDIT.
// Source: notification_usecase.go
//
// Generated by this command:
//
//	mockgen -source=notification_usecase.go -destination=../../tests/mock/usecase/notification_usecase.mock.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	model "github.com/AI1411/fullstack-react-go/internal/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockNotificationUseCase is a mock of NotificationUseCase interface.
type MockNotificationUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationUseCaseMockRecorder
	isgomock struct{}
}

// MockNotificationUseCaseMockRecorder is the mock recorder for MockNotificationUseCase.
type MockNotificationUseCaseMockRecorder struct {
	mock *MockNotificationUseCase
}

// NewMockNotificationUseCase creates a new mock instance.
func NewMockNotificationUseCase(ctrl *gomock.Controller) *MockNotificationUseCase {
	mock := &MockNotificationUseCase{ctrl: ctrl}
	mock.recorder = &MockNotificationUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationUseCase) EXPECT() *MockNotificationUseCaseMockRecorder {
	return m.recorder
}

// CreateNotification mocks base method.
func (m *MockNotificationUseCase) CreateNotification(ctx context.Context, notification *model.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotification", ctx, notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNotification indicates an expected call of CreateNotification.
func (mr *MockNotificationUseCaseMockRecorder) CreateNotification(ctx, notification any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotification", reflect.TypeOf((*MockNotificationUseCase)(nil).CreateNotification), ctx, notification)
}

// DeleteNotification mocks base method.
func (m *MockNotificationUseCase) DeleteNotification(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNotification", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNotification indicates an expected call of DeleteNotification.
func (mr *MockNotificationUseCaseMockRecorder) DeleteNotification(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotification", reflect.TypeOf((*MockNotificationUseCase)(nil).DeleteNotification), ctx, id)
}

// GetNotificationByID mocks base method.
func (m *MockNotificationUseCase) GetNotificationByID(ctx context.Context, id int32) (*model.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationByID", ctx, id)
	ret0, _ := ret[0].(*model.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationByID indicates an expected call of GetNotificationByID.
func (mr *MockNotificationUseCaseMockRecorder) GetNotificationByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationByID", reflect.TypeOf((*MockNotificationUseCase)(nil).GetNotificationByID), ctx, id)
}

// GetNotificationsByUserID mocks base method.
func (m *MockNotificationUseCase) GetNotificationsByUserID(ctx context.Context, userID int32) ([]*model.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationsByUserID", ctx, userID)
	ret0, _ := ret[0].([]*model.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationsByUserID indicates an expected call of GetNotificationsByUserID.
func (mr *MockNotificationUseCaseMockRecorder) GetNotificationsByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationsByUserID", reflect.TypeOf((*MockNotificationUseCase)(nil).GetNotificationsByUserID), ctx, userID)
}

// ListNotifications mocks base method.
func (m *MockNotificationUseCase) ListNotifications(ctx context.Context) ([]*model.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotifications", ctx)
	ret0, _ := ret[0].([]*model.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotifications indicates an expected call of ListNotifications.
func (mr *MockNotificationUseCaseMockRecorder) ListNotifications(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotifications", reflect.TypeOf((*MockNotificationUseCase)(nil).ListNotifications), ctx)
}

// MarkAsRead mocks base method.
func (m *MockNotificationUseCase) MarkAsRead(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsRead", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsRead indicates an expected call of MarkAsRead.
func (mr *MockNotificationUseCaseMockRecorder) MarkAsRead(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsRead", reflect.TypeOf((*MockNotificationUseCase)(nil).MarkAsRead), ctx, id)
}

// UpdateNotification mocks base method.
func (m *MockNotificationUseCase) UpdateNotification(ctx context.Context, notification *model.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotification", ctx, notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNotification indicates an expected call of UpdateNotification.
func (mr *MockNotificationUseCaseMockRecorder) UpdateNotification(ctx, notification any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotification", reflect.TypeOf((*MockNotificationUseCase)(nil).UpdateNotification), ctx, notification)
}
