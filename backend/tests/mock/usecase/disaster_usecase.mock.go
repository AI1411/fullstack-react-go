// Code generated by MockGen. DO NOT EDIT.
// Source: disaster_usecase.go
//
// Generated by this command:
//
//	mockgen -source=disaster_usecase.go -destination=../../tests/mock/usecase/disaster_usecase.mock.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	model "github.com/AI1411/fullstack-react-go/internal/domain/model"
	datastore "github.com/AI1411/fullstack-react-go/internal/infra/datastore"
	gomock "go.uber.org/mock/gomock"
)

// MockDisasterUseCase is a mock of DisasterUseCase interface.
type MockDisasterUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockDisasterUseCaseMockRecorder
	isgomock struct{}
}

// MockDisasterUseCaseMockRecorder is the mock recorder for MockDisasterUseCase.
type MockDisasterUseCaseMockRecorder struct {
	mock *MockDisasterUseCase
}

// NewMockDisasterUseCase creates a new mock instance.
func NewMockDisasterUseCase(ctrl *gomock.Controller) *MockDisasterUseCase {
	mock := &MockDisasterUseCase{ctrl: ctrl}
	mock.recorder = &MockDisasterUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDisasterUseCase) EXPECT() *MockDisasterUseCaseMockRecorder {
	return m.recorder
}

// CreateDisaster mocks base method.
func (m *MockDisasterUseCase) CreateDisaster(ctx context.Context, disaster *model.Disaster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDisaster", ctx, disaster)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDisaster indicates an expected call of CreateDisaster.
func (mr *MockDisasterUseCaseMockRecorder) CreateDisaster(ctx, disaster any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDisaster", reflect.TypeOf((*MockDisasterUseCase)(nil).CreateDisaster), ctx, disaster)
}

// DeleteDisaster mocks base method.
func (m *MockDisasterUseCase) DeleteDisaster(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDisaster", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDisaster indicates an expected call of DeleteDisaster.
func (mr *MockDisasterUseCaseMockRecorder) DeleteDisaster(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDisaster", reflect.TypeOf((*MockDisasterUseCase)(nil).DeleteDisaster), ctx, id)
}

// GetDisasterByID mocks base method.
func (m *MockDisasterUseCase) GetDisasterByID(ctx context.Context, id string) (*model.Disaster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDisasterByID", ctx, id)
	ret0, _ := ret[0].(*model.Disaster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDisasterByID indicates an expected call of GetDisasterByID.
func (mr *MockDisasterUseCaseMockRecorder) GetDisasterByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisasterByID", reflect.TypeOf((*MockDisasterUseCase)(nil).GetDisasterByID), ctx, id)
}

// ListDisasters mocks base method.
func (m *MockDisasterUseCase) ListDisasters(ctx context.Context, params *datastore.DisasterSearchParams) ([]*model.Disaster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDisasters", ctx, params)
	ret0, _ := ret[0].([]*model.Disaster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDisasters indicates an expected call of ListDisasters.
func (mr *MockDisasterUseCaseMockRecorder) ListDisasters(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDisasters", reflect.TypeOf((*MockDisasterUseCase)(nil).ListDisasters), ctx, params)
}

// UpdateDisaster mocks base method.
func (m *MockDisasterUseCase) UpdateDisaster(ctx context.Context, disaster *model.Disaster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDisaster", ctx, disaster)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDisaster indicates an expected call of UpdateDisaster.
func (mr *MockDisasterUseCaseMockRecorder) UpdateDisaster(ctx, disaster any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDisaster", reflect.TypeOf((*MockDisasterUseCase)(nil).UpdateDisaster), ctx, disaster)
}
