// Code generated by MockGen. DO NOT EDIT.
// Source: facility_equipment_usecase.go
//
// Generated by this command:
//
//	mockgen -source=facility_equipment_usecase.go -destination=../../tests/mock/usecase/facility_equipment_usecase.mock.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	model "github.com/AI1411/fullstack-react-go/internal/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockFacilityEquipmentUseCase is a mock of FacilityEquipmentUseCase interface.
type MockFacilityEquipmentUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockFacilityEquipmentUseCaseMockRecorder
	isgomock struct{}
}

// MockFacilityEquipmentUseCaseMockRecorder is the mock recorder for MockFacilityEquipmentUseCase.
type MockFacilityEquipmentUseCaseMockRecorder struct {
	mock *MockFacilityEquipmentUseCase
}

// NewMockFacilityEquipmentUseCase creates a new mock instance.
func NewMockFacilityEquipmentUseCase(ctrl *gomock.Controller) *MockFacilityEquipmentUseCase {
	mock := &MockFacilityEquipmentUseCase{ctrl: ctrl}
	mock.recorder = &MockFacilityEquipmentUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFacilityEquipmentUseCase) EXPECT() *MockFacilityEquipmentUseCaseMockRecorder {
	return m.recorder
}

// CreateFacilityEquipment mocks base method.
func (m *MockFacilityEquipmentUseCase) CreateFacilityEquipment(ctx context.Context, facilityEquipment *model.FacilityEquipment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFacilityEquipment", ctx, facilityEquipment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFacilityEquipment indicates an expected call of CreateFacilityEquipment.
func (mr *MockFacilityEquipmentUseCaseMockRecorder) CreateFacilityEquipment(ctx, facilityEquipment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFacilityEquipment", reflect.TypeOf((*MockFacilityEquipmentUseCase)(nil).CreateFacilityEquipment), ctx, facilityEquipment)
}

// DeleteFacilityEquipment mocks base method.
func (m *MockFacilityEquipmentUseCase) DeleteFacilityEquipment(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFacilityEquipment", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFacilityEquipment indicates an expected call of DeleteFacilityEquipment.
func (mr *MockFacilityEquipmentUseCaseMockRecorder) DeleteFacilityEquipment(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFacilityEquipment", reflect.TypeOf((*MockFacilityEquipmentUseCase)(nil).DeleteFacilityEquipment), ctx, id)
}

// GetFacilityEquipmentByID mocks base method.
func (m *MockFacilityEquipmentUseCase) GetFacilityEquipmentByID(ctx context.Context, id int32) (*model.FacilityEquipment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFacilityEquipmentByID", ctx, id)
	ret0, _ := ret[0].(*model.FacilityEquipment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFacilityEquipmentByID indicates an expected call of GetFacilityEquipmentByID.
func (mr *MockFacilityEquipmentUseCaseMockRecorder) GetFacilityEquipmentByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFacilityEquipmentByID", reflect.TypeOf((*MockFacilityEquipmentUseCase)(nil).GetFacilityEquipmentByID), ctx, id)
}

// ListFacilityEquipments mocks base method.
func (m *MockFacilityEquipmentUseCase) ListFacilityEquipments(ctx context.Context) ([]*model.FacilityEquipment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFacilityEquipments", ctx)
	ret0, _ := ret[0].([]*model.FacilityEquipment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFacilityEquipments indicates an expected call of ListFacilityEquipments.
func (mr *MockFacilityEquipmentUseCaseMockRecorder) ListFacilityEquipments(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFacilityEquipments", reflect.TypeOf((*MockFacilityEquipmentUseCase)(nil).ListFacilityEquipments), ctx)
}

// UpdateFacilityEquipment mocks base method.
func (m *MockFacilityEquipmentUseCase) UpdateFacilityEquipment(ctx context.Context, facilityEquipment *model.FacilityEquipment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFacilityEquipment", ctx, facilityEquipment)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFacilityEquipment indicates an expected call of UpdateFacilityEquipment.
func (mr *MockFacilityEquipmentUseCaseMockRecorder) UpdateFacilityEquipment(ctx, facilityEquipment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFacilityEquipment", reflect.TypeOf((*MockFacilityEquipmentUseCase)(nil).UpdateFacilityEquipment), ctx, facilityEquipment)
}
