// Code generated by MockGen. DO NOT EDIT.
// Source: organization_usecase.go
//
// Generated by this command:
//
//	mockgen -source=organization_usecase.go -destination=../../tests/mock/usecase/organization_usecase.mock.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	model "github.com/AI1411/fullstack-react-go/internal/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockOrganizationUseCase is a mock of OrganizationUseCase interface.
type MockOrganizationUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationUseCaseMockRecorder
	isgomock struct{}
}

// MockOrganizationUseCaseMockRecorder is the mock recorder for MockOrganizationUseCase.
type MockOrganizationUseCaseMockRecorder struct {
	mock *MockOrganizationUseCase
}

// NewMockOrganizationUseCase creates a new mock instance.
func NewMockOrganizationUseCase(ctrl *gomock.Controller) *MockOrganizationUseCase {
	mock := &MockOrganizationUseCase{ctrl: ctrl}
	mock.recorder = &MockOrganizationUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationUseCase) EXPECT() *MockOrganizationUseCaseMockRecorder {
	return m.recorder
}

// CreateOrganization mocks base method.
func (m *MockOrganizationUseCase) CreateOrganization(ctx context.Context, organization *model.Organization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganization", ctx, organization)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrganization indicates an expected call of CreateOrganization.
func (mr *MockOrganizationUseCaseMockRecorder) CreateOrganization(ctx, organization any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganization", reflect.TypeOf((*MockOrganizationUseCase)(nil).CreateOrganization), ctx, organization)
}

// DeleteOrganization mocks base method.
func (m *MockOrganizationUseCase) DeleteOrganization(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganization", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrganization indicates an expected call of DeleteOrganization.
func (mr *MockOrganizationUseCaseMockRecorder) DeleteOrganization(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganization", reflect.TypeOf((*MockOrganizationUseCase)(nil).DeleteOrganization), ctx, id)
}

// GetOrganizationByID mocks base method.
func (m *MockOrganizationUseCase) GetOrganizationByID(ctx context.Context, id int32) (*model.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationByID", ctx, id)
	ret0, _ := ret[0].(*model.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationByID indicates an expected call of GetOrganizationByID.
func (mr *MockOrganizationUseCaseMockRecorder) GetOrganizationByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationByID", reflect.TypeOf((*MockOrganizationUseCase)(nil).GetOrganizationByID), ctx, id)
}

// ListOrganizations mocks base method.
func (m *MockOrganizationUseCase) ListOrganizations(ctx context.Context) ([]*model.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizations", ctx)
	ret0, _ := ret[0].([]*model.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizations indicates an expected call of ListOrganizations.
func (mr *MockOrganizationUseCaseMockRecorder) ListOrganizations(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizations", reflect.TypeOf((*MockOrganizationUseCase)(nil).ListOrganizations), ctx)
}

// UpdateOrganization mocks base method.
func (m *MockOrganizationUseCase) UpdateOrganization(ctx context.Context, organization *model.Organization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganization", ctx, organization)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrganization indicates an expected call of UpdateOrganization.
func (mr *MockOrganizationUseCaseMockRecorder) UpdateOrganization(ctx, organization any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganization", reflect.TypeOf((*MockOrganizationUseCase)(nil).UpdateOrganization), ctx, organization)
}
