// Code generated by MockGen. DO NOT EDIT.
// Source: damage_level_usecase.go
//
// Generated by this command:
//
//	mockgen -source=damage_level_usecase.go -destination=../../tests/mock/usecase/damage_level_usecase.mock.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	model "github.com/AI1411/fullstack-react-go/internal/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockDamageLevelUseCase is a mock of DamageLevelUseCase interface.
type MockDamageLevelUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockDamageLevelUseCaseMockRecorder
	isgomock struct{}
}

// MockDamageLevelUseCaseMockRecorder is the mock recorder for MockDamageLevelUseCase.
type MockDamageLevelUseCaseMockRecorder struct {
	mock *MockDamageLevelUseCase
}

// NewMockDamageLevelUseCase creates a new mock instance.
func NewMockDamageLevelUseCase(ctrl *gomock.Controller) *MockDamageLevelUseCase {
	mock := &MockDamageLevelUseCase{ctrl: ctrl}
	mock.recorder = &MockDamageLevelUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDamageLevelUseCase) EXPECT() *MockDamageLevelUseCaseMockRecorder {
	return m.recorder
}

// CreateDamageLevel mocks base method.
func (m *MockDamageLevelUseCase) CreateDamageLevel(ctx context.Context, damageLevel *model.DamageLevel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDamageLevel", ctx, damageLevel)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDamageLevel indicates an expected call of CreateDamageLevel.
func (mr *MockDamageLevelUseCaseMockRecorder) CreateDamageLevel(ctx, damageLevel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDamageLevel", reflect.TypeOf((*MockDamageLevelUseCase)(nil).CreateDamageLevel), ctx, damageLevel)
}

// DeleteDamageLevel mocks base method.
func (m *MockDamageLevelUseCase) DeleteDamageLevel(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDamageLevel", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDamageLevel indicates an expected call of DeleteDamageLevel.
func (mr *MockDamageLevelUseCaseMockRecorder) DeleteDamageLevel(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDamageLevel", reflect.TypeOf((*MockDamageLevelUseCase)(nil).DeleteDamageLevel), ctx, id)
}

// GetDamageLevelByID mocks base method.
func (m *MockDamageLevelUseCase) GetDamageLevelByID(ctx context.Context, id int32) (*model.DamageLevel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDamageLevelByID", ctx, id)
	ret0, _ := ret[0].(*model.DamageLevel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDamageLevelByID indicates an expected call of GetDamageLevelByID.
func (mr *MockDamageLevelUseCaseMockRecorder) GetDamageLevelByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDamageLevelByID", reflect.TypeOf((*MockDamageLevelUseCase)(nil).GetDamageLevelByID), ctx, id)
}

// ListDamageLevels mocks base method.
func (m *MockDamageLevelUseCase) ListDamageLevels(ctx context.Context) ([]*model.DamageLevel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDamageLevels", ctx)
	ret0, _ := ret[0].([]*model.DamageLevel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDamageLevels indicates an expected call of ListDamageLevels.
func (mr *MockDamageLevelUseCaseMockRecorder) ListDamageLevels(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDamageLevels", reflect.TypeOf((*MockDamageLevelUseCase)(nil).ListDamageLevels), ctx)
}

// UpdateDamageLevel mocks base method.
func (m *MockDamageLevelUseCase) UpdateDamageLevel(ctx context.Context, damageLevel *model.DamageLevel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDamageLevel", ctx, damageLevel)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDamageLevel indicates an expected call of UpdateDamageLevel.
func (mr *MockDamageLevelUseCaseMockRecorder) UpdateDamageLevel(ctx, damageLevel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDamageLevel", reflect.TypeOf((*MockDamageLevelUseCase)(nil).UpdateDamageLevel), ctx, damageLevel)
}
