// Code generated by MockGen. DO NOT EDIT.
// Source: timeline_usecase.go
//
// Generated by this command:
//
//	mockgen -source=timeline_usecase.go -destination=../../tests/mock/usecase/timeline_usecase.mock.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	model "github.com/AI1411/fullstack-react-go/internal/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockTimelineUseCase is a mock of TimelineUseCase interface.
type MockTimelineUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockTimelineUseCaseMockRecorder
	isgomock struct{}
}

// MockTimelineUseCaseMockRecorder is the mock recorder for MockTimelineUseCase.
type MockTimelineUseCaseMockRecorder struct {
	mock *MockTimelineUseCase
}

// NewMockTimelineUseCase creates a new mock instance.
func NewMockTimelineUseCase(ctrl *gomock.Controller) *MockTimelineUseCase {
	mock := &MockTimelineUseCase{ctrl: ctrl}
	mock.recorder = &MockTimelineUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimelineUseCase) EXPECT() *MockTimelineUseCaseMockRecorder {
	return m.recorder
}

// GetTimelinesByDisasterID mocks base method.
func (m *MockTimelineUseCase) GetTimelinesByDisasterID(ctx context.Context, disasterID string) ([]*model.Timeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimelinesByDisasterID", ctx, disasterID)
	ret0, _ := ret[0].([]*model.Timeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimelinesByDisasterID indicates an expected call of GetTimelinesByDisasterID.
func (mr *MockTimelineUseCaseMockRecorder) GetTimelinesByDisasterID(ctx, disasterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimelinesByDisasterID", reflect.TypeOf((*MockTimelineUseCase)(nil).GetTimelinesByDisasterID), ctx, disasterID)
}
