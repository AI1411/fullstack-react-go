// Code generated by MockGen. DO NOT EDIT.
// Source: support_application_usecase.go
//
// Generated by this command:
//
//	mockgen -source=support_application_usecase.go -destination=../../tests/mock/usecase/support_application_usecase.mock.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	model "github.com/AI1411/fullstack-react-go/internal/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockSupportApplicationUseCase is a mock of SupportApplicationUseCase interface.
type MockSupportApplicationUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSupportApplicationUseCaseMockRecorder
	isgomock struct{}
}

// MockSupportApplicationUseCaseMockRecorder is the mock recorder for MockSupportApplicationUseCase.
type MockSupportApplicationUseCaseMockRecorder struct {
	mock *MockSupportApplicationUseCase
}

// NewMockSupportApplicationUseCase creates a new mock instance.
func NewMockSupportApplicationUseCase(ctrl *gomock.Controller) *MockSupportApplicationUseCase {
	mock := &MockSupportApplicationUseCase{ctrl: ctrl}
	mock.recorder = &MockSupportApplicationUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSupportApplicationUseCase) EXPECT() *MockSupportApplicationUseCaseMockRecorder {
	return m.recorder
}

// CreateSupportApplication mocks base method.
func (m *MockSupportApplicationUseCase) CreateSupportApplication(ctx context.Context, supportApplication *model.SupportApplication) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSupportApplication", ctx, supportApplication)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSupportApplication indicates an expected call of CreateSupportApplication.
func (mr *MockSupportApplicationUseCaseMockRecorder) CreateSupportApplication(ctx, supportApplication any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSupportApplication", reflect.TypeOf((*MockSupportApplicationUseCase)(nil).CreateSupportApplication), ctx, supportApplication)
}

// GetSupportApplicationByID mocks base method.
func (m *MockSupportApplicationUseCase) GetSupportApplicationByID(ctx context.Context, id string) (*model.SupportApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportApplicationByID", ctx, id)
	ret0, _ := ret[0].(*model.SupportApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupportApplicationByID indicates an expected call of GetSupportApplicationByID.
func (mr *MockSupportApplicationUseCaseMockRecorder) GetSupportApplicationByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportApplicationByID", reflect.TypeOf((*MockSupportApplicationUseCase)(nil).GetSupportApplicationByID), ctx, id)
}

// ListSupportApplications mocks base method.
func (m *MockSupportApplicationUseCase) ListSupportApplications(ctx context.Context) ([]*model.SupportApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSupportApplications", ctx)
	ret0, _ := ret[0].([]*model.SupportApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSupportApplications indicates an expected call of ListSupportApplications.
func (mr *MockSupportApplicationUseCaseMockRecorder) ListSupportApplications(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSupportApplications", reflect.TypeOf((*MockSupportApplicationUseCase)(nil).ListSupportApplications), ctx)
}
