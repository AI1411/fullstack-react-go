// Code generated by MockGen. DO NOT EDIT.
// Source: email_varification__token.go
//
// Generated by this command:
//
//	mockgen -source=email_varification__token.go -destination=../../../tests/mock/domain/email_varification__token.mock.go
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	model "github.com/AI1411/fullstack-react-go/internal/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockEmailVarificationTokenRepository is a mock of EmailVarificationTokenRepository interface.
type MockEmailVarificationTokenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEmailVarificationTokenRepositoryMockRecorder
	isgomock struct{}
}

// MockEmailVarificationTokenRepositoryMockRecorder is the mock recorder for MockEmailVarificationTokenRepository.
type MockEmailVarificationTokenRepositoryMockRecorder struct {
	mock *MockEmailVarificationTokenRepository
}

// NewMockEmailVarificationTokenRepository creates a new mock instance.
func NewMockEmailVarificationTokenRepository(ctrl *gomock.Controller) *MockEmailVarificationTokenRepository {
	mock := &MockEmailVarificationTokenRepository{ctrl: ctrl}
	mock.recorder = &MockEmailVarificationTokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailVarificationTokenRepository) EXPECT() *MockEmailVarificationTokenRepositoryMockRecorder {
	return m.recorder
}

// FindByTokenAndUserID mocks base method.
func (m *MockEmailVarificationTokenRepository) FindByTokenAndUserID(ctx context.Context, token string) (*model.EmailVerificationToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTokenAndUserID", ctx, token)
	ret0, _ := ret[0].(*model.EmailVerificationToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTokenAndUserID indicates an expected call of FindByTokenAndUserID.
func (mr *MockEmailVarificationTokenRepositoryMockRecorder) FindByTokenAndUserID(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTokenAndUserID", reflect.TypeOf((*MockEmailVarificationTokenRepository)(nil).FindByTokenAndUserID), ctx, token)
}

// MarkAsUsed mocks base method.
func (m *MockEmailVarificationTokenRepository) MarkAsUsed(ctx context.Context, tokenID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsUsed", ctx, tokenID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsUsed indicates an expected call of MarkAsUsed.
func (mr *MockEmailVarificationTokenRepositoryMockRecorder) MarkAsUsed(ctx, tokenID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsUsed", reflect.TypeOf((*MockEmailVarificationTokenRepository)(nil).MarkAsUsed), ctx, tokenID)
}

// Save mocks base method.
func (m *MockEmailVarificationTokenRepository) Save(ctx context.Context, token *model.EmailVerificationToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockEmailVarificationTokenRepositoryMockRecorder) Save(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockEmailVarificationTokenRepository)(nil).Save), ctx, token)
}
